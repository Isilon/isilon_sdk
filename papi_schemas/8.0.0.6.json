{
    "/1/audit/topics": {
        "GET_args": {
            "description": "Retrieve a list of audit topics.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "topics": {
                    "items": {
                        "description": "Specifies the configuration settings for an audit topic.",
                        "properties": {
                            "id": {
                                "description": "Specifies the system-provided ID for the audit topic.",
                                "type": "string"
                            },
                            "max_cached_messages": {
                                "description": "Specifies the maximum number of messages that can be sent and received at the same time. Messages that are sent and received at the same time can be lost if a system crash occurs. You can prevent message loss by setting this property to 0, which sets audit logs to synchronous.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "name": {
                                "description": "Specifies the name of the audit topic.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new audit topic.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the configuration settings for an audit topic.",
            "properties": {
                "max_cached_messages": {
                    "description": "Specifies the maximum number of messages that can be sent and received at the same time. Messages that are sent and received at the same time can be lost if a system crash occurs. You can prevent message loss by setting this property to 0, which sets audit logs to synchronous.",
                    "minimum": 0,
                    "type": "integer"
                },
                "name": {
                    "description": "Specifies the name of the audit topic.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/audit/topics/<NAME>": {
        "DELETE_args": {
            "description": "Delete the audit topic.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the audit topic information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "topics": {
                    "items": {
                        "description": "Specifies the configuration settings for an audit topic.",
                        "properties": {
                            "id": {
                                "description": "Specifies the system-provided ID for the audit topic.",
                                "type": "string"
                            },
                            "max_cached_messages": {
                                "description": "Specifies the maximum number of messages that can be sent and received at the same time. Messages that are sent and received at the same time can be lost if a system crash occurs. You can prevent message loss by setting this property to 0, which sets audit logs to synchronous.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "name": {
                                "description": "Specifies the name of the audit topic.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the audit topic.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the configuration settings for an audit topic.",
            "properties": {
                "id": {
                    "description": "Specifies the system-provided ID for the audit topic.",
                    "type": "string"
                },
                "max_cached_messages": {
                    "description": "Specifies the maximum number of messages that can be sent and received at the same time. Messages that are sent and received at the same time can be lost if a system crash occurs. You can prevent message loss by setting this property to 0, which sets audit logs to synchronous.",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/access/<USER>": {
        "GET_args": {
            "description": "Determine user's access rights to a file",
            "properties": {
                "numeric": {
                    "description": "Show the user's numeric identifier.",
                    "type": "boolean"
                },
                "path": {
                    "description": "Path to the file. Must be within /ifs.",
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone the user is in.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "access": {
                    "items": {
                        "description": "Specifies access permissions that the user has to the file information.",
                        "properties": {
                            "file": {
                                "description": "Specifies properties for access rights.",
                                "properties": {
                                    "group": {
                                        "description": "Specifies the group name or ID for the file.",
                                        "type": "string"
                                    },
                                    "mode": {
                                        "description": "Specifies the mode bits on the file.",
                                        "type": "string"
                                    },
                                    "owner": {
                                        "description": "Specifies the name or ID of the file owner.",
                                        "type": "string"
                                    },
                                    "relevant_mode": {
                                        "description": "Specifies the mode bits that are related to the user.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "Specifies the ID of the user.",
                                "type": "string"
                            },
                            "permissions": {
                                "description": "Specifies the permissions that the user has on the file.",
                                "properties": {
                                    "dacl": {
                                        "description": "Returns a status message if the Null ACL is set.",
                                        "type": "string"
                                    },
                                    "delete_child": {
                                        "description": "Returns a status message if the parent directory has the delete_child property set for the user. If the delete_child property is set for a user, that user is able to delete the file.the delete_child for the user.",
                                        "type": "string"
                                    },
                                    "expected": {
                                        "description": "Specifies the Access Control Entity (ACE) for the user.",
                                        "type": "string"
                                    },
                                    "ownership": {
                                        "description": "Returns a status message if the user owns the file.",
                                        "type": "string"
                                    },
                                    "sticky": {
                                        "description": "Returns a status message if the user owns the file.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "relevant_aces": {
                                "description": "Specifies a list of the relevant Access Control Entries for the user.",
                                "item": {
                                    "description": "Specifies properties for an Access Control Entry.",
                                    "properties": {
                                        "ace": {
                                            "description": "Specifies properties for an Access Control Entry",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "user": {
                                "description": "Specifies the persona for the user.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of the persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "Specifies the uid of the user.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/groups": {
        "DELETE_args": {
            "description": "Flush the groups cache.",
            "properties": {
                "cached": {
                    "description": "If true, only flush cached objects.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all groups.",
            "properties": {
                "cached": {
                    "description": "If true, only return cached objects.",
                    "type": "boolean"
                },
                "domain": {
                    "description": "Filter groups by domain.",
                    "type": "string"
                },
                "filter": {
                    "description": "Filter groups by name prefix.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "query_member_of": {
                    "description": "Enumerate all groups that a group is a member of.",
                    "type": "boolean"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "groups": {
                    "items": {
                        "description": "Specifies configuration properties for a group.",
                        "properties": {
                            "dn": {
                                "description": "Specifies the distinguished name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dns_domain": {
                                "description": "Specifies the DNS domain.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the domain that the object is part of.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "generated_gid": {
                                "description": "If true, the GID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "gid": {
                                "description": "Specifies the numeric group identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the user or group ID.",
                                "required": true,
                                "type": "string"
                            },
                            "member_of": {
                                "description": "Specifies the groups that this user or group are members of.",
                                "required": true,
                                "type": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "items": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": "string"
                            },
                            "provider": {
                                "description": "Specifies the authentication provider that the object belongs to.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sam_account_name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Specifies the object type.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new group.",
            "properties": {
                "force": {
                    "description": "Skip validation checks when creating a group.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Optional provider type.",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the configuration properties for a group.",
            "properties": {
                "gid": {
                    "description": "Specifies the numeric group identifier.",
                    "type": "integer"
                },
                "members": {
                    "description": "Specifies the members of the group.",
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Specifies the group name.",
                    "required": true,
                    "type": "string"
                },
                "sid": {
                    "description": "Specifies the security identifier.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/groups/<GROUP>": {
        "DELETE_args": {
            "description": "Delete the group.",
            "properties": {
                "cached": {
                    "description": "If true, flush the group from the cache.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the group information.",
            "properties": {
                "cached": {
                    "description": "If true, only return cached objects.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "query_member_of": {
                    "description": "Enumerate all groups that a group is a member of.",
                    "type": "boolean"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "groups": {
                    "items": {
                        "description": "Specifies configuration properties for a group.",
                        "properties": {
                            "dn": {
                                "description": "Specifies the distinguished name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dns_domain": {
                                "description": "Specifies the DNS domain.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the domain that the object is part of.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "generated_gid": {
                                "description": "If true, the GID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "gid": {
                                "description": "Specifies the numeric group identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the user or group ID.",
                                "required": true,
                                "type": "string"
                            },
                            "member_of": {
                                "description": "Specifies the groups that this user or group are members of.",
                                "required": true,
                                "type": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "items": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": "string"
                            },
                            "provider": {
                                "description": "Specifies the authentication provider that the object belongs to.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sam_account_name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Specifies the object type.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the group.",
            "properties": {
                "force": {
                    "description": "Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Optional provider type.",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the configuration properties for a group.",
            "properties": {
                "gid": {
                    "description": "Specifies the numeric group identifier.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/groups/<GROUP>/members": {
        "GET_args": {
            "description": "List all the members of the group.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "provider": {
                    "description": "Filter group members by provider.",
                    "type": "string"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter group members by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "members": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add a member to the group.",
            "properties": {
                "provider": {
                    "description": "Filter group members by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter group members by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
            "properties": {
                "id": {
                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the persona name, which must be combined with a type.",
                    "type": "string"
                },
                "type": {
                    "description": "Specifies the type of persona, which must be combined with a name.",
                    "enum": [
                        "user",
                        "group",
                        "wellknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/groups/<GROUP>/members/<MEMBER>": {
        "DELETE_args": {
            "description": "Remove the member from the group.",
            "properties": {
                "provider": {
                    "description": "Filter group members by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter group members by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/id": {
        "GET_args": {
            "description": "Retrieve the current security token.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "ntoken": {
                    "description": "Specifies properties for a security token for the currently authenticated user.",
                    "properties": {
                        "additional_id": {
                            "description": "Specifies additional UIDs, GIDs, and SIDs.",
                            "items": {
                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "gid": {
                            "description": "Specifies properties for the currently authenticated primary group ID for the user.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "group_sid": {
                            "description": "Specifies properties for the currently authenticated primary group security ID for the user.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "ifs_restricted": {
                            "description": "Indicates if this user has restricted access to the /ifs file system.",
                            "type": "boolean"
                        },
                        "local_address": {
                            "description": "Specifies the IP address of the node that is serving the request.",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "on_disk_group_id": {
                            "description": "Specifies the group ID that is stored on disk for the authenticated user.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "on_disk_user_id": {
                            "description": "Specifies the user ID that is stored on disk for the authenticated user.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "privilege": {
                            "description": "Specifies the privileges granted to the currently authenticated user.",
                            "items": {
                                "description": "Specifies the system-defined privilege that may be granted to users.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the ID of the privilege.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the name of the privilege.",
                                        "type": "string"
                                    },
                                    "read_only": {
                                        "description": "True, if the privilege is read-only.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "protocol": {
                            "description": "Specifies the protocol that is responsible for the creation of the token. The integer values for each protcol are as follows: NFS (1), SMB (2), NLM (3), FTP (4), HTTP (5), ISCSI (7), SMB2 (8), NFS4 (9), OneFS API (10), HDFS (15), console (16), and SSH (17).",
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "remote_address": {
                            "description": "Specifies the IP address of the client requesting information.",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "uid": {
                            "description": "Specifies the currently authenticated user ID.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "user_sid": {
                            "description": "Specifies the currently authenticated security ID for the user.",
                            "type": [
                                {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "zid": {
                            "description": "Specifies the zone ID of the access zone that is serving the request.",
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "zone_id": {
                            "description": "Specifies the name of the access zone that is serving the request.",
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/mapping/identities": {
        "DELETE_args": {
            "description": "Flush the entire idmap cache.",
            "properties": {
                "filter": {
                    "description": "Filter to apply when deleting identity mappings.",
                    "enum": [
                        "auto",
                        "external"
                    ],
                    "type": "string"
                },
                "remove": {
                    "description": "Delete mapping instead of flush mapping cache.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Manually set or modify a mapping between two personae.",
            "properties": {
                "2way": {
                    "description": "Create a bi-directional mapping from source to target and target to source.",
                    "type": "boolean"
                },
                "replace": {
                    "description": "Replace existing mappings.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the properties for the identity mapping entry.",
            "properties": {
                "source": {
                    "description": "Specifies the source identity.",
                    "required": true,
                    "type": [
                        {
                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                            "properties": {
                                "id": {
                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Specifies the persona name, which must be combined with a type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                    "enum": [
                                        "user",
                                        "group",
                                        "wellknown"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "targets": {
                    "items": {
                        "description": "Specifies the target identity mappings.",
                        "properties": {
                            "on_disk": {
                                "description": "Identity is preferred on-disk.",
                                "required": false,
                                "type": "boolean"
                            },
                            "target": {
                                "description": "Specifies the target identity.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Origin of identity mapping.",
                                "enum": [
                                    "auto",
                                    "external",
                                    "manual"
                                ],
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/1/auth/mapping/identities/<SOURCE>": {
        "DELETE_args": {
            "description": "Flush the entire idmap cache.",
            "properties": {
                "2way": {
                    "description": "Delete the bi-directional mapping from source to target and target to source.",
                    "type": "boolean"
                },
                "remove": {
                    "description": "Delete mapping instead of flush mapping from cache.",
                    "type": "boolean"
                },
                "target": {
                    "description": "Target identity persona.",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.",
            "properties": {
                "nocreate": {
                    "description": "Idmap should attempt to create missing identity mappings.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "identities": {
                    "items": {
                        "description": "Specifies properties for the identity mapping entry.",
                        "properties": {
                            "id": {
                                "description": "Specifies the identity mapping entry id.",
                                "required": true,
                                "type": "string"
                            },
                            "source": {
                                "description": "Specifies the source identity.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "targets": {
                                "items": {
                                    "description": "Specifies the target identity mappings.",
                                    "properties": {
                                        "on_disk": {
                                            "description": "If true, the identity is preferred on-disk.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "target": {
                                            "description": "Specifies the target identity.",
                                            "required": true,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": {
                                            "description": "Specifies the origin of the identity mapping.",
                                            "enum": [
                                                "auto",
                                                "external",
                                                "manual"
                                            ],
                                            "required": false,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Manually set or modify a mapping between two personae.",
            "properties": {
                "type": {
                    "description": "Desired mapping target to fetch/generate.",
                    "enum": [
                        "uid",
                        "gid",
                        "sid"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "identities": {
                    "items": {
                        "description": "Specifies properties for the identity mapping entry.",
                        "properties": {
                            "id": {
                                "description": "Specifies the identity mapping entry id.",
                                "required": true,
                                "type": "string"
                            },
                            "source": {
                                "description": "Specifies the source identity.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "targets": {
                                "items": {
                                    "description": "Specifies the target identity mappings.",
                                    "properties": {
                                        "on_disk": {
                                            "description": "If true, the identity is preferred on-disk.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "target": {
                                            "description": "Specifies the target identity.",
                                            "required": true,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": {
                                            "description": "Specifies the origin of the identity mapping.",
                                            "enum": [
                                                "auto",
                                                "external",
                                                "manual"
                                            ],
                                            "required": false,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/mapping/users/lookup": {
        "GET_args": {
            "description": "Retrieve the user information.",
            "properties": {
                "gid": {
                    "description": "The IDs of the groups that the user belongs to.",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "kerberos_principal": {
                    "description": "The Kerberos principal name, of the form user@realm.",
                    "type": "string"
                },
                "primary_gid": {
                    "description": "The user's primary group ID.",
                    "type": "integer"
                },
                "uid": {
                    "description": "The user ID.",
                    "type": "integer"
                },
                "user": {
                    "description": "The user name.",
                    "type": "string"
                },
                "zone": {
                    "description": "The zone the user belongs to.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "mapping": {
                    "description": "Lookup a user access token.",
                    "items": {
                        "properties": {
                            "groups": {
                                "items": {
                                    "description": "Specifies the configuration properties for a user.",
                                    "properties": {
                                        "dn": {
                                            "description": "Specifies the distinguished name for the user.",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "dns_domain": {
                                            "description": "Specifies the DNS domain.",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "domain": {
                                            "description": "Specifies the domain that the object is part of.",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "email": {
                                            "description": "Specifies an email address.",
                                            "required": false,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "enabled": {
                                            "description": "If true, the authenticated user is enabled.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "expired": {
                                            "description": "If true, the authenticated auth user is expired.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "expiry": {
                                            "description": "Specifies the Epoch time at which the authenticated user will expire.",
                                            "required": false,
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "gecos": {
                                            "description": "Specifies the GECOS value, which is usually the full name.",
                                            "required": false,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "generated_gid": {
                                            "description": "If true, indicates that the GID was generated.",
                                            "required": false,
                                            "type": [
                                                "boolean",
                                                "null"
                                            ]
                                        },
                                        "generated_uid": {
                                            "description": "If true, indicates that the UID was generated.",
                                            "required": false,
                                            "type": [
                                                "boolean",
                                                "null"
                                            ]
                                        },
                                        "generated_upn": {
                                            "description": "If true, indicates that the UPN was generated.",
                                            "required": false,
                                            "type": [
                                                "boolean",
                                                "null"
                                            ]
                                        },
                                        "gid": {
                                            "description": "Specifies a group ID for the user.",
                                            "required": false,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "home_directory": {
                                            "description": "Specifies the home directory for the user.",
                                            "required": false,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "id": {
                                            "description": "Specifies the user or group ID.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "locked": {
                                            "description": "If true, the account is locked out.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "max_password_age": {
                                            "description": "Specifies the maximum time in seconds allowed before the password expires.",
                                            "required": false,
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "member_of": {
                                            "description": "Specifies the groups that this user or group are members of.",
                                            "required": true,
                                            "type": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "items": {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            ]
                                        },
                                        "name": {
                                            "description": "Specifies a user or group name.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "on_disk_group_identity": {
                                            "description": "Specifies the group identity on the disk.",
                                            "required": false,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "on_disk_user_identity": {
                                            "description": "Specifies the user identity on the disk.",
                                            "required": false,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "password_expired": {
                                            "description": "If true, the password has expired.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "password_expires": {
                                            "description": "If true, the password is allowed to expire.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "password_expiry": {
                                            "description": "Specifies the time in Epoch seconds the password will expire.",
                                            "required": false,
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "password_last_set": {
                                            "description": "Specifies the last time the password was set.",
                                            "required": false,
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "primary_group_sid": {
                                            "description": "Specifies the security ID of the primary group for the user.",
                                            "required": false,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "prompt_password_change": {
                                            "description": "If true, prompts the user to change their password on next login.",
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "provider": {
                                            "description": "Specifies the authentication provider that the object belongs to.",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "sam_account_name": {
                                            "description": "Specifies a user or group name.",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "shell": {
                                            "description": "Specifies the path to the shell for the user.",
                                            "required": false,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "sid": {
                                            "description": "Specifies the security identifier.",
                                            "required": true,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": {
                                            "description": "Specifies the object type.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "uid": {
                                            "description": "Specifies the user ID.",
                                            "required": false,
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "upn": {
                                            "description": "Specifies the user principal name.",
                                            "required": false,
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "user_can_change_password": {
                                            "description": "If true, the user password can be changed.",
                                            "required": false,
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "privileges": {
                                "items": {
                                    "description": "Specifies the system-defined privilege that may be granted to users.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the ID of the privilege.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": "string"
                                        },
                                        "read_only": {
                                            "description": "True, if the privilege is read-only.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "user": {
                                "description": "Specifies the configuration properties for a user.",
                                "properties": {
                                    "dn": {
                                        "description": "Specifies the distinguished name for the user.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "dns_domain": {
                                        "description": "Specifies the DNS domain.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "domain": {
                                        "description": "Specifies the domain that the object is part of.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "email": {
                                        "description": "Specifies an email address.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "enabled": {
                                        "description": "True, if the authenticated user is enabled.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "expired": {
                                        "description": "True, if the authenticated user has expired.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "expiry": {
                                        "description": "Specifies the Unix Epoch time at which the authenticated user will expire.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "gecos": {
                                        "description": "Specifies the GECOS value, which is usually the full name.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "generated_gid": {
                                        "description": "True, if the GID was generated.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "generated_uid": {
                                        "description": "True, if the UID was generated.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "generated_upn": {
                                        "description": "True, if the UPN was generated.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "gid": {
                                        "description": "Specifies a group ID for the user.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "home_directory": {
                                        "description": "Specifies a home directory for the user.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "id": {
                                        "description": "Specifies the user or group ID.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "If true, indicates that the account is locked.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "max_password_age": {
                                        "description": "Specifies the maximum time in seconds allowed before the password expires.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "member_of": {
                                        "description": "Specifies the groups that this user or group are members of.",
                                        "required": true,
                                        "type": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "items": {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "name": {
                                        "description": "Specifies a user or group name.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "on_disk_group_identity": {
                                        "description": "Specifies the group identity on the disk.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "on_disk_user_identity": {
                                        "description": "Specifies the user identity on the disk.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "password_expired": {
                                        "description": "If true, the password has expired.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "password_expires": {
                                        "description": "If true, the password is allowed to expire.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "password_expiry": {
                                        "description": "Specifies the time in Unix Epoch seconds that the password will expire.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "password_last_set": {
                                        "description": "Specifies the last time the password was set.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "primary_group_sid": {
                                        "description": "Specifies the security ID of the primary group for the user.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "prompt_password_change": {
                                        "description": "Prompts the user to change their password at the next login.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "provider": {
                                        "description": "Specifies the authentication provider that the object belongs to.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "sam_account_name": {
                                        "description": "Specifies a user or group name.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "shell": {
                                        "description": "Specifies a path to the shell for the user.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "sid": {
                                        "description": "Specifies the security identifier.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "description": "Specifies the object type.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "Specifies an ID for the user.",
                                        "required": true,
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "upn": {
                                        "description": "Specifies a principal name for the user.",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "user_can_change_password": {
                                        "description": "Specifies whether the password for the user can be changed.",
                                        "required": true,
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "zid": {
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "zone": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/mapping/users/rules": {
        "GET_args": {
            "description": "Retrieve the user mapping rules.",
            "properties": {
                "zone": {
                    "description": "The zone to which the user mapping applies.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "rules": {
                    "description": "Specifies the properties for user mapping rules.",
                    "properties": {
                        "parameters": {
                            "description": "Specifies the default UNIX user information that can be applied if the final credentials do not have valid UID and GID information.",
                            "properties": {
                                "default_unix_user": {
                                    "type": [
                                        {
                                            "properties": {
                                                "domain": {
                                                    "description": "Specifies the domain of the user that is being mapped.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "user": {
                                                    "description": "Specifies the name of the user that is being mapped.",
                                                    "required": true,
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "rules": {
                            "description": "Specifies the list of user mapping rules.",
                            "items": {
                                "properties": {
                                    "operator": {
                                        "description": "Specifies the operator to make rules on specified users or groups.",
                                        "enum": [
                                            "append",
                                            "insert",
                                            "replace",
                                            "trim",
                                            "union"
                                        ],
                                        "type": "string"
                                    },
                                    "options": {
                                        "type": [
                                            {
                                                "description": "Specifies the properties for user mapping rules.",
                                                "properties": {
                                                    "break": {
                                                        "description": "If true, and the rule was applied successfully, stop processing further.",
                                                        "type": "boolean"
                                                    },
                                                    "default_user": {
                                                        "type": [
                                                            {
                                                                "properties": {
                                                                    "domain": {
                                                                        "description": "Specifies the domain of the user that is being mapped.",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "user": {
                                                                        "description": "Specifies the name of the user that is being mapped.",
                                                                        "required": true,
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            {
                                                                "type": "null"
                                                            }
                                                        ]
                                                    },
                                                    "group": {
                                                        "description": "If true, the primary GID and primary group SID should be copied to the existing credential.",
                                                        "type": "boolean"
                                                    },
                                                    "groups": {
                                                        "description": "If true, all additional identifiers should be copied to the existing credential.",
                                                        "type": "boolean"
                                                    },
                                                    "user": {
                                                        "description": "If true, the primary UID and primary user SID should be copied to the existing credential.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "user1": {
                                        "description": "Specifies the first user this rule apples to.",
                                        "required": true,
                                        "type": [
                                            {
                                                "properties": {
                                                    "domain": {
                                                        "description": "Specifies the domain of the user that is being mapped.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "user": {
                                                        "description": "Specifies the name of the user that is being mapped.",
                                                        "required": true,
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "user2": {
                                        "type": [
                                            {
                                                "properties": {
                                                    "domain": {
                                                        "description": "Specifies the domain of the user that is being mapped.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "user": {
                                                        "description": "Specifies the name of the user that is being mapped.",
                                                        "required": true,
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the user mapping rules.",
            "properties": {
                "zone": {
                    "description": "The zone to which the user mapping applies.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "type": [
                {
                    "enum": [
                        "@DEFAULT"
                    ],
                    "type": "string"
                },
                {
                    "description": "Specifies the properties for user mapping rules.",
                    "properties": {
                        "parameters": {
                            "type": [
                                {
                                    "enum": [
                                        "@DEFAULT"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "description": "Specifies the default UNIX user information that can be applied if the final credentials do not have valid UID and GID information.",
                                    "properties": {
                                        "default_unix_user": {
                                            "type": [
                                                {
                                                    "properties": {
                                                        "domain": {
                                                            "description": "Specifies the domain of the user that is being mapped.",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "user": {
                                                            "description": "Specifies the name of the user that is being mapped.",
                                                            "required": true,
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "rules": {
                            "type": [
                                {
                                    "enum": [
                                        "@DEFAULT"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "description": "Specifies the list of user mapping rules.",
                                    "items": {
                                        "properties": {
                                            "operator": {
                                                "description": "Specifies the operator to make rules on specified users or groups.",
                                                "enum": [
                                                    "append",
                                                    "insert",
                                                    "replace",
                                                    "trim",
                                                    "union"
                                                ],
                                                "type": "string"
                                            },
                                            "options": {
                                                "type": [
                                                    {
                                                        "description": "Specifies the properties for user mapping rules.",
                                                        "properties": {
                                                            "break": {
                                                                "description": "If true, and the rule was applied successfully, stop processing further.",
                                                                "type": "boolean"
                                                            },
                                                            "default_user": {
                                                                "type": [
                                                                    {
                                                                        "properties": {
                                                                            "domain": {
                                                                                "description": "Specifies the domain of the user that is being mapped.",
                                                                                "type": [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "user": {
                                                                                "description": "Specifies the name of the user that is being mapped.",
                                                                                "required": true,
                                                                                "type": [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    {
                                                                        "type": "null"
                                                                    }
                                                                ]
                                                            },
                                                            "group": {
                                                                "description": "If true, the primary GID and primary group SID should be copied to the existing credential.",
                                                                "type": "boolean"
                                                            },
                                                            "groups": {
                                                                "description": "If true, all additional identifiers should be copied to the existing credential.",
                                                                "type": "boolean"
                                                            },
                                                            "user": {
                                                                "description": "If true, the primary UID and primary user SID should be copied to the existing credential.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "null"
                                                    }
                                                ]
                                            },
                                            "user1": {
                                                "description": "Specifies the first user this rule apples to.",
                                                "required": true,
                                                "type": [
                                                    {
                                                        "properties": {
                                                            "domain": {
                                                                "description": "Specifies the domain of the user that is being mapped.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "user": {
                                                                "description": "Specifies the name of the user that is being mapped.",
                                                                "required": true,
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "user2": {
                                                "type": [
                                                    {
                                                        "properties": {
                                                            "domain": {
                                                                "description": "Specifies the domain of the user that is being mapped.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "user": {
                                                                "description": "Specifies the name of the user that is being mapped.",
                                                                "required": true,
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "null"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            ]
        }
    },
    "/1/auth/netgroups/<NETGROUP>": {
        "GET_args": {
            "description": "Retrieve the user information.",
            "properties": {
                "ignore_errors": {
                    "description": "Ignore netgroup errors.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter users by provider.",
                    "type": "string"
                },
                "recursive": {
                    "description": "Perform recursive search.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Filter users by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "netgroups": {
                    "items": {
                        "properties": {
                            "domainname": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "hostname": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "netgroup": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "username": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/privileges": {
        "GET_args": {
            "description": "List all privileges.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "privileges": {
                    "items": {
                        "description": "Specifies the system-defined privilege that may be granted to users.",
                        "properties": {
                            "category": {
                                "description": "Specifies the general categorization of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "description": {
                                "description": "Specifies a short description of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Specifies the ID of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name of the privilege.",
                                "type": "string"
                            },
                            "read_write": {
                                "description": "True, if the privilege is read-write.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/ads/<ID>/controllers": {
        "GET_args": {
            "description": "List all ADS controllers.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "controllers": {
                    "items": {
                        "description": "Specifies a controller for an ADS provider.",
                        "properties": {
                            "dc_address": {
                                "description": "Specifies the address for the domain controller.",
                                "type": "string"
                            },
                            "dc_name": {
                                "description": "Specifies the name of the domain controller.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Specifies the address for the domain controller. This value is the same as the 'dc_address' value.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/ads/<ID>/search": {
        "GET_args": {
            "description": "Retrieve search results.",
            "properties": {
                "description": {
                    "description": "The user or group description to search for.",
                    "type": "string"
                },
                "domain": {
                    "description": "The domain to search in.",
                    "type": "string"
                },
                "filter": {
                    "description": "The LDAP filter to apply to the search.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "password": {
                    "description": "The password for the domain if untrusted.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "search_groups": {
                    "description": "If true, search for groups.",
                    "type": "boolean"
                },
                "search_users": {
                    "description": "If true, search for users.",
                    "type": "boolean"
                },
                "user": {
                    "description": "The user name for the domain if untrusted.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "objects": {
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "display_name": {
                                "type": "string"
                            },
                            "id": {
                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/file": {
        "GET_args": {
            "description": "List all file providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "file": {
                    "items": {
                        "description": "Specifies the properties for an authentication file provider",
                        "properties": {
                            "authentication": {
                                "description": "Enables authentication and identity mapping through the authentication provider.",
                                "type": "boolean"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates a home directory on the first login.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "Enables the file provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "Enables the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "Enables the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which domains are qualified.",
                                "type": "string"
                            },
                            "group_file": {
                                "description": "Specifies the location of the file that contains information about the group.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the file provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "modifiable_groups": {
                                "description": "Specifies the groups that can be modified in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "modifiable_users": {
                                "description": "Specifies the users that can be modified in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the file provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "netgroup_file": {
                                "description": "Specifies the path to a netgroups replacement file.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "password_file": {
                                "description": "Specifies the location of the file containing information about users.",
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the domain for the provider.",
                                "type": "string"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_modifiable": {
                                "description": "If true, checks the provider for filtered lists of modifiable and unmodifiable users and groups.",
                                "type": "boolean"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unmodifiable_groups": {
                                "description": "Specifies a group that cannot be modified by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unmodifiable_users": {
                                "description": "Specifies a user that cannot be modified by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new file provider.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the properties for an authentication file provider",
            "properties": {
                "authentication": {
                    "description": "Enables authentication and identity mapping through the authentication provider.",
                    "type": "boolean"
                },
                "create_home_directory": {
                    "description": "Automatically creates a home directory on the first login.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Enables the file provider.",
                    "type": "boolean"
                },
                "enumerate_groups": {
                    "description": "Enables the provider to enumerate groups.",
                    "type": "boolean"
                },
                "enumerate_users": {
                    "description": "Enables the provider to enumerate users.",
                    "type": "boolean"
                },
                "findable_groups": {
                    "description": "Specifies the list of groups that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "findable_users": {
                    "description": "Specifies the list of users that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "group_domain": {
                    "description": "Specifies the domain for this provider through which domains are qualified.",
                    "type": "string"
                },
                "group_file": {
                    "description": "Specifies the location of the file that contains information about the group.",
                    "required": true,
                    "type": "string"
                },
                "home_directory_template": {
                    "description": "Specifies the path to the home directory template.",
                    "type": "string"
                },
                "listable_groups": {
                    "description": "Specifies the groups that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "listable_users": {
                    "description": "Specifies the users that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "login_shell": {
                    "description": "Specifies the login shell path.",
                    "type": "string"
                },
                "modifiable_groups": {
                    "description": "Specifies the groups that can be modified in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "modifiable_users": {
                    "description": "Specifies the users that can be modified in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Specifies the name of the file provider.",
                    "required": true,
                    "type": "string"
                },
                "netgroup_file": {
                    "description": "Specifies the path to a netgroups replacement file.",
                    "type": "string"
                },
                "normalize_groups": {
                    "description": "Normalizes group names to lowercase before look up.",
                    "type": "boolean"
                },
                "normalize_users": {
                    "description": "Normalizes user names to lowercase before look up.",
                    "type": "boolean"
                },
                "ntlm_support": {
                    "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                    "enum": [
                        "all",
                        "v2only",
                        "none"
                    ],
                    "type": "string"
                },
                "password_file": {
                    "description": "Specifies the location of the file containing information about users.",
                    "required": true,
                    "type": "string"
                },
                "provider_domain": {
                    "description": "Specifies the domain for the provider.",
                    "type": "string"
                },
                "restrict_findable": {
                    "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                    "type": "boolean"
                },
                "restrict_listable": {
                    "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                    "type": "boolean"
                },
                "restrict_modifiable": {
                    "description": "If true, checks the provider for filtered lists of modifiable and unmodifiable users and groups.",
                    "type": "boolean"
                },
                "unfindable_groups": {
                    "description": "Specifies groups that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unfindable_users": {
                    "description": "Specifies users that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unlistable_groups": {
                    "description": "Specifies a group that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unlistable_users": {
                    "description": "Specifies a user that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unmodifiable_groups": {
                    "description": "Specifies a group that cannot be modified by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unmodifiable_users": {
                    "description": "Specifies a user that cannot be modified by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "user_domain": {
                    "description": "Specifies the domain for this provider through which users are qualified.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/file/<ID>": {
        "DELETE_args": {
            "description": "Delete the file provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the file provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "file": {
                    "items": {
                        "description": "Specifies the properties for an authentication file provider",
                        "properties": {
                            "authentication": {
                                "description": "Enables authentication and identity mapping through the authentication provider.",
                                "type": "boolean"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates a home directory on the first login.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "Enables the file provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "Enables the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "Enables the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which domains are qualified.",
                                "type": "string"
                            },
                            "group_file": {
                                "description": "Specifies the location of the file that contains information about the group.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the file provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "modifiable_groups": {
                                "description": "Specifies the groups that can be modified in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "modifiable_users": {
                                "description": "Specifies the users that can be modified in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the file provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "netgroup_file": {
                                "description": "Specifies the path to a netgroups replacement file.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "password_file": {
                                "description": "Specifies the location of the file containing information about users.",
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the domain for the provider.",
                                "type": "string"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_modifiable": {
                                "description": "If true, checks the provider for filtered lists of modifiable and unmodifiable users and groups.",
                                "type": "boolean"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unmodifiable_groups": {
                                "description": "Specifies a group that cannot be modified by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unmodifiable_users": {
                                "description": "Specifies a user that cannot be modified by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the file provider.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for an authentication file provider",
            "properties": {
                "authentication": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables authentication and identity mapping through the authentication provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "create_home_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically creates a home directory on the first login.",
                            "type": "boolean"
                        }
                    ]
                },
                "enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables the file provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables the provider to enumerate groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables the provider to enumerate users.",
                            "type": "boolean"
                        }
                    ]
                },
                "findable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of groups that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "findable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of users that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "group_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which domains are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "group_file": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the location of the file that contains information about the group.",
                            "type": "string"
                        }
                    ]
                },
                "home_directory_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the home directory template.",
                            "type": "string"
                        }
                    ]
                },
                "listable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the groups that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "listable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "login_shell": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the login shell path.",
                            "type": "string"
                        }
                    ]
                },
                "modifiable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the groups that can be modified in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "modifiable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users that can be modified in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the name of the file provider.",
                    "type": "string"
                },
                "netgroup_file": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to a netgroups replacement file.",
                            "type": "string"
                        }
                    ]
                },
                "normalize_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes group names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "normalize_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes user names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "ntlm_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                            "enum": [
                                "all",
                                "v2only",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "password_file": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the location of the file containing information about users.",
                            "type": "string"
                        }
                    ]
                },
                "provider_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for the provider.",
                            "type": "string"
                        }
                    ]
                },
                "restrict_findable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "restrict_listable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "restrict_modifiable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of modifiable and unmodifiable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "unfindable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies groups that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unfindable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies users that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unlistable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a group that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unlistable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a user that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unmodifiable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a group that cannot be modified by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unmodifiable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a user that cannot be modified by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "user_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which users are qualified.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/local": {
        "GET_args": {
            "description": "List all local providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "local": {
                    "items": {
                        "description": "Specifies the properties for a local authentication provider.",
                        "properties": {
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates the home directory on the first login.",
                                "type": "boolean"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the local provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "lockout_duration": {
                                "description": "Specifies the length of time in seconds that an account will be inaccessible after multiple failed login attempts.",
                                "type": "integer"
                            },
                            "lockout_threshold": {
                                "description": "Specifies the number of failed login attempts necessary before an account is locked.",
                                "type": "integer"
                            },
                            "lockout_window": {
                                "description": "Specifies the duration of time in seconds in which the number of failed attempts set in the 'lockout_threshold' parameter must be made before an account is locked.",
                                "type": "integer"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "machine_name": {
                                "description": "Specifies the domain for this provider through which users and groups are qualified.",
                                "type": "string"
                            },
                            "max_password_age": {
                                "description": "Specifies the maximum password age in seconds.",
                                "type": "integer"
                            },
                            "min_password_age": {
                                "description": "Specifies the minimum password age in seconds.",
                                "type": "integer"
                            },
                            "min_password_length": {
                                "description": "Specifies the minimum password length.",
                                "type": "integer"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the local provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "password_complexity": {
                                "description": "Specifies the conditions required for a password.",
                                "items": {
                                    "enum": [
                                        "lowercase",
                                        "uppercase",
                                        "numeric",
                                        "symbol"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "password_history_length": {
                                "description": "Specifies the number of previous passwords to store.",
                                "type": "integer"
                            },
                            "password_prompt_time": {
                                "description": "Specifies the time in seconds remaining before a user will be prompted for a password change.",
                                "type": "integer"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/providers/local/<ID>": {
        "DELETE_args": {
            "description": "Delete the local provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the local provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "local": {
                    "items": {
                        "description": "Specifies the properties for a local authentication provider.",
                        "properties": {
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates the home directory on the first login.",
                                "type": "boolean"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the local provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "lockout_duration": {
                                "description": "Specifies the length of time in seconds that an account will be inaccessible after multiple failed login attempts.",
                                "type": "integer"
                            },
                            "lockout_threshold": {
                                "description": "Specifies the number of failed login attempts necessary before an account is locked.",
                                "type": "integer"
                            },
                            "lockout_window": {
                                "description": "Specifies the duration of time in seconds in which the number of failed attempts set in the 'lockout_threshold' parameter must be made before an account is locked.",
                                "type": "integer"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "machine_name": {
                                "description": "Specifies the domain for this provider through which users and groups are qualified.",
                                "type": "string"
                            },
                            "max_password_age": {
                                "description": "Specifies the maximum password age in seconds.",
                                "type": "integer"
                            },
                            "min_password_age": {
                                "description": "Specifies the minimum password age in seconds.",
                                "type": "integer"
                            },
                            "min_password_length": {
                                "description": "Specifies the minimum password length.",
                                "type": "integer"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the local provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "password_complexity": {
                                "description": "Specifies the conditions required for a password.",
                                "items": {
                                    "enum": [
                                        "lowercase",
                                        "uppercase",
                                        "numeric",
                                        "symbol"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "password_history_length": {
                                "description": "Specifies the number of previous passwords to store.",
                                "type": "integer"
                            },
                            "password_prompt_time": {
                                "description": "Specifies the time in seconds remaining before a user will be prompted for a password change.",
                                "type": "integer"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the local provider.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for a local authentication provider.",
            "properties": {
                "authentication": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables authentication and identity management through the authentication provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "create_home_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically creates the home directory on the first login.",
                            "type": "boolean"
                        }
                    ]
                },
                "home_directory_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the home directory template.",
                            "type": "string"
                        }
                    ]
                },
                "lockout_duration": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the length of time in seconds that an account will be inaccessible after multiple failed login attempts.",
                            "type": "integer"
                        }
                    ]
                },
                "lockout_threshold": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the number of failed login attempts necessary before an account is locked.",
                            "type": "integer"
                        }
                    ]
                },
                "lockout_window": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the duration of time in seconds in which the number of failed attempts set in the 'lockout_threshold' parameter must be made before an account is locked.",
                            "type": "integer"
                        }
                    ]
                },
                "login_shell": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the login shell path.",
                            "type": "string"
                        }
                    ]
                },
                "machine_name": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which users and groups are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "max_password_age": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum password age in seconds.",
                            "type": "integer"
                        }
                    ]
                },
                "min_password_age": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the minimum password age in seconds.",
                            "type": "integer"
                        }
                    ]
                },
                "min_password_length": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the minimum password length.",
                            "type": "integer"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the local provider name.",
                    "type": "string"
                },
                "password_complexity": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the conditions required for a password.",
                            "items": {
                                "enum": [
                                    "lowercase",
                                    "uppercase",
                                    "numeric",
                                    "symbol"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "password_history_length": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the number of previous passwords to store.",
                            "type": "integer"
                        }
                    ]
                },
                "password_prompt_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the time in seconds remaining before a user will be prompted for a password change.",
                            "type": "integer"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/roles": {
        "GET_args": {
            "description": "List all roles.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resolve_names": {
                    "description": "Filter users by zone.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "roles": {
                    "items": {
                        "description": "Specifies the role maps privileges to users and groups.",
                        "properties": {
                            "description": {
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies the description of the role.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the ID of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "members": {
                                "description": "Specifies the users or groups that have this role.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "Specifies the name of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "privileges": {
                                "description": "Specifies the privileges granted by this role.",
                                "items": {
                                    "description": "Specifies the system-defined privilege that may be granted to users.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the ID of the privilege.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": "string"
                                        },
                                        "read_only": {
                                            "description": "True, if the privilege is read-only.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new role.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the role maps privileges to users and groups.",
            "properties": {
                "description": {
                    "description": "Specifies the description of the role.",
                    "type": "string"
                },
                "members": {
                    "description": "Specifies the users or groups that have this role.",
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Specifies the name of the role.",
                    "required": true,
                    "type": "string"
                },
                "privileges": {
                    "description": "Specifies the privileges granted by this role.",
                    "items": {
                        "description": "Specifies the system-defined privilege that may be granted to users.",
                        "properties": {
                            "id": {
                                "description": "Specifies the ID of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name of the privilege.",
                                "type": "string"
                            },
                            "read_only": {
                                "description": "True, if the privilege is read-only.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/roles/<ROLE>": {
        "DELETE_args": {
            "description": "Delete the role.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the role information.",
            "properties": {
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "roles": {
                    "items": {
                        "description": "Specifies the role maps privileges to users and groups.",
                        "properties": {
                            "description": {
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies the description of the role.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the ID of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "members": {
                                "description": "Specifies the users or groups that have this role.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "Specifies the name of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "privileges": {
                                "description": "Specifies the privileges granted by this role.",
                                "items": {
                                    "description": "Specifies the system-defined privilege that may be granted to users.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the ID of the privilege.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": "string"
                                        },
                                        "read_only": {
                                            "description": "True, if the privilege is read-only.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the role.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the role maps privileges to users and groups.",
            "properties": {
                "description": {
                    "description": "Specifies the description of the role.",
                    "type": "string"
                },
                "members": {
                    "description": "Specifies the users or groups that have this role.",
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Specifies the name of the role.",
                    "type": "string"
                },
                "privileges": {
                    "description": "Specifies the privileges granted by this role.",
                    "items": {
                        "description": "Specifies the system-defined privilege that may be granted to users.",
                        "properties": {
                            "id": {
                                "description": "Specifies the ID of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name of the privilege.",
                                "type": "string"
                            },
                            "read_only": {
                                "description": "True, if the privilege is read-only.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/roles/<ROLE>/members": {
        "GET_args": {
            "description": "List all the members of the role.",
            "properties": {
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "members": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add a member to the role.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
            "properties": {
                "id": {
                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the persona name, which must be combined with a type.",
                    "type": "string"
                },
                "type": {
                    "description": "Specifies the type of persona, which must be combined with a name.",
                    "enum": [
                        "user",
                        "group",
                        "wellknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/roles/<ROLE>/members/<MEMBER>": {
        "DELETE_args": {
            "description": "Remove a member from the role.",
            "type": "object"
        }
    },
    "/1/auth/roles/<ROLE>/privileges": {
        "GET_args": {
            "description": "List all privileges in the role.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "privileges": {
                    "items": {
                        "description": "Specifies the system-defined privilege that may be granted to users.",
                        "properties": {
                            "id": {
                                "description": "Specifies the ID of the privilege.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name of the privilege.",
                                "type": "string"
                            },
                            "read_only": {
                                "description": "True, if the privilege is read-only.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add a privilege to the role.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the system-defined privilege that may be granted to users.",
            "properties": {
                "id": {
                    "description": "Specifies the ID of the privilege.",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the name of the privilege.",
                    "type": "string"
                },
                "read_only": {
                    "description": "True, if the privilege is read-only.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/roles/<ROLE>/privileges/<PRIVILEGE>": {
        "DELETE_args": {
            "description": "Remove a privilege from a role.",
            "type": "object"
        }
    },
    "/1/auth/settings/global": {
        "GET_args": {
            "description": "Retrieve the global settings.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Zone which contains any per-zone settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "global_settings": {
                    "description": "Specifies the properties for global authentication settings.",
                    "properties": {
                        "alloc_retries": {
                            "type": [
                                {
                                    "description": "Specifies the number of times to retry an ID allocation before failing.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_enabled": {
                            "type": [
                                {
                                    "description": "If true, allocates GIDs from a fixed range.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_max": {
                            "type": [
                                {
                                    "description": "Specifies the ending number for a fixed range from which GIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_min": {
                            "type": [
                                {
                                    "description": "Specifies the starting number for a fixed range from which GIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_next": {
                            "type": [
                                {
                                    "description": "Specifies the next GID to allocate.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "group_uid": {
                            "type": [
                                {
                                    "description": "Specifies the user iD for a group when requested by the kernel.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "load_providers": {
                            "type": [
                                {
                                    "description": "Specifies which providers are loaded by the authentication daemon (lsassd).",
                                    "items": {
                                        "enum": [
                                            "ActiveDirectory",
                                            "Local",
                                            "Nss",
                                            "File",
                                            "Nis",
                                            "Ldap",
                                            "Krb5"
                                        ],
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "min_mapped_rid": {
                            "type": [
                                {
                                    "description": "Starts the RID in the local domain to map a UID and a GID.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "null_gid": {
                            "type": [
                                {
                                    "description": "Specifies an alternative GID when the kernel is unable to retrieve a GID for a persona.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "null_uid": {
                            "type": [
                                {
                                    "description": "Specifies an alternative UID when the kernel is unable to retrieve a UID for a persona.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "on_disk_identity": {
                            "type": [
                                {
                                    "description": "Specifies the type of identity that is stored on disk.",
                                    "enum": [
                                        "native",
                                        "unix",
                                        "sid"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "rpc_block_time": {
                            "type": [
                                {
                                    "description": "Specifies the minimum amount of time in milliseconds to wait before performing an oprestart.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "rpc_max_requests": {
                            "type": [
                                {
                                    "description": "Specifies the maximum number of outstanding RPC requests.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "rpc_timeout": {
                            "type": [
                                {
                                    "description": "Specifies the maximum amount of time in seconds to wait for an idmap response.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "send_ntlmv2": {
                            "type": [
                                {
                                    "description": "If true, sends NTLMv2 responses.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "space_replacement": {
                            "type": [
                                {
                                    "description": "Specifies the space replacement character.",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "system_gid_threshold": {
                            "type": [
                                {
                                    "description": "Specifies the minimum GID to attempt to look up in the idmap database.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "system_uid_threshold": {
                            "type": [
                                {
                                    "description": "Specifies the minimum UID to attempt to look up in the idmap database.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_enabled": {
                            "type": [
                                {
                                    "description": "If true, allocates UIDs from a fixed range.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_max": {
                            "type": [
                                {
                                    "description": "Specifies the ending number for a fixed range from which UIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_min": {
                            "type": [
                                {
                                    "description": "Specifies the starting number for a fixed range from which UIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_next": {
                            "type": [
                                {
                                    "description": "Specifies the next UID to allocate.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "unknown_gid": {
                            "type": [
                                {
                                    "description": "Specifies the GID for the unknown (anonymous) group.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "unknown_uid": {
                            "type": [
                                {
                                    "description": "Specifies the UID for the unknown (anonymous) user.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "user_object_cache_size": {
                            "type": [
                                {
                                    "description": "Specifies the maximum size (in bytes) of the security object cache in the authentication daemon.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "workgroup": {
                            "type": [
                                {
                                    "description": "Specifies the NetBIOS workgroup or domain.",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the global settings.",
            "properties": {
                "zone": {
                    "description": "Zone which contains any per-zone settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for global authentication settings.",
            "properties": {
                "alloc_retries": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the number of times to retry an ID allocation before failing.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allocates GIDs from a fixed range.",
                            "type": "boolean"
                        }
                    ]
                },
                "gid_range_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the ending number for a fixed range from which GIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_min": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the starting number for a fixed range from which GIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_next": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the next GID to allocate.",
                            "type": "integer"
                        }
                    ]
                },
                "group_uid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the user iD for a group when requested by the kernel.",
                            "type": "integer"
                        }
                    ]
                },
                "load_providers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies which providers are loaded by the authentication daemon (lsassd).",
                            "items": {
                                "enum": [
                                    "ActiveDirectory",
                                    "Local",
                                    "Nss",
                                    "File",
                                    "Nis",
                                    "Ldap",
                                    "Krb5"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "min_mapped_rid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Starts the RID in the local domain to map a UID and a GID.",
                            "type": "integer"
                        }
                    ]
                },
                "null_gid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies an alternative GID when the kernel is unable to retrieve a GID for a persona.",
                            "type": "integer"
                        }
                    ]
                },
                "null_uid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies an alternative UID when the kernel is unable to retrieve a UID for a persona.",
                            "type": "integer"
                        }
                    ]
                },
                "on_disk_identity": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the type of identity that is stored on disk.",
                            "enum": [
                                "native",
                                "unix",
                                "sid"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "rpc_block_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the minimum amount of time in milliseconds to wait before performing an oprestart.",
                            "type": "integer"
                        }
                    ]
                },
                "rpc_max_requests": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum number of outstanding RPC requests.",
                            "type": "integer"
                        }
                    ]
                },
                "rpc_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum amount of time in seconds to wait for an idmap response.",
                            "type": "integer"
                        }
                    ]
                },
                "send_ntlmv2": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, sends NTLMv2 responses.",
                            "type": "boolean"
                        }
                    ]
                },
                "space_replacement": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the space replacement character.",
                            "type": "string"
                        }
                    ]
                },
                "system_gid_threshold": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the minimum GID to attempt to look up in the idmap database.",
                            "type": "integer"
                        }
                    ]
                },
                "system_uid_threshold": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the minimum UID to attempt to look up in the idmap database.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allocates UIDs from a fixed range.",
                            "type": "boolean"
                        }
                    ]
                },
                "uid_range_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the ending number for a fixed range from which UIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_min": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the starting number for a fixed range from which UIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_next": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the next UID to allocate.",
                            "type": "integer"
                        }
                    ]
                },
                "unknown_gid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the GID for the unknown (anonymous) group.",
                            "type": "integer"
                        }
                    ]
                },
                "unknown_uid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the UID for the unknown (anonymous) user.",
                            "type": "integer"
                        }
                    ]
                },
                "user_object_cache_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum size (in bytes) of the security object cache in the authentication daemon.",
                            "type": "integer"
                        }
                    ]
                },
                "workgroup": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the NetBIOS workgroup or domain.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/krb5/defaults": {
        "GET_args": {
            "description": "Retrieve the krb5 settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "krb5_settings": {
                    "description": "Specifies the properties for the global Kerberos authentication settings.",
                    "properties": {
                        "always_send_preauth": {
                            "type": [
                                {
                                    "description": "If true, always attempts to preauthenticate to the domain controller.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "default_realm": {
                            "type": [
                                {
                                    "description": "Specifies the realm for unqualified names.",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "dns_lookup_kdc": {
                            "type": [
                                {
                                    "description": "If true, find KDCs through the DNS.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "dns_lookup_realm": {
                            "type": [
                                {
                                    "description": "If true, find realm names through the DNS.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the krb5 settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for the global Kerberos authentication settings.",
            "properties": {
                "always_send_preauth": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, always attempts to preauthenticate to the domain controller.",
                            "type": "boolean"
                        }
                    ]
                },
                "default_realm": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the realm for unqualified names.",
                            "type": "string"
                        }
                    ]
                },
                "dns_lookup_kdc": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, find KDCs through the DNS.",
                            "type": "boolean"
                        }
                    ]
                },
                "dns_lookup_realm": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, find realm names through the DNS.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/krb5/domains": {
        "GET_args": {
            "description": "Retrieve the krb5 settings for domains.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domain": {
                    "items": {
                        "description": "Specifies the Kerberos settings for domain-realm mappings.",
                        "properties": {
                            "domain": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the domain.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "ID of the domain",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new krb5 domain.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the Kerberos settings for domain-realm mappings.",
            "properties": {
                "domain": {
                    "description": "Specifies the name of the domain.",
                    "required": true,
                    "type": "string"
                },
                "realm": {
                    "description": "Specifies the name of the realm.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/krb5/domains/<DOMAIN>": {
        "DELETE_args": {
            "description": "Remove a krb5 domain.",
            "type": "object"
        },
        "GET_args": {
            "description": "View the krb5 domain settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domain": {
                    "items": {
                        "description": "Specifies the Kerberos settings for domain-realm mappings.",
                        "properties": {
                            "domain": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the domain.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "ID of the domain",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the krb5 domain settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the Kerberos settings for domain-realm mappings.",
            "properties": {
                "realm": {
                    "description": "Specifies the name of the realm.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/krb5/realms": {
        "GET_args": {
            "description": "Retrieve the krb5 settings for realms.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "realm": {
                    "items": {
                        "description": "Specifies the Kerberos settings for realm access.",
                        "properties": {
                            "admin_server": {
                                "type": [
                                    {
                                        "description": "Specifies the administrative server hostname.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "default_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the default domain mapped to the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "ID of realm",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "is_default_realm": {
                                "type": [
                                    {
                                        "description": "If true, indicates that the realm is the default.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "is_joined": {
                                "type": [
                                    {
                                        "description": "If true, indicates that the realm is joined.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "kdc": {
                                "type": [
                                    {
                                        "description": "Specifies the list of KDC hostnames.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new krb5 realm.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the Kerberos settings for realm access.",
            "properties": {
                "admin_server": {
                    "description": "Specifies the administrative server hostname.",
                    "type": "string"
                },
                "default_domain": {
                    "description": "Specifies the default domain mapped to the realm.",
                    "type": "string"
                },
                "is_default_realm": {
                    "description": "If true, indicates that the realm is the default.",
                    "type": "boolean"
                },
                "kdc": {
                    "description": "Specifies the list of KDC hostnames.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "realm": {
                    "description": "Specifies the name of the realm.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/krb5/realms/<REALM>": {
        "DELETE_args": {
            "description": "Remove a realm.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the krb5 settings for realms.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "realm": {
                    "items": {
                        "description": "Specifies the Kerberos settings for realm access.",
                        "properties": {
                            "admin_server": {
                                "type": [
                                    {
                                        "description": "Specifies the administrative server hostname.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "default_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the default domain mapped to the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "ID of realm",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "is_default_realm": {
                                "type": [
                                    {
                                        "description": "If true, indicates that the realm is the default.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "is_joined": {
                                "type": [
                                    {
                                        "description": "If true, indicates that the realm is joined.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "kdc": {
                                "type": [
                                    {
                                        "description": "Specifies the list of KDC hostnames.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the realm.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the krb5 realm settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the Kerberos settings for realm access.",
            "properties": {
                "admin_server": {
                    "description": "Specifies the administrative server hostname.",
                    "type": "string"
                },
                "default_domain": {
                    "description": "Specifies the default domain mapped to the realm.",
                    "type": "string"
                },
                "is_default_realm": {
                    "description": "If true, indicates that the realm is the default.",
                    "type": "boolean"
                },
                "kdc": {
                    "description": "Specifies the list of KDC hostnames.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/settings/mapping": {
        "GET_args": {
            "description": "Retrieve the mapping settings.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone which contains mapping settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "mapping_settings": {
                    "description": "Specifies the properties for global authentication setting.",
                    "properties": {
                        "cache_entry_expiry": {
                            "type": [
                                {
                                    "description": "Specifies the cache expiry in seconds of the idmapper.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_enabled": {
                            "type": [
                                {
                                    "description": "If true, allocates GIDs from a fixed range.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_max": {
                            "type": [
                                {
                                    "description": "Specifies the ending number for a fixed range from which GIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_min": {
                            "type": [
                                {
                                    "description": "Specifies the starting number for a fixed range from which GIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "gid_range_next": {
                            "type": [
                                {
                                    "description": "Specifies the next GID to allocate.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_enabled": {
                            "type": [
                                {
                                    "description": "If true, allocates UIDs from a fixed range.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_max": {
                            "type": [
                                {
                                    "description": "Specifies the ending number for a fixed range from which UIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_min": {
                            "type": [
                                {
                                    "description": "Specifies the starting number for a fixed range from which UIDs are allocated.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "uid_range_next": {
                            "type": [
                                {
                                    "description": "Specifies the next UID to allocate.",
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the mapping settings.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains mapping settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for global authentication setting.",
            "properties": {
                "cache_entry_expiry": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the cache expiry in seconds of the idmapper.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allocates GIDs from a fixed range.",
                            "type": "boolean"
                        }
                    ]
                },
                "gid_range_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the ending number for a fixed range from which GIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_min": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the starting number for a fixed range from which GIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "gid_range_next": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the next GID to allocate.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allocates UIDs from a fixed range.",
                            "type": "boolean"
                        }
                    ]
                },
                "uid_range_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the ending number for a fixed range from which UIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_min": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the starting number for a fixed range from which UIDs are allocated.",
                            "type": "integer"
                        }
                    ]
                },
                "uid_range_next": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the next UID to allocate.",
                            "type": "integer"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/auth/shells": {
        "GET_args": {
            "description": "List all shells.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The list of supported shells.",
            "properties": {
                "shells": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/users": {
        "DELETE_args": {
            "description": "Flush the users cache.",
            "properties": {
                "cached": {
                    "description": "If true, only flush cached objects.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter users by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter users by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all users.",
            "properties": {
                "cached": {
                    "description": "If true, only return cached objects.",
                    "type": "boolean"
                },
                "domain": {
                    "description": "Filter users by domain.",
                    "type": "string"
                },
                "filter": {
                    "description": "Filter users by name prefix.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "provider": {
                    "description": "Filter users by provider.",
                    "type": "string"
                },
                "query_member_of": {
                    "description": "Enumerate all users that a group is a member of.",
                    "type": "boolean"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter users by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "users": {
                    "items": {
                        "description": "Specifies the configuration properties for a user.",
                        "properties": {
                            "dn": {
                                "description": "Specifies the distinguished name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dns_domain": {
                                "description": "Specifies the DNS domain.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the domain that the object is part of.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "email": {
                                "description": "Specifies an email address.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "enabled": {
                                "description": "True, if the authenticated user is enabled.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expired": {
                                "description": "True, if the authenticated user has expired.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expiry": {
                                "description": "Specifies the Unix Epoch time at which the authenticated user will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "gecos": {
                                "description": "Specifies the GECOS value, which is usually the full name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "generated_gid": {
                                "description": "True, if the GID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "generated_uid": {
                                "description": "True, if the UID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "generated_upn": {
                                "description": "True, if the UPN was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "gid": {
                                "description": "Specifies a group ID for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "home_directory": {
                                "description": "Specifies a home directory for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Specifies the user or group ID.",
                                "required": true,
                                "type": "string"
                            },
                            "locked": {
                                "description": "If true, indicates that the account is locked.",
                                "required": true,
                                "type": "boolean"
                            },
                            "max_password_age": {
                                "description": "Specifies the maximum time in seconds allowed before the password expires.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "member_of": {
                                "description": "Specifies the groups that this user or group are members of.",
                                "required": true,
                                "type": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "items": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": "string"
                            },
                            "on_disk_group_identity": {
                                "description": "Specifies the group identity on the disk.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "on_disk_user_identity": {
                                "description": "Specifies the user identity on the disk.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "password_expired": {
                                "description": "If true, the password has expired.",
                                "required": true,
                                "type": "boolean"
                            },
                            "password_expires": {
                                "description": "If true, the password is allowed to expire.",
                                "required": true,
                                "type": "boolean"
                            },
                            "password_expiry": {
                                "description": "Specifies the time in Unix Epoch seconds that the password will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "password_last_set": {
                                "description": "Specifies the last time the password was set.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "primary_group_sid": {
                                "description": "Specifies the security ID of the primary group for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "prompt_password_change": {
                                "description": "Prompts the user to change their password at the next login.",
                                "required": true,
                                "type": "boolean"
                            },
                            "provider": {
                                "description": "Specifies the authentication provider that the object belongs to.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sam_account_name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "shell": {
                                "description": "Specifies a path to the shell for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Specifies the object type.",
                                "required": true,
                                "type": "string"
                            },
                            "uid": {
                                "description": "Specifies an ID for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "upn": {
                                "description": "Specifies a principal name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "user_can_change_password": {
                                "description": "Specifies whether the password for the user can be changed.",
                                "required": true,
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new user.",
            "properties": {
                "force": {
                    "description": "Skip validation checks when creating user.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Optional provider type.",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the configuration properties for a user.",
            "properties": {
                "email": {
                    "description": "Specifies an email address for the user.",
                    "type": "string"
                },
                "enabled": {
                    "description": "If true, the authenticated user is enabled.",
                    "type": "boolean"
                },
                "expiry": {
                    "description": "Specifies the Unix Epoch time when the auth user will expire.",
                    "type": "integer"
                },
                "gecos": {
                    "description": "Specifies the GECOS value, which is usually the full name.",
                    "type": "string"
                },
                "home_directory": {
                    "description": "Specifies a home directory for the user.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies a user name.",
                    "required": true,
                    "type": "string"
                },
                "password": {
                    "description": "Changes the password for the user.",
                    "type": "string"
                },
                "password_expires": {
                    "description": "If true, the password should expire.",
                    "type": "boolean"
                },
                "primary_group": {
                    "description": "Specifies the primary group by name.",
                    "type": [
                        {
                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                            "properties": {
                                "id": {
                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Specifies the persona name, which must be combined with a type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                    "enum": [
                                        "user",
                                        "group",
                                        "wellknown"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "prompt_password_change": {
                    "description": "If true, prompts the user to change their password at the next login.",
                    "type": "boolean"
                },
                "shell": {
                    "description": "Specifies the shell for the user.",
                    "type": "string"
                },
                "sid": {
                    "description": "Specifies a security identifier.",
                    "type": "string"
                },
                "uid": {
                    "description": "Specifies a numeric user identifier.",
                    "type": "integer"
                },
                "unlock": {
                    "description": "If true, the user account should be unlocked.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/users/<USER>": {
        "DELETE_args": {
            "description": "Delete the user.",
            "properties": {
                "cached": {
                    "description": "If true, flush the user from the cache.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter users by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter users by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the user information.",
            "properties": {
                "cached": {
                    "description": "If true, only return cached objects.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Filter users by provider.",
                    "type": "string"
                },
                "query_member_of": {
                    "description": "Enumerate all users that a group is a member of.",
                    "type": "boolean"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Filter users by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "users": {
                    "items": {
                        "description": "Specifies the configuration properties for a user.",
                        "properties": {
                            "dn": {
                                "description": "Specifies the distinguished name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dns_domain": {
                                "description": "Specifies the DNS domain.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the domain that the object is part of.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "email": {
                                "description": "Specifies an email address.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "enabled": {
                                "description": "True, if the authenticated user is enabled.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expired": {
                                "description": "True, if the authenticated user has expired.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expiry": {
                                "description": "Specifies the Unix Epoch time at which the authenticated user will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "gecos": {
                                "description": "Specifies the GECOS value, which is usually the full name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "generated_gid": {
                                "description": "True, if the GID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "generated_uid": {
                                "description": "True, if the UID was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "generated_upn": {
                                "description": "True, if the UPN was generated.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "gid": {
                                "description": "Specifies a group ID for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "home_directory": {
                                "description": "Specifies a home directory for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Specifies the user or group ID.",
                                "required": true,
                                "type": "string"
                            },
                            "locked": {
                                "description": "If true, indicates that the account is locked.",
                                "required": true,
                                "type": "boolean"
                            },
                            "max_password_age": {
                                "description": "Specifies the maximum time in seconds allowed before the password expires.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "member_of": {
                                "description": "Specifies the groups that this user or group are members of.",
                                "required": true,
                                "type": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "items": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": "string"
                            },
                            "on_disk_group_identity": {
                                "description": "Specifies the group identity on the disk.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "on_disk_user_identity": {
                                "description": "Specifies the user identity on the disk.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "password_expired": {
                                "description": "If true, the password has expired.",
                                "required": true,
                                "type": "boolean"
                            },
                            "password_expires": {
                                "description": "If true, the password is allowed to expire.",
                                "required": true,
                                "type": "boolean"
                            },
                            "password_expiry": {
                                "description": "Specifies the time in Unix Epoch seconds that the password will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "password_last_set": {
                                "description": "Specifies the last time the password was set.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "primary_group_sid": {
                                "description": "Specifies the security ID of the primary group for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "prompt_password_change": {
                                "description": "Prompts the user to change their password at the next login.",
                                "required": true,
                                "type": "boolean"
                            },
                            "provider": {
                                "description": "Specifies the authentication provider that the object belongs to.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sam_account_name": {
                                "description": "Specifies a user or group name.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "shell": {
                                "description": "Specifies a path to the shell for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security identifier.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Specifies the object type.",
                                "required": true,
                                "type": "string"
                            },
                            "uid": {
                                "description": "Specifies an ID for the user.",
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "upn": {
                                "description": "Specifies a principal name for the user.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "user_can_change_password": {
                                "description": "Specifies whether the password for the user can be changed.",
                                "required": true,
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the user.",
            "properties": {
                "force": {
                    "description": "Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes.",
                    "type": "boolean"
                },
                "provider": {
                    "description": "Optional provider type.",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the configuration properties for a user.",
            "properties": {
                "email": {
                    "description": "Specifies an email address for the user.",
                    "type": "string"
                },
                "enabled": {
                    "description": "If true, the authenticated user is enabled.",
                    "type": "boolean"
                },
                "expiry": {
                    "description": "Specifies the Unix Epoch time when the auth user will expire.",
                    "type": "integer"
                },
                "gecos": {
                    "description": "Specifies the GECOS value, which is usually the full name.",
                    "type": "string"
                },
                "home_directory": {
                    "description": "Specifies a home directory for the user.",
                    "type": "string"
                },
                "password": {
                    "description": "Changes the password for the user.",
                    "type": "string"
                },
                "password_expires": {
                    "description": "If true, the password should expire.",
                    "type": "boolean"
                },
                "primary_group": {
                    "description": "Specifies the primary group by name.",
                    "type": [
                        {
                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                            "properties": {
                                "id": {
                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Specifies the persona name, which must be combined with a type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                    "enum": [
                                        "user",
                                        "group",
                                        "wellknown"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "prompt_password_change": {
                    "description": "If true, prompts the user to change their password at the next login.",
                    "type": "boolean"
                },
                "shell": {
                    "description": "Specifies the shell for the user.",
                    "type": "string"
                },
                "sid": {
                    "description": "Specifies a security identifier.",
                    "type": "string"
                },
                "uid": {
                    "description": "Specifies a numeric user identifier.",
                    "type": "integer"
                },
                "unlock": {
                    "description": "If true, the user account should be unlocked.",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/wellknowns": {
        "GET_args": {
            "description": "List all wellknown personas.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "wellknowns": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/auth/wellknowns/<WELLKNOWN>": {
        "GET_args": {
            "description": "Retrieve the wellknown persona.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "wellknowns": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/cluster/email": {
        "GET_args": {
            "description": "Get the cluster email notification settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Cluster email notification settings.",
                    "properties": {
                        "batch_mode": {
                            "description": "This setting determines how notifications will be batched together to be sent by email.  'none' means each notification will be sent separately.  'severity' means notifications of the same severity will be sent together.  'category' means notifications of the same category will be sent together.  'all' means all notifications will be batched together and sent in a single email.",
                            "enum": [
                                "all",
                                "severity",
                                "category",
                                "none"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "mail_relay": {
                            "description": "The address of the SMTP server to be used for relaying the notification messages.  An SMTP server is required in order to send notifications.  If this string is empty, no emails will be sent.",
                            "required": true,
                            "type": "string"
                        },
                        "mail_sender": {
                            "description": "The full email address that will appear as the sender of notification messages.",
                            "required": true,
                            "type": "string"
                        },
                        "mail_subject": {
                            "description": "The subject line for notification messages from this cluster.",
                            "required": true,
                            "type": "string"
                        },
                        "smtp_auth_passwd_set": {
                            "description": "Indicates if an SMTP authentication password is set.",
                            "required": true,
                            "type": "boolean"
                        },
                        "smtp_auth_security": {
                            "description": "The type of secure communication protocol to use if SMTP is being used.  If 'none', plain text will be used, if 'starttls', the encrypted STARTTLS protocol will be used.",
                            "enum": [
                                "none",
                                "starttls"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "smtp_auth_username": {
                            "description": "Username to authenticate with if SMTP authentication is being used.",
                            "required": true,
                            "type": "string"
                        },
                        "smtp_port": {
                            "description": "The port on the SMTP server to be used for relaying the notification messages.  ",
                            "required": true,
                            "type": "integer"
                        },
                        "use_smtp_auth": {
                            "description": "If true, this cluster will send SMTP authentication credentials to the SMTP relay server in order to send its notification emails.  If false, the cluster will attempt to send its notification emails without authentication.",
                            "required": true,
                            "type": "boolean"
                        },
                        "user_template": {
                            "description": "Location of a custom template file that can be used to specify the layout of the notification emails.",
                            "required": true,
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the cluster email notification settings.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Cluster email notification settings.",
            "properties": {
                "batch_mode": {
                    "description": "This setting determines how notifications will be batched together to be sent by email.  'none' means each notification will be sent separately.  'severity' means notifications of the same severity will be sent together.  'category' means notifications of the same category will be sent together.  'all' means all notifications will be batched together and sent in a single email.",
                    "enum": [
                        "all",
                        "severity",
                        "category",
                        "none"
                    ],
                    "type": "string"
                },
                "mail_relay": {
                    "description": "The address of the SMTP server to be used for relaying the notification messages.  An SMTP server is required in order to send notifications.  If this string is empty, no emails will be sent.",
                    "type": "string"
                },
                "mail_sender": {
                    "description": "The full email address that will appear as the sender of notification messages.",
                    "type": "string"
                },
                "mail_subject": {
                    "description": "The subject line for notification messages from this cluster.",
                    "type": "string"
                },
                "smtp_auth_passwd": {
                    "description": "Password to authenticate with if SMTP authentication is being used.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "smtp_auth_security": {
                    "description": "The type of secure communication protocol to use if SMTP is being used.  If 'none', plain text will be used, if 'starttls', the encrypted STARTTLS protocol will be used.",
                    "enum": [
                        "none",
                        "starttls"
                    ],
                    "type": "string"
                },
                "smtp_auth_username": {
                    "description": "Username to authenticate with if SMTP authentication is being used.",
                    "type": "string"
                },
                "smtp_port": {
                    "description": "The port on the SMTP server to be used for relaying the notification messages.  ",
                    "type": "integer"
                },
                "use_smtp_auth": {
                    "description": "If true, this cluster will send SMTP authentication credentials to the SMTP relay server in order to send its notification emails.  If false, the cluster will attempt to send its notification emails without authentication.",
                    "type": "boolean"
                },
                "user_template": {
                    "description": "Location of a custom template file that can be used to specify the layout of the notification emails.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/cluster/owner": {
        "GET_args": {
            "description": "Get the cluster contact info settings",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Cluster contact info settings.",
            "properties": {
                "company": {
                    "description": "Cluster owner company name.",
                    "required": false,
                    "type": "string"
                },
                "location": {
                    "description": "Cluster owner location.",
                    "required": false,
                    "type": "string"
                },
                "primary_email": {
                    "description": "Cluster owner primary email address.",
                    "required": false,
                    "type": "string"
                },
                "primary_name": {
                    "description": "Cluster owner primary contact name.",
                    "required": false,
                    "type": "string"
                },
                "primary_phone1": {
                    "description": "Cluster owner primary contact phone number 1.",
                    "required": false,
                    "type": "string"
                },
                "primary_phone2": {
                    "description": "Cluster owner primary contact phone number 2.",
                    "required": false,
                    "type": "string"
                },
                "secondary_email": {
                    "description": "Cluster owner secondary email address.",
                    "required": false,
                    "type": "string"
                },
                "secondary_name": {
                    "description": "Cluster owner secondary contact name.",
                    "required": false,
                    "type": "string"
                },
                "secondary_phone1": {
                    "description": "Cluster owner secondary contact phone number 1.",
                    "required": false,
                    "type": "string"
                },
                "secondary_phone2": {
                    "description": "Cluster owner secondary contact phone number 2.",
                    "required": false,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the cluster contact info settings.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Cluster contact info settings.",
            "properties": {
                "company": {
                    "description": "Cluster owner company name.",
                    "required": false,
                    "type": "string"
                },
                "location": {
                    "description": "Cluster owner location.",
                    "required": false,
                    "type": "string"
                },
                "primary_email": {
                    "description": "Cluster owner primary email address.",
                    "required": false,
                    "type": "string"
                },
                "primary_name": {
                    "description": "Cluster owner primary contact name.",
                    "required": false,
                    "type": "string"
                },
                "primary_phone1": {
                    "description": "Cluster owner primary contact phone number 1.",
                    "required": false,
                    "type": "string"
                },
                "primary_phone2": {
                    "description": "Cluster owner primary contact phone number 2.",
                    "required": false,
                    "type": "string"
                },
                "secondary_email": {
                    "description": "Cluster owner secondary email address.",
                    "required": false,
                    "type": "string"
                },
                "secondary_name": {
                    "description": "Cluster owner secondary contact name.",
                    "required": false,
                    "type": "string"
                },
                "secondary_phone1": {
                    "description": "Cluster owner secondary contact phone number 1.",
                    "required": false,
                    "type": "string"
                },
                "secondary_phone2": {
                    "description": "Cluster owner secondary contact phone number 2.",
                    "required": false,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/cluster/statfs": {
        "GET_args": {
            "description": "Retrieve the filesystem statistics.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Filesystem statistics",
            "properties": {
                "f_bavail": {
                    "description": "The number of free blocks available to non-superuser.",
                    "required": true,
                    "type": "integer"
                },
                "f_bfree": {
                    "description": "The number of free blocks in the filesystem.",
                    "required": true,
                    "type": "integer"
                },
                "f_blocks": {
                    "description": "The total number of data blocks in the filesystem.",
                    "required": true,
                    "type": "integer"
                },
                "f_bsize": {
                    "description": "The filesystem fragment size.",
                    "required": true,
                    "type": "integer"
                },
                "f_ffree": {
                    "description": "The number of free nodes available to non-superuser.",
                    "required": true,
                    "type": "integer"
                },
                "f_files": {
                    "description": "The total number of file nodes in the filesystem.",
                    "required": true,
                    "type": "integer"
                },
                "f_flags": {
                    "description": "A copy of the mount exported flags.",
                    "required": true,
                    "type": "integer"
                },
                "f_fstypename": {
                    "description": "The filesystem type name.",
                    "required": true,
                    "type": "string"
                },
                "f_iosize": {
                    "description": "The optimal transfer block size.",
                    "required": true,
                    "type": "integer"
                },
                "f_mntfromname": {
                    "description": "The name of the mounted filesystem.",
                    "required": true,
                    "type": "string"
                },
                "f_mntonname": {
                    "description": "The directory that the filesystem is mounted on.",
                    "required": true,
                    "type": "string"
                },
                "f_namemax": {
                    "description": "The maximum length of a file name.",
                    "required": true,
                    "type": "integer"
                },
                "f_owner": {
                    "description": "The ID of the user that mounted the filesystem.",
                    "required": true,
                    "type": "integer"
                },
                "f_type": {
                    "description": "The type of the filesystem.",
                    "required": true,
                    "type": "integer"
                },
                "f_version": {
                    "description": "The structure version number.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/debug/stats": {
        "DELETE_args": {
            "description": "Clear per-resource statistics counters.",
            "type": "object"
        },
        "GET_args": {
            "description": "List cumulative call statistics for each resource.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Statistics for all the methods of all URIs in the Platform API.",
            "properties": {
                "DESCRIBE": {
                    "description": "Per-method statistics.",
                    "properties": {
                        "calls": {
                            "description": "The number of calls.",
                            "type": "integer"
                        },
                        "errors": {
                            "description": "The number of errors.",
                            "type": "integer"
                        },
                        "time": {
                            "description": "The total amount of time spent in this method.",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "UNKNOWN": {
                    "description": "Per-method statistics.",
                    "properties": {
                        "calls": {
                            "description": "The number of calls.",
                            "type": "integer"
                        },
                        "errors": {
                            "description": "The number of errors.",
                            "type": "integer"
                        },
                        "time": {
                            "description": "The total amount of time spent in this method.",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "handlers": {
                    "items": {
                        "properties": {
                            "DELETE": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "GET": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "HEAD": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "POST": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "PUT": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "UNSUPPORTED": {
                                "description": "Per-method statistics.",
                                "properties": {
                                    "calls": {
                                        "description": "The number of calls.",
                                        "type": "integer"
                                    },
                                    "errors": {
                                        "description": "The number of errors.",
                                        "type": "integer"
                                    },
                                    "time": {
                                        "description": "The total amount of time spent in this method.",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "name": {
                                "description": "The URI.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/dedupe/dedupe-summary": {
        "GET_args": {
            "description": "Return summary information about dedupe.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "properties": {
                        "block_size": {
                            "description": "Size in bytes of a filesystem block.",
                            "required": true,
                            "type": "number"
                        },
                        "estimated_physical_blocks": {
                            "description": "Estimated number of physical blocks deduped.",
                            "required": true,
                            "type": "number"
                        },
                        "estimated_saved_blocks": {
                            "description": "Estimated number of physical blocks saved by dedupe.",
                            "required": true,
                            "type": "number"
                        },
                        "logical_blocks": {
                            "description": "Number of logical blocks deduped.",
                            "required": true,
                            "type": "number"
                        },
                        "saved_logical_blocks": {
                            "description": "Number of logical blocks saved by dedupe.",
                            "required": true,
                            "type": "number"
                        },
                        "total_blocks": {
                            "description": "Total physical blocks in the cluster.",
                            "required": true,
                            "type": "number"
                        },
                        "used_blocks": {
                            "description": "Total physical blocks used in the cluster.",
                            "required": true,
                            "type": "number"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/dedupe/reports": {
        "GET_args": {
            "description": "List dedupe reports.",
            "properties": {
                "begin": {
                    "description": "Restrict the query to reports at or after the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "end": {
                    "description": "Restrict the query to reports at or before the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "job_id": {
                    "description": "Restrict the query to the given job ID.",
                    "type": "integer"
                },
                "job_type": {
                    "description": "Restrict the query to the given job type.",
                    "enum": [
                        "Dedupe",
                        "DedupeAssessment"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "enum": [
                        "id",
                        "start_time",
                        "end_time"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for a dedupe job.",
                        "properties": {
                            "dedupe_percent": {
                                "description": "The amount of space the directory trees under this job's paths now take up, compared to what they would take up if not deduplicated (0 ~ 100).",
                                "type": "string"
                            },
                            "elapsed_time": {
                                "description": "The amount of time in seconds it took to run this job.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "An unique identifier for this report.",
                                "type": "integer"
                            },
                            "job_id": {
                                "description": "The job id this report refers to.",
                                "type": "integer"
                            },
                            "job_type": {
                                "description": "The type of dedupe job this report refers to.",
                                "type": "string"
                            },
                            "reports": {
                                "description": "A list of report entries for this dedupe job.",
                                "items": {
                                    "properties": {
                                        "phase": {
                                            "description": "The phase of the job this report was generated for.",
                                            "type": "integer"
                                        },
                                        "results": {
                                            "description": "The report results.",
                                            "type": "string"
                                        },
                                        "time": {
                                            "description": "The time this report was generated in Unix epoch seconds.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/dedupe/reports/<ID>": {
        "GET_args": {
            "description": "Retrieve a report for a single dedupe job.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for a dedupe job.",
                        "properties": {
                            "dedupe_percent": {
                                "description": "The amount of space the directory trees under this job's paths now take up, compared to what they would take up if not deduplicated (0 ~ 100).",
                                "type": "string"
                            },
                            "elapsed_time": {
                                "description": "The amount of time in seconds it took to run this job.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "An unique identifier for this report.",
                                "type": "integer"
                            },
                            "job_id": {
                                "description": "The job id this report refers to.",
                                "type": "integer"
                            },
                            "job_type": {
                                "description": "The type of dedupe job this report refers to.",
                                "type": "string"
                            },
                            "reports": {
                                "description": "A list of report entries for this dedupe job.",
                                "items": {
                                    "properties": {
                                        "phase": {
                                            "description": "The phase of the job this report was generated for.",
                                            "type": "integer"
                                        },
                                        "results": {
                                            "description": "The report results.",
                                            "type": "string"
                                        },
                                        "time": {
                                            "description": "The time this report was generated in Unix epoch seconds.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/dedupe/settings": {
        "GET_args": {
            "description": "Retrieve the dedupe settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Dedupe settings.",
                    "properties": {
                        "assess_paths": {
                            "description": "The paths that will be assessed.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "dedupe_schedule": {
                            "description": "The schedule for the dedupe job.",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "paths": {
                            "description": "The paths that will be deduped.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the dedupe settings. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Dedupe settings.",
            "properties": {
                "assess_paths": {
                    "description": "The paths that will be assessed.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "paths": {
                    "description": "The paths that will be deduped.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/filepool/default-policy": {
        "GET_args": {
            "description": "List default file pool policy.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "description": "A default filepool policy object",
            "properties": {
                "default-policy": {
                    "description": "A default filepool policy object",
                    "properties": {
                        "actions": {
                            "description": "A list of actions to be taken for matching files",
                            "items": {
                                "description": "An action to apply to a file matching the policy",
                                "properties": {
                                    "action_param": {
                                        "description": "Varies according to action_type",
                                        "required": true,
                                        "type": [
                                            "string",
                                            "boolean",
                                            "object",
                                            "null"
                                        ]
                                    },
                                    "action_type": {
                                        "enum": [
                                            "set_requested_protection",
                                            "set_data_access_pattern",
                                            "enable_coalescer",
                                            "apply_data_storage_policy",
                                            "apply_snapshot_storage_policy",
                                            "set_cloudpool_policy"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set default file pool policy.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "actions": {
                    "items": {
                        "description": "An action to apply to a file matching the policy",
                        "properties": {
                            "action_param": {
                                "description": "Varies according to action_type",
                                "required": true,
                                "type": [
                                    "string",
                                    "boolean",
                                    "object",
                                    "null"
                                ]
                            },
                            "action_type": {
                                "enum": [
                                    "set_requested_protection",
                                    "set_data_access_pattern",
                                    "enable_coalescer",
                                    "apply_data_storage_policy",
                                    "apply_snapshot_storage_policy",
                                    "set_cloudpool_policy"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/filepool/policies": {
        "GET_args": {
            "description": "List all policies.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "description": "A filepool policy object",
                        "properties": {
                            "actions": {
                                "description": "A list of actions to be taken for matching files",
                                "items": {
                                    "description": "An action to apply to a file matching the policy",
                                    "properties": {
                                        "action_param": {
                                            "description": "Varies according to action_type",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "boolean",
                                                "object",
                                                "null"
                                            ]
                                        },
                                        "action_type": {
                                            "enum": [
                                                "set_requested_protection",
                                                "set_data_access_pattern",
                                                "enable_coalescer",
                                                "apply_data_storage_policy",
                                                "apply_snapshot_storage_policy",
                                                "set_cloudpool_policy"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": true,
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "apply_order": {
                                "description": "The order in which this policy should be applied (relative to other policies)",
                                "type": "integer"
                            },
                            "birth_cluster_id": {
                                "description": "The guid assigned to the cluster on which the account was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description for this policy",
                                "type": "string"
                            },
                            "file_matching_pattern": {
                                "description": "The file matching rules for this policy",
                                "properties": {
                                    "or_criteria": {
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "items": {
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                                "type": "boolean"
                                                            },
                                                            "begins_with": {
                                                                "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "The comparison operator to use while comparing an attribute with its value",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The file attribute to be compared to a given value",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "link_count",
                                                                    "accessed_time",
                                                                    "birth_time",
                                                                    "changed_time",
                                                                    "metadata_changed_time",
                                                                    "size",
                                                                    "file_type",
                                                                    "custom_attribute"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                                "type": "string"
                                                            },
                                                            "use_relative_time": {
                                                                "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                                "type": "boolean"
                                                            },
                                                            "value": {
                                                                "description": "The value to be compared against a file attribute",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "object"
                                                    },
                                                    "required": true,
                                                    "type": "array"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "A unique identifier for this policy",
                                "type": "integer"
                            },
                            "name": {
                                "description": "A unique name for this policy",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this policy is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this policy",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new policy.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A filepool policy object",
            "properties": {
                "actions": {
                    "description": "A list of actions to be taken for matching files",
                    "items": {
                        "description": "An action to apply to a file matching the policy",
                        "properties": {
                            "action_param": {
                                "description": "Varies according to action_type",
                                "required": true,
                                "type": [
                                    "string",
                                    "boolean",
                                    "object",
                                    "null"
                                ]
                            },
                            "action_type": {
                                "enum": [
                                    "set_requested_protection",
                                    "set_data_access_pattern",
                                    "enable_coalescer",
                                    "apply_data_storage_policy",
                                    "apply_snapshot_storage_policy",
                                    "set_cloudpool_policy"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                },
                "apply_order": {
                    "description": "The order in which this policy should be applied (relative to other policies)",
                    "type": "integer"
                },
                "description": {
                    "description": "A description for this policy",
                    "type": "string"
                },
                "file_matching_pattern": {
                    "description": "The file matching rules for this policy",
                    "properties": {
                        "or_criteria": {
                            "items": {
                                "properties": {
                                    "and_criteria": {
                                        "items": {
                                            "properties": {
                                                "attribute_exists": {
                                                    "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                    "type": "boolean"
                                                },
                                                "begins_with": {
                                                    "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                    "type": "boolean"
                                                },
                                                "case_sensitive": {
                                                    "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                    "type": "boolean"
                                                },
                                                "field": {
                                                    "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "The comparison operator to use while comparing an attribute with its value",
                                                    "enum": [
                                                        "==",
                                                        "!=",
                                                        ">",
                                                        ">=",
                                                        "<",
                                                        "<=",
                                                        "!"
                                                    ],
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "The file attribute to be compared to a given value",
                                                    "enum": [
                                                        "name",
                                                        "path",
                                                        "link_count",
                                                        "accessed_time",
                                                        "birth_time",
                                                        "changed_time",
                                                        "metadata_changed_time",
                                                        "size",
                                                        "file_type",
                                                        "custom_attribute"
                                                    ],
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "units": {
                                                    "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                    "type": "string"
                                                },
                                                "use_relative_time": {
                                                    "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                    "type": "boolean"
                                                },
                                                "value": {
                                                    "description": "The value to be compared against a file attribute",
                                                    "type": [
                                                        "string",
                                                        "integer"
                                                    ]
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "required": true,
                            "type": "array"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "name": {
                    "description": "A unique name for this policy",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The name of the new policy",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/filepool/policies/<POLNAME>": {
        "DELETE_args": {
            "description": "Delete file pool policy.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve file pool policy information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "description": "A filepool policy object",
                        "properties": {
                            "actions": {
                                "description": "A list of actions to be taken for matching files",
                                "items": {
                                    "description": "An action to apply to a file matching the policy",
                                    "properties": {
                                        "action_param": {
                                            "description": "Varies according to action_type",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "boolean",
                                                "object",
                                                "null"
                                            ]
                                        },
                                        "action_type": {
                                            "enum": [
                                                "set_requested_protection",
                                                "set_data_access_pattern",
                                                "enable_coalescer",
                                                "apply_data_storage_policy",
                                                "apply_snapshot_storage_policy",
                                                "set_cloudpool_policy"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": true,
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "apply_order": {
                                "description": "The order in which this policy should be applied (relative to other policies)",
                                "type": "integer"
                            },
                            "birth_cluster_id": {
                                "description": "The guid assigned to the cluster on which the account was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description for this policy",
                                "type": "string"
                            },
                            "file_matching_pattern": {
                                "description": "The file matching rules for this policy",
                                "properties": {
                                    "or_criteria": {
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "items": {
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                                "type": "boolean"
                                                            },
                                                            "begins_with": {
                                                                "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "The comparison operator to use while comparing an attribute with its value",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The file attribute to be compared to a given value",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "link_count",
                                                                    "accessed_time",
                                                                    "birth_time",
                                                                    "changed_time",
                                                                    "metadata_changed_time",
                                                                    "size",
                                                                    "file_type",
                                                                    "custom_attribute"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                                "type": "string"
                                                            },
                                                            "use_relative_time": {
                                                                "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                                "type": "boolean"
                                                            },
                                                            "value": {
                                                                "description": "The value to be compared against a file attribute",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "object"
                                                    },
                                                    "required": true,
                                                    "type": "array"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "A unique identifier for this policy",
                                "type": "integer"
                            },
                            "name": {
                                "description": "A unique name for this policy",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this policy is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this policy",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify file pool policy. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A filepool policy object",
            "properties": {
                "actions": {
                    "description": "A list of actions to be taken for matching files",
                    "items": {
                        "description": "An action to apply to a file matching the policy",
                        "properties": {
                            "action_param": {
                                "description": "Varies according to action_type",
                                "required": true,
                                "type": [
                                    "string",
                                    "boolean",
                                    "object",
                                    "null"
                                ]
                            },
                            "action_type": {
                                "enum": [
                                    "set_requested_protection",
                                    "set_data_access_pattern",
                                    "enable_coalescer",
                                    "apply_data_storage_policy",
                                    "apply_snapshot_storage_policy",
                                    "set_cloudpool_policy"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                },
                "apply_order": {
                    "description": "The order in which this policy should be applied (relative to other policies)",
                    "type": "integer"
                },
                "description": {
                    "description": "A description for this policy",
                    "type": "string"
                },
                "file_matching_pattern": {
                    "description": "The file matching rules for this policy",
                    "properties": {
                        "or_criteria": {
                            "items": {
                                "properties": {
                                    "and_criteria": {
                                        "items": {
                                            "properties": {
                                                "attribute_exists": {
                                                    "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                    "type": "boolean"
                                                },
                                                "begins_with": {
                                                    "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                    "type": "boolean"
                                                },
                                                "case_sensitive": {
                                                    "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                    "type": "boolean"
                                                },
                                                "field": {
                                                    "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "The comparison operator to use while comparing an attribute with its value",
                                                    "enum": [
                                                        "==",
                                                        "!=",
                                                        ">",
                                                        ">=",
                                                        "<",
                                                        "<=",
                                                        "!"
                                                    ],
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "The file attribute to be compared to a given value",
                                                    "enum": [
                                                        "name",
                                                        "path",
                                                        "link_count",
                                                        "accessed_time",
                                                        "birth_time",
                                                        "changed_time",
                                                        "metadata_changed_time",
                                                        "size",
                                                        "file_type",
                                                        "custom_attribute"
                                                    ],
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "units": {
                                                    "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                    "type": "string"
                                                },
                                                "use_relative_time": {
                                                    "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                    "type": "boolean"
                                                },
                                                "value": {
                                                    "description": "The value to be compared against a file attribute",
                                                    "type": [
                                                        "string",
                                                        "integer"
                                                    ]
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "required": true,
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A unique name for this policy",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/filepool/templates": {
        "GET_args": {
            "description": "List all templates.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "templates": {
                    "items": {
                        "description": "A filepool policy object",
                        "properties": {
                            "actions": {
                                "description": "A list of actions to be taken for matching files",
                                "items": {
                                    "description": "An action to apply to a file matching the policy",
                                    "properties": {
                                        "action_param": {
                                            "description": "Varies according to action_type",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "boolean",
                                                "object",
                                                "null"
                                            ]
                                        },
                                        "action_type": {
                                            "enum": [
                                                "set_requested_protection",
                                                "set_data_access_pattern",
                                                "enable_coalescer",
                                                "apply_data_storage_policy",
                                                "apply_snapshot_storage_policy",
                                                "set_cloudpool_policy"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": true,
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "apply_order": {
                                "description": "The order in which this policy should be applied (relative to other policies)",
                                "type": "integer"
                            },
                            "birth_cluster_id": {
                                "description": "The guid assigned to the cluster on which the account was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description for this policy",
                                "type": "string"
                            },
                            "file_matching_pattern": {
                                "description": "The file matching rules for this policy",
                                "properties": {
                                    "or_criteria": {
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "items": {
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                                "type": "boolean"
                                                            },
                                                            "begins_with": {
                                                                "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "The comparison operator to use while comparing an attribute with its value",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The file attribute to be compared to a given value",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "link_count",
                                                                    "accessed_time",
                                                                    "birth_time",
                                                                    "changed_time",
                                                                    "metadata_changed_time",
                                                                    "size",
                                                                    "file_type",
                                                                    "custom_attribute"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                                "type": "string"
                                                            },
                                                            "use_relative_time": {
                                                                "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                                "type": "boolean"
                                                            },
                                                            "value": {
                                                                "description": "The value to be compared against a file attribute",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "object"
                                                    },
                                                    "required": true,
                                                    "type": "array"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "A unique identifier for this policy",
                                "type": "integer"
                            },
                            "name": {
                                "description": "A unique name for this policy",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this policy is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this policy",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/filepool/templates/<NAME>": {
        "GET_args": {
            "description": "List all templates.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "templates": {
                    "items": {
                        "description": "A filepool policy object",
                        "properties": {
                            "actions": {
                                "description": "A list of actions to be taken for matching files",
                                "items": {
                                    "description": "An action to apply to a file matching the policy",
                                    "properties": {
                                        "action_param": {
                                            "description": "Varies according to action_type",
                                            "required": true,
                                            "type": [
                                                "string",
                                                "boolean",
                                                "object",
                                                "null"
                                            ]
                                        },
                                        "action_type": {
                                            "enum": [
                                                "set_requested_protection",
                                                "set_data_access_pattern",
                                                "enable_coalescer",
                                                "apply_data_storage_policy",
                                                "apply_snapshot_storage_policy",
                                                "set_cloudpool_policy"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": true,
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "apply_order": {
                                "description": "The order in which this policy should be applied (relative to other policies)",
                                "type": "integer"
                            },
                            "birth_cluster_id": {
                                "description": "The guid assigned to the cluster on which the account was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description for this policy",
                                "type": "string"
                            },
                            "file_matching_pattern": {
                                "description": "The file matching rules for this policy",
                                "properties": {
                                    "or_criteria": {
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "items": {
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')",
                                                                "type": "boolean"
                                                            },
                                                            "begins_with": {
                                                                "description": "True to match files recursively under the given path. (valid only with 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "The comparison operator to use while comparing an attribute with its value",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The file attribute to be compared to a given value",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "link_count",
                                                                    "accessed_time",
                                                                    "birth_time",
                                                                    "changed_time",
                                                                    "metadata_changed_time",
                                                                    "size",
                                                                    "file_type",
                                                                    "custom_attribute"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')",
                                                                "type": "string"
                                                            },
                                                            "use_relative_time": {
                                                                "description": "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}",
                                                                "type": "boolean"
                                                            },
                                                            "value": {
                                                                "description": "The value to be compared against a file attribute",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "object"
                                                    },
                                                    "required": true,
                                                    "type": "array"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "A unique identifier for this policy",
                                "type": "integer"
                            },
                            "name": {
                                "description": "A unique name for this policy",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this policy is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this policy",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/filesystem/settings/access-time": {
        "GET_args": {
            "description": "Retrieve settings for access time.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "enabled": {
                            "description": "Enable access time tracking.",
                            "required": true,
                            "type": "boolean"
                        },
                        "precision": {
                            "description": "Access time tracked in seconds for each cluster file if enabled.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set settings for access time.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "enabled": {
                    "description": "Enable access time tracking.",
                    "type": "boolean"
                },
                "precision": {
                    "description": "Access time tracked on each cluster file accurate to this number of seconds.",
                    "maximum": 1576800000,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/filesystem/settings/character-encodings": {
        "GET_args": {
            "description": "Retrieve current cluster character encoding settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "current-encoding": {
                            "description": "Current character encoding.",
                            "required": true,
                            "type": "string"
                        },
                        "default-encoding": {
                            "description": "Default character encoding.",
                            "required": true,
                            "type": "string"
                        },
                        "encodings": {
                            "description": "A list of supported encoding values.",
                            "required": true,
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set current character encoding.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "current-encoding": {
                    "description": "Current character encoding.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/fsa/settings": {
        "DELETE_args": {
            "description": "Revert all settings to their defaults.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "default_template": {
                            "description": "Name of question template to use for new FSA jobs.",
                            "type": "string"
                        },
                        "disk_usage_depth": {
                            "description": "Maximum directory depth used for disk_usage question if not specified in the question.",
                            "type": "integer"
                        },
                        "max_age": {
                            "description": "Maximum age of non-pinned results in seconds.",
                            "type": "integer"
                        },
                        "max_count": {
                            "description": "Maximum number of non-pinned result sets to keep.",
                            "type": "integer"
                        },
                        "squash_depth": {
                            "description": "Squash depth to use for squash binning questions if not specified in the question.",
                            "type": "integer"
                        },
                        "top_n_max": {
                            "description": "Maximum number of items in a Top-N question result if not specified in the question.",
                            "type": "integer"
                        },
                        "use_snapshot": {
                            "description": "If true, use a snapshot for consistency, otherwise analyze head.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "default_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Name of question template to use for new FSA jobs.",
                            "type": "string"
                        }
                    ]
                },
                "disk_usage_depth": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Maximum directory depth used for disk_usage question if not specified in the question.",
                            "type": "integer"
                        }
                    ]
                },
                "max_age": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Maximum age of non-pinned results in seconds.",
                            "type": "integer"
                        }
                    ]
                },
                "max_count": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Maximum number of non-pinned result sets to keep.",
                            "type": "integer"
                        }
                    ]
                },
                "squash_depth": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Squash depth to use for squash binning questions if not specified in the question.",
                            "type": "integer"
                        }
                    ]
                },
                "top_n_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Maximum number of items in a Top-N question result if not specified in the question.",
                            "type": "integer"
                        }
                    ]
                },
                "use_snapshot": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, use a snapshot for consistency, otherwise analyze head.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/job/job-summary": {
        "GET_args": {
            "description": "View job engine status.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "properties": {
                        "cluster_is_degraded": {
                            "description": "Whether the cluster is in a degraded state.  Note this is from the perspective of the node handling the query, which might be different from another node.",
                            "required": true,
                            "type": "boolean"
                        },
                        "connected": {
                            "description": "Whether isi_job_d instances on all up nodes in the cluster are connected to the coordinator.",
                            "required": true,
                            "type": "boolean"
                        },
                        "coordinator": {
                            "description": "The devid of the job engine coordinator.",
                            "required": true,
                            "type": "integer"
                        },
                        "disconnected_nodes": {
                            "description": "If connected=false, this is the set of devids that are not connected to the coordinator.",
                            "items": {
                                "required": true,
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "down_or_read_only_nodes": {
                            "description": "Whether the cluster has any down or read-only nodes.  These nodes are not considered in the connected property.",
                            "required": true,
                            "type": "boolean"
                        },
                        "next_jid": {
                            "description": "The job ID to be assigned to the next job.",
                            "required": true,
                            "type": "integer"
                        },
                        "run_degraded": {
                            "description": "Whether the job engine would allow most jobs to run even when the cluster is in a degraded state.",
                            "required": true,
                            "type": "boolean"
                        },
                        "stats_ready": {
                            "description": "Whether the coordinator has recently gathered statistics for all nodes in the cluster.",
                            "required": true,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/job/jobs/<JID>": {
        "GET_args": {
            "description": "View a single job instance.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "properties": {
                            "control_state": {
                                "description": "State to which the job is transitioning; if control_state is identical to state, the job's state is stable.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": false,
                                "type": "string"
                            },
                            "create_time": {
                                "description": "The time the job was queued, in seconds since the epoch.",
                                "required": true,
                                "type": "integer"
                            },
                            "current_phase": {
                                "description": "The current phase of the job.",
                                "type": "integer"
                            },
                            "description": {
                                "description": "A text representation of the job.",
                                "type": "string"
                            },
                            "end_time": {
                                "description": "The time the job ended, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "The ID of the job.",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "impact": {
                                "description": "The current impact of the job.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High",
                                    "Paused"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "participants": {
                                "description": "The set of devids working on the job.",
                                "items": {
                                    "required": true,
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "paths": {
                                "description": "Paths for which the job was queued.",
                                "items": {
                                    "required": true,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "policy": {
                                "description": "Current impact policy of the job.",
                                "required": true,
                                "type": "string"
                            },
                            "priority": {
                                "description": "Current priority of the job; lower numbers preempt higher numbers.",
                                "maximum": 10,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "progress": {
                                "description": "A text representation of the job's progress.",
                                "type": "string"
                            },
                            "retries_remaining": {
                                "description": "The number of retries remaining if the job fails.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_time": {
                                "description": "The number of seconds the job has executed.",
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "state": {
                                "description": "Current state of the job.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "total_phases": {
                                "description": "The total number of phases of the job type.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "The job type.",
                                "required": true,
                                "type": "string"
                            },
                            "waiting_on": {
                                "description": "The ID of a job for which this job is waiting.",
                                "type": "integer"
                            },
                            "waiting_reason": {
                                "description": "The reason the job is waiting.",
                                "enum": [
                                    "blocked_by_priority"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "policy": {
                    "description": "Impact policy of this job instance.",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority of this job instance; lower numbers preempt higher numbers.",
                    "maximum": 10,
                    "minimum": 1,
                    "type": "integer"
                },
                "state": {
                    "description": "Desired new state of this job instance.",
                    "enum": [
                        "run",
                        "pause",
                        "cancel"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/job/policies": {
        "GET_args": {
            "description": "List job impact policies.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "A helpful human-readable description of the impact policy.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The ID of the impact policy.",
                                "required": true,
                                "type": "string"
                            },
                            "intervals": {
                                "items": {
                                    "properties": {
                                        "begin": {
                                            "description": "Beginning time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "end": {
                                            "description": "Ending time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "impact": {
                                            "description": "Impact for the corresponding time span.",
                                            "enum": [
                                                "Low",
                                                "Medium",
                                                "High",
                                                "Paused"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the impact policy.",
                                "minLength": 1,
                                "required": true,
                                "type": "string"
                            },
                            "system": {
                                "description": "Whether or not this is a read-only system impact policy.",
                                "required": false,
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new job impact policy.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "description": {
                    "description": "A helpful human-readable description of the impact policy.",
                    "required": false,
                    "type": "string"
                },
                "intervals": {
                    "items": {
                        "properties": {
                            "begin": {
                                "description": "Beginning time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                "required": true,
                                "type": "string"
                            },
                            "end": {
                                "description": "Ending time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                "required": true,
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact for the corresponding time span.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High",
                                    "Paused"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                },
                "name": {
                    "description": "The name of the impact policy.",
                    "minLength": 1,
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/job/policies/<NAME>": {
        "DELETE_args": {
            "description": "Delete a job impact policy.  System policies may not be deleted.",
            "type": "object"
        },
        "GET_args": {
            "description": "View a single job impact policy.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "types": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "A helpful human-readable description of the impact policy.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The ID of the impact policy.",
                                "required": true,
                                "type": "string"
                            },
                            "intervals": {
                                "items": {
                                    "properties": {
                                        "begin": {
                                            "description": "Beginning time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "end": {
                                            "description": "Ending time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "impact": {
                                            "description": "Impact for the corresponding time span.",
                                            "enum": [
                                                "Low",
                                                "Medium",
                                                "High",
                                                "Paused"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the impact policy.",
                                "minLength": 1,
                                "required": true,
                                "type": "string"
                            },
                            "system": {
                                "description": "Whether or not this is a read-only system impact policy.",
                                "required": false,
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a job impact policy.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "description": {
                    "description": "A helpful human-readable description of the impact policy.",
                    "required": false,
                    "type": "string"
                },
                "intervals": {
                    "items": {
                        "properties": {
                            "begin": {
                                "description": "Beginning time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                "required": true,
                                "type": "string"
                            },
                            "end": {
                                "description": "Ending time for the corresponding impact, in the format 'WWWW HH:MM', where 'WWWW' is the full English name of the day of the week, 'HH' is the hour (00-23), and 'MM' is the minute (00-59).",
                                "required": true,
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact for the corresponding time span.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High",
                                    "Paused"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/job/statistics": {
        "GET_args": {
            "description": "View job engine statistics.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "properties": {
                            "job_id": {
                                "description": "The job ID.",
                                "required": true,
                                "type": "integer"
                            },
                            "nodes": {
                                "items": {
                                    "properties": {
                                        "cpu": {
                                            "properties": {
                                                "average": {
                                                    "description": "The average CPU utilization of the job on this node.",
                                                    "type": "number"
                                                },
                                                "current": {
                                                    "description": "The current CPU utilization of the job on this node.",
                                                    "required": true,
                                                    "type": "number"
                                                },
                                                "maximum": {
                                                    "description": "The maximum CPU utilization of the job on this node.",
                                                    "required": true,
                                                    "type": "number"
                                                },
                                                "minimum": {
                                                    "description": "The minimum CPU utilization of the job on this node.",
                                                    "required": true,
                                                    "type": "number"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "io": {
                                            "properties": {
                                                "read": {
                                                    "properties": {
                                                        "bytes": {
                                                            "description": "The number of bytes recently read by this job on this node.",
                                                            "required": true,
                                                            "type": "integer"
                                                        },
                                                        "ops": {
                                                            "description": "The number of read operations recently performed by this job on this node.",
                                                            "required": true,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": true,
                                                    "type": "object"
                                                },
                                                "write": {
                                                    "properties": {
                                                        "bytes": {
                                                            "description": "The number of bytes recently written by this job on this node.",
                                                            "required": true,
                                                            "type": "integer"
                                                        },
                                                        "ops": {
                                                            "description": "The number of write operations recently performed by this job on this node.",
                                                            "required": true,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": true,
                                                    "type": "object"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "memory": {
                                            "properties": {
                                                "physical": {
                                                    "properties": {
                                                        "average": {
                                                            "description": "The average physical memory utilization of the job on this node, in KB.",
                                                            "type": "number"
                                                        },
                                                        "current": {
                                                            "description": "The current physical memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "maximum": {
                                                            "description": "The maximum physical memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "minimum": {
                                                            "description": "The minimum physical memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": true,
                                                    "type": "object"
                                                },
                                                "virtual": {
                                                    "properties": {
                                                        "average": {
                                                            "description": "The average virtual memory utilization of the job on this node, in KB.",
                                                            "type": "number"
                                                        },
                                                        "current": {
                                                            "description": "The current virtual memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "maximum": {
                                                            "description": "The maximum virtual memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "minimum": {
                                                            "description": "The minimum virtual memory utilization of the job on this node, in KB.",
                                                            "required": true,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": true,
                                                    "type": "object"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        },
                                        "node": {
                                            "description": "The devid of the node.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "pid": {
                                            "description": "The process ID of the job on this node.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "total_workers": {
                                            "description": "The number of workers for this job on this node.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "workers": {
                                            "items": {
                                                "properties": {
                                                    "stw": {
                                                        "description": "The sleep-to-work ratio of this worker; how much time it spends sleeping compared to working.",
                                                        "type": "number"
                                                    },
                                                    "task": {
                                                        "description": "A representation of the task the worker is currently processing; not intended to be read by humans.",
                                                        "type": "string"
                                                    },
                                                    "task_result": {
                                                        "description": "A representation of the most recent task result produced by the worker; not intended to be read by humans.",
                                                        "type": "string"
                                                    },
                                                    "worker": {
                                                        "description": "The worker ID.",
                                                        "required": true,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "required": true,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "phase": {
                                "description": "The current phase of the job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_nodes": {
                                "description": "The number of nodes participating in the job.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/job/types": {
        "GET_args": {
            "description": "List job types.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "show_all": {
                    "description": "Whether to show all job types, including hidden ones.  Defaults to false.",
                    "type": "boolean"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                },
                "types": {
                    "items": {
                        "properties": {
                            "allow_multiple_instances": {
                                "description": "Whether multiple instances of this job type may run simultaneously.",
                                "required": true,
                                "type": "boolean"
                            },
                            "description": {
                                "description": "Brief description of the job type.",
                                "required": true,
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the job type is enabled and able to run.",
                                "required": true,
                                "type": "boolean"
                            },
                            "exclusion_set": {
                                "description": "The set(s) of mutually-exclusive job types to which this job belongs.  No job in this set may run with any other job in this set.  Obsolete; this value will always be an empty string, as exclusion sets are no longer a job type property.",
                                "required": true,
                                "type": "string"
                            },
                            "hidden": {
                                "description": "Whether this job type is normally visible in the UI.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Job type ID.",
                                "required": true,
                                "type": "string"
                            },
                            "policy": {
                                "description": "Default impact policy of this job type.",
                                "required": true,
                                "type": "string"
                            },
                            "priority": {
                                "description": "Default priority of this job type; lower numbers preempt higher numbers.",
                                "maximum": 10,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "The schedule on which this job type is queued, if any.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/job/types/<NAME>": {
        "GET_args": {
            "description": "Retrieve job type information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "types": {
                    "items": {
                        "properties": {
                            "allow_multiple_instances": {
                                "description": "Whether multiple instances of this job type may run simultaneously.",
                                "required": true,
                                "type": "boolean"
                            },
                            "description": {
                                "description": "Brief description of the job type.",
                                "required": true,
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the job type is enabled and able to run.",
                                "required": true,
                                "type": "boolean"
                            },
                            "exclusion_set": {
                                "description": "The set(s) of mutually-exclusive job types to which this job belongs.  No job in this set may run with any other job in this set.  Obsolete; this value will always be an empty string, as exclusion sets are no longer a job type property.",
                                "required": true,
                                "type": "string"
                            },
                            "hidden": {
                                "description": "Whether this job type is normally visible in the UI.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Job type ID.",
                                "required": true,
                                "type": "string"
                            },
                            "policy": {
                                "description": "Default impact policy of this job type.",
                                "required": true,
                                "type": "string"
                            },
                            "priority": {
                                "description": "Default priority of this job type; lower numbers preempt higher numbers.",
                                "maximum": 10,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "The schedule on which this job type is queued, if any.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the job type.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "enabled": {
                    "description": "Whether the job type is enabled and able to run.",
                    "type": "boolean"
                },
                "policy": {
                    "description": "Default impact policy of this job type.",
                    "type": "string"
                },
                "priority": {
                    "description": "Default priority of this job type; lower numbers preempt higher numbers.",
                    "maximum": 10,
                    "minimum": 1,
                    "type": "integer"
                },
                "schedule": {
                    "description": "The schedule on which this job type is queued, if any.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/license/licenses": {
        "GET_args": {
            "description": "Retrieve license information for all licensable products.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "licenses": {
                    "items": {
                        "description": "Information about an application license.",
                        "properties": {
                            "duration": {
                                "description": "Total duration in seconds for temporary licenses.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "expiration": {
                                "description": "Unix epoch time the license will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Unique identifier for the license.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the licensed feature.",
                                "required": true,
                                "type": "string"
                            },
                            "status": {
                                "description": "Current status of the license.",
                                "enum": [
                                    "Activated",
                                    "Evaluation",
                                    "Expired",
                                    "Inactive",
                                    "Unknown"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Install a new license key.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "key": {
                    "description": "New license key.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/license/licenses/<NAME>": {
        "GET_args": {
            "description": "Retrieve license information for the feature.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "licenses": {
                    "items": {
                        "description": "Information about an application license.",
                        "properties": {
                            "duration": {
                                "description": "Total duration in seconds for temporary licenses.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "expiration": {
                                "description": "Unix epoch time the license will expire.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Unique identifier for the license.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the licensed feature.",
                                "required": true,
                                "type": "string"
                            },
                            "status": {
                                "description": "Current status of the license.",
                                "enum": [
                                    "Activated",
                                    "Evaluation",
                                    "Expired",
                                    "Inactive",
                                    "Unknown"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/hdfs/proxyusers": {
        "GET_args": {
            "description": "List all proxyusers.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS proxyusers.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "proxyusers": {
                    "items": {
                        "description": "This is hdfs impersonation information of a proxyuser",
                        "properties": {
                            "id": {
                                "description": "The ID of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "members": {
                                "description": "Users or groups impersonated by proxyuser.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the proxyuser.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS proxyuser.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "This is hdfs impersonation information of a proxyuser",
            "properties": {
                "id": {
                    "description": "The ID of the role.",
                    "type": "string"
                },
                "members": {
                    "description": "Users or groups impersonated by proxyuser.",
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the proxyuser.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/hdfs/proxyusers/<NAME>": {
        "DELETE_args": {
            "description": "Delete an HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS proxyuser.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "View the proxyuser.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS proxyuser.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "proxyusers": {
                    "items": {
                        "description": "This is hdfs impersonation information of a proxyuser",
                        "properties": {
                            "id": {
                                "description": "The ID of the role.",
                                "required": true,
                                "type": "string"
                            },
                            "members": {
                                "description": "Users or groups impersonated by proxyuser.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the proxyuser.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify an HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS proxyuser.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/1/protocols/hdfs/proxyusers/<NAME>/members": {
        "GET_args": {
            "description": "List all the members of the HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Specifies which access zone or zones to use.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "members": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add a member to the HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Specifies which access zone or zones to use.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
            "properties": {
                "id": {
                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the persona name, which must be combined with a type.",
                    "type": "string"
                },
                "type": {
                    "description": "Specifies the type of persona, which must be combined with a name.",
                    "enum": [
                        "user",
                        "group",
                        "wellknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/hdfs/proxyusers/<NAME>/members/<MEMBER>": {
        "DELETE_args": {
            "description": "Remove a member from the HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Specifies which access zone or zones to use.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Create a new HDFS proxyuser.",
            "properties": {
                "zone": {
                    "description": "Specifies which access zone or zones to use.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/1/protocols/hdfs/racks": {
        "GET_args": {
            "description": "List all racks.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS racks.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "racks": {
                    "items": {
                        "description": "This is schema that contains HDFS rack properties.",
                        "properties": {
                            "client_ip_ranges": {
                                "description": "Array of IP ranges. Clients from one of these IP ranges are served by corresponding nodes from ip_pools array.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "The ID of the rack.",
                                "type": "string"
                            },
                            "ip_pools": {
                                "description": "Array of IP pool names to use for serving clients from client_ip_ranges.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Name of the rack",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new HDFS rack.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS rack.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "This is schema that contains HDFS rack properties.",
            "properties": {
                "client_ip_ranges": {
                    "description": "Array of IP ranges. Clients from one of these IP ranges are served by corresponding nodes from ip_pools array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip_pools": {
                    "description": "Array of IP pool names to use for serving clients from client_ip_ranges.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the rack",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/hdfs/racks/<ID>": {
        "DELETE_args": {
            "description": "Delete the HDFS rack.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS rack.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the HDFS rack.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS rack.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "racks": {
                    "items": {
                        "description": "This is schema that contains HDFS rack properties.",
                        "properties": {
                            "client_ip_ranges": {
                                "description": "Array of IP ranges. Clients from one of these IP ranges are served by corresponding nodes from ip_pools array.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "The ID of the rack.",
                                "type": "string"
                            },
                            "ip_pools": {
                                "description": "Array of IP pool names to use for serving clients from client_ip_ranges.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Name of the rack",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the HDFS rack",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS rack.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "This is schema that contains HDFS rack properties.",
            "properties": {
                "client_ip_ranges": {
                    "description": "Array of IP ranges. Clients from one of these IP ranges are served by corresponding nodes from ip_pools array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip_pools": {
                    "description": "Array of IP pool names to use for serving clients from client_ip_ranges.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the rack",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/smb/openfiles": {
        "GET_args": {
            "description": "List open files.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "Order results by this field. Default is id.",
                    "enum": [
                        "id",
                        "file",
                        "user",
                        "locks"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "openfiles": {
                    "items": {
                        "properties": {
                            "file": {
                                "description": "Path of file within /ifs.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The file ID.",
                                "required": true,
                                "type": "integer"
                            },
                            "locks": {
                                "description": "Number of locks user holds on file.",
                                "required": true,
                                "type": "integer"
                            },
                            "permissions": {
                                "description": "The user's permissions on file.",
                                "items": {
                                    "enum": [
                                        "read",
                                        "write",
                                        "create"
                                    ],
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "user": {
                                "description": "User holding file open.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/smb/openfiles/<ID>": {
        "DELETE_args": {
            "description": "Close the file in the SMB server.",
            "type": "object"
        }
    },
    "/1/protocols/smb/sessions": {
        "GET_args": {
            "description": "List open sessions.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "Order results by this field.",
                    "enum": [
                        "computer",
                        "user",
                        "client_type",
                        "openfiles",
                        "active_time",
                        "idle_time",
                        "guest_login",
                        "encryption"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sessions": {
                    "items": {
                        "properties": {
                            "active_time": {
                                "description": "Number of seconds since session start.",
                                "required": true,
                                "type": "integer"
                            },
                            "client_type": {
                                "description": "Client type.",
                                "required": true,
                                "type": "string"
                            },
                            "computer": {
                                "description": "Client internet address.",
                                "required": true,
                                "type": "string"
                            },
                            "encryption": {
                                "description": "True if session is encrypted.",
                                "required": true,
                                "type": "boolean"
                            },
                            "guest_login": {
                                "description": "True for guest logins.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The session ID.",
                                "required": true,
                                "type": "integer"
                            },
                            "idle_time": {
                                "description": "Number of seconds since last client operation.",
                                "required": true,
                                "type": "integer"
                            },
                            "openfiles": {
                                "description": "Number of files open by client.",
                                "required": true,
                                "type": "integer"
                            },
                            "user": {
                                "description": "Local user name.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/protocols/smb/sessions/<COMPUTER>": {
        "DELETE_args": {
            "description": "Close the SMB session.",
            "type": "object"
        }
    },
    "/1/protocols/smb/sessions/<COMPUTER>/<USER>": {
        "DELETE_args": {
            "description": "Close the SMB session.",
            "type": "object"
        }
    },
    "/1/protocols/smb/shares-summary": {
        "GET_args": {
            "description": "Return summary information about shares.",
            "properties": {
                "zone": {
                    "description": "Specifies which access zone or zones to use.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "properties": {
                        "count": {
                            "description": "Total number of shares.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/license": {
        "GET_args": {
            "description": "Retrieve license information.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Information about an application license.",
            "properties": {
                "duration": {
                    "description": "Total duration in seconds for temporary licenses.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "expiration": {
                    "description": "Unix epoch time the license will expire.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "id": {
                    "description": "Unique identifier for the license.",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "Name of the licensed feature.",
                    "required": true,
                    "type": "string"
                },
                "status": {
                    "description": "Current status of the license.",
                    "enum": [
                        "Activated",
                        "Evaluation",
                        "Expired",
                        "Inactive",
                        "Unknown"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/quotas": {
        "DELETE_args": {
            "description": "Delete all or matching quotas.",
            "properties": {
                "enforced": {
                    "description": "Only delete quotas with this enforcement (non-accounting).",
                    "type": "boolean"
                },
                "include_snapshots": {
                    "description": "Only delete quotas with this setting for include_snapshots.",
                    "type": "boolean"
                },
                "path": {
                    "description": "Only delete quotas matching this path (see also recurse_path_*).",
                    "type": "string"
                },
                "persona": {
                    "description": "Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.",
                    "type": "string"
                },
                "recurse_path_children": {
                    "description": "If used with the path argument, delete all quotas at that path or any descendent sub-directory.",
                    "type": "boolean"
                },
                "recurse_path_parents": {
                    "description": "If used with the path argument, delete all quotas at that path or any parent directory.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Only delete quotas matching this type.",
                    "enum": [
                        "directory",
                        "user",
                        "group",
                        "default-user",
                        "default-group"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Optional named zone to use for user and group resolution.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.",
            "properties": {
                "enforced": {
                    "description": "Only list quotas with this enforcement (non-accounting).",
                    "type": "boolean"
                },
                "exceeded": {
                    "description": "Set to true to only list quotas which have exceeded one or more of their thresholds.",
                    "type": "boolean"
                },
                "include_snapshots": {
                    "description": "Only list quotas with this setting for include_snapshots.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "path": {
                    "description": "Only list quotas matching this path (see also recurse_path_*).",
                    "type": "string"
                },
                "persona": {
                    "description": "Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.",
                    "type": "string"
                },
                "recurse_path_children": {
                    "description": "If used with the path argument, match all quotas at that path or any descendent sub-directory.",
                    "type": "boolean"
                },
                "recurse_path_parents": {
                    "description": "If used with the path argument, match all quotas at that path or any parent directory.",
                    "type": "boolean"
                },
                "report_id": {
                    "description": "Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports.",
                    "type": "string"
                },
                "resolve_names": {
                    "description": "If true, resolve group and user names in personas.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "type": {
                    "description": "Only list quotas matching this type.",
                    "enum": [
                        "directory",
                        "user",
                        "group",
                        "default-user",
                        "default-group"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Optional named zone to use for user and group resolution.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "quotas": {
                    "items": {
                        "properties": {
                            "container": {
                                "description": "If true, SMB shares using the quota directory see the quota thresholds as share size.",
                                "required": true,
                                "type": "boolean"
                            },
                            "enforced": {
                                "description": "True if the quota provides enforcement, otherwise a accounting quota.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the quota.",
                                "required": true,
                                "type": "string"
                            },
                            "include_snapshots": {
                                "description": "If true, quota governs snapshot data as well as head data.",
                                "required": true,
                                "type": "boolean"
                            },
                            "linked": {
                                "description": "For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "notifications": {
                                "description": "Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.",
                                "enum": [
                                    "custom",
                                    "default",
                                    "disabled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "path": {
                                "description": "The /ifs path governed.",
                                "required": true,
                                "type": "string"
                            },
                            "persona": {
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ready": {
                                "description": "True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.",
                                "required": true,
                                "type": "boolean"
                            },
                            "thresholds": {
                                "properties": {
                                    "advisory": {
                                        "description": "Usage bytes at which notifications will be sent but writes will not be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "advisory_exceeded": {
                                        "description": "True if the advisory threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "advisory_last_exceeded": {
                                        "description": "Time at which advisory threshold was hit.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "hard": {
                                        "description": "Usage bytes at which further writes will be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "hard_exceeded": {
                                        "description": "True if the hard threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "hard_last_exceeded": {
                                        "description": "Time at which hard threshold was hit.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft": {
                                        "description": "Usage bytes at which notifications will be sent and soft grace time will be started.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft_exceeded": {
                                        "description": "True if the soft threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "soft_grace": {
                                        "description": "Time in seconds after which the soft threshold has been hit before writes will be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft_last_exceeded": {
                                        "description": "Time at which soft threshold was hit",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "thresholds_include_overhead": {
                                "description": "If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).",
                                "required": true,
                                "type": "boolean"
                            },
                            "type": {
                                "description": "The type of quota.",
                                "enum": [
                                    "directory",
                                    "user",
                                    "group",
                                    "default-user",
                                    "default-group"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "usage": {
                                "properties": {
                                    "inodes": {
                                        "description": "Number of inodes (filesystem entities) used by governed data.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "logical": {
                                        "description": "Apparent bytes used by governed data.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "physical": {
                                        "description": "Bytes used for governed data and filesystem overhead.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new quota.",
            "properties": {
                "zone": {
                    "description": "Optional named zone to use for user and group resolution.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "container": {
                    "description": "If true, SMB shares using the quota directory see the quota thresholds as share size.",
                    "type": "boolean"
                },
                "enforced": {
                    "description": "True if the quota provides enforcement, otherwise a accounting quota.",
                    "required": true,
                    "type": "boolean"
                },
                "force": {
                    "description": "Force creation of quotas on the root of /ifs.",
                    "required": false,
                    "type": "boolean"
                },
                "include_snapshots": {
                    "description": "If true, quota governs snapshot data as well as head data.",
                    "required": true,
                    "type": "boolean"
                },
                "path": {
                    "description": "The /ifs path governed.",
                    "required": true,
                    "type": "string"
                },
                "persona": {
                    "type": [
                        {
                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                            "properties": {
                                "id": {
                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Specifies the persona name, which must be combined with a type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                    "enum": [
                                        "user",
                                        "group",
                                        "wellknown"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "thresholds": {
                    "properties": {
                        "advisory": {
                            "description": "Usage bytes at which notifications will be sent but writes will not be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "hard": {
                            "description": "Usage bytes at which further writes will be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "soft": {
                            "description": "Usage bytes at which notifications will be sent and soft grace time will be started.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "soft_grace": {
                            "description": "Time in seconds after which the soft threshold has been hit before writes will be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                },
                "thresholds_include_overhead": {
                    "description": "If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).",
                    "required": true,
                    "type": "boolean"
                },
                "type": {
                    "description": "The type of quota.",
                    "enum": [
                        "directory",
                        "user",
                        "group",
                        "default-user",
                        "default-group"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/quotas-summary": {
        "GET_args": {
            "description": "Return summary information about quotas.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "properties": {
                        "count": {
                            "description": "Total number of quotas.",
                            "required": true,
                            "type": "integer"
                        },
                        "default_group_quotas_count": {
                            "description": "Total number of default-group quotas.",
                            "required": true,
                            "type": "integer"
                        },
                        "default_user_quotas_count": {
                            "description": "Total number of default-user quotas.",
                            "required": true,
                            "type": "integer"
                        },
                        "directory_quotas_count": {
                            "description": "Total number of directory quotas.",
                            "required": true,
                            "type": "integer"
                        },
                        "group_quotas_count": {
                            "description": "Total number of -group quotas.",
                            "required": true,
                            "type": "integer"
                        },
                        "linked_quotas_count": {
                            "description": "Total number of user and group totals that are linked.",
                            "required": true,
                            "type": "integer"
                        },
                        "user_quotas_count": {
                            "description": "Total number of user quotas.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/quotas/<QID>": {
        "DELETE_args": {
            "description": "Delete the quota.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve quota information.",
            "properties": {
                "resolve_names": {
                    "description": "If true, resolve group and user names in personas.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional named zone to use for user and group resolution.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "quotas": {
                    "items": {
                        "properties": {
                            "container": {
                                "description": "If true, SMB shares using the quota directory see the quota thresholds as share size.",
                                "required": true,
                                "type": "boolean"
                            },
                            "enforced": {
                                "description": "True if the quota provides enforcement, otherwise a accounting quota.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the quota.",
                                "required": true,
                                "type": "string"
                            },
                            "include_snapshots": {
                                "description": "If true, quota governs snapshot data as well as head data.",
                                "required": true,
                                "type": "boolean"
                            },
                            "linked": {
                                "description": "For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.",
                                "required": true,
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "notifications": {
                                "description": "Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.",
                                "enum": [
                                    "custom",
                                    "default",
                                    "disabled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "path": {
                                "description": "The /ifs path governed.",
                                "required": true,
                                "type": "string"
                            },
                            "persona": {
                                "required": true,
                                "type": [
                                    {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ready": {
                                "description": "True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.",
                                "required": true,
                                "type": "boolean"
                            },
                            "thresholds": {
                                "properties": {
                                    "advisory": {
                                        "description": "Usage bytes at which notifications will be sent but writes will not be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "advisory_exceeded": {
                                        "description": "True if the advisory threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "advisory_last_exceeded": {
                                        "description": "Time at which advisory threshold was hit.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "hard": {
                                        "description": "Usage bytes at which further writes will be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "hard_exceeded": {
                                        "description": "True if the hard threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "hard_last_exceeded": {
                                        "description": "Time at which hard threshold was hit.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft": {
                                        "description": "Usage bytes at which notifications will be sent and soft grace time will be started.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft_exceeded": {
                                        "description": "True if the soft threshold has been hit.",
                                        "required": true,
                                        "type": [
                                            "boolean",
                                            "null"
                                        ]
                                    },
                                    "soft_grace": {
                                        "description": "Time in seconds after which the soft threshold has been hit before writes will be denied.",
                                        "minimum": 1,
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "soft_last_exceeded": {
                                        "description": "Time at which soft threshold was hit",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "thresholds_include_overhead": {
                                "description": "If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).",
                                "required": true,
                                "type": "boolean"
                            },
                            "type": {
                                "description": "The type of quota.",
                                "enum": [
                                    "directory",
                                    "user",
                                    "group",
                                    "default-user",
                                    "default-group"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "usage": {
                                "properties": {
                                    "inodes": {
                                        "description": "Number of inodes (filesystem entities) used by governed data.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "logical": {
                                        "description": "Apparent bytes used by governed data.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "physical": {
                                        "description": "Bytes used for governed data and filesystem overhead.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify quota. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "container": {
                    "description": "If true, SMB shares using the quota directory see the quota thresholds as share size.",
                    "type": "boolean"
                },
                "enforced": {
                    "description": "True if the quota provides enforcement, otherwise a accounting quota.",
                    "type": "boolean"
                },
                "linked": {
                    "description": "If false and the quota is linked, attempt to unlink.",
                    "type": "boolean"
                },
                "thresholds": {
                    "properties": {
                        "advisory": {
                            "description": "Usage bytes at which notifications will be sent but writes will not be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "hard": {
                            "description": "Usage bytes at which further writes will be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "soft": {
                            "description": "Usage bytes at which notifications will be sent and soft grace time will be started.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "soft_grace": {
                            "description": "Time in seconds after which the soft threshold has been hit before writes will be denied.",
                            "minimum": 1,
                            "type": [
                                "integer",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                },
                "thresholds_include_overhead": {
                    "description": "If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/quotas/<QID>/notifications": {
        "DELETE_args": {
            "description": "Delete all quota specific rules. The quota will then use the global rules.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all rules.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "notifications": {
                    "items": {
                        "properties": {
                            "action_alert": {
                                "description": "Send alert when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "action_email_address": {
                                "description": "Email a specific email address when rule matches.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "action_email_owner": {
                                "description": "Email quota domain owner when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "condition": {
                                "description": "The condition detected.",
                                "enum": [
                                    "exceeded",
                                    "denied",
                                    "violated",
                                    "expired"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "email_template": {
                                "description": "Path of optional /ifs template file used for email actions.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "holdoff": {
                                "description": "Time to wait between detections for rules triggered by user actions.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the rule.",
                                "required": true,
                                "type": "string"
                            },
                            "schedule": {
                                "description": "Schedule for rules that repeatedly notify.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "threshold": {
                                "description": "The quota threshold detected.",
                                "enum": [
                                    "hard",
                                    "soft",
                                    "advisory"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new notification rule specific to this quota.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "action_alert": {
                    "description": "Send alert when rule matches.",
                    "type": "boolean"
                },
                "action_email_address": {
                    "description": "Email a specific email address when rule matches.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "action_email_owner": {
                    "description": "Email quota domain owner when rule matches.",
                    "type": "boolean"
                },
                "condition": {
                    "description": "The condition detected.",
                    "enum": [
                        "exceeded",
                        "denied",
                        "violated",
                        "expired"
                    ],
                    "required": true,
                    "type": "string"
                },
                "email_template": {
                    "description": "Path of optional /ifs template file used for email actions.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "holdoff": {
                    "description": "Time to wait between detections for rules triggered by user actions.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "Schedule for rules that repeatedly notify.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "threshold": {
                    "description": "The quota threshold detected.",
                    "enum": [
                        "hard",
                        "soft",
                        "advisory"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "This method creates an empty set of rules so that the global rules are not used. The input must be an empty JSON object.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/1/quota/quotas/<QID>/notifications/<NID>": {
        "DELETE_args": {
            "description": "Delete the notification rule.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve notification rule information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "notifications": {
                    "items": {
                        "properties": {
                            "action_alert": {
                                "description": "Send alert when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "action_email_address": {
                                "description": "Email a specific email address when rule matches.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "action_email_owner": {
                                "description": "Email quota domain owner when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "condition": {
                                "description": "The condition detected.",
                                "enum": [
                                    "exceeded",
                                    "denied",
                                    "violated",
                                    "expired"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "email_template": {
                                "description": "Path of optional /ifs template file used for email actions.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "holdoff": {
                                "description": "Time to wait between detections for rules triggered by user actions.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the rule.",
                                "required": true,
                                "type": "string"
                            },
                            "schedule": {
                                "description": "Schedule for rules that repeatedly notify.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "threshold": {
                                "description": "The quota threshold detected.",
                                "enum": [
                                    "hard",
                                    "soft",
                                    "advisory"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify notification rule. All input fields are optional, but one or must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "action_alert": {
                    "description": "Send alert when rule matches.",
                    "type": "boolean"
                },
                "action_email_address": {
                    "description": "Email a specific email address when rule matches.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "action_email_owner": {
                    "description": "Email quota domain owner when rule matches.",
                    "type": "boolean"
                },
                "email_template": {
                    "description": "Path of optional /ifs template file used for email actions.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "holdoff": {
                    "description": "Time to wait between detections for rules triggered by user actions.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "Schedule for rules that repeatedly notify.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/quota/reports": {
        "GET_args": {
            "description": "List all or matching reports.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "generated": {
                    "description": "Only list reports matching this source.",
                    "enum": [
                        "manual",
                        "scheduled",
                        "all"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "Order results by this field.",
                    "enum": [
                        "time",
                        "generated",
                        "type"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Only list reports matching this type.",
                    "enum": [
                        "summary",
                        "detail",
                        "all"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "generated": {
                                "description": "Whether report was manually requested (live) or scheduled.",
                                "enum": [
                                    "manual",
                                    "scheduled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system ID given to the report.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix epoch time the report was taken.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Whether this is a summary or detail report.",
                                "enum": [
                                    "summary",
                                    "detail"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new report. The type of this report is 'manual'; it is also sometimes called 'live' or 'ad-hoc'.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/reports/<RID>": {
        "DELETE_args": {
            "description": "Delete the report.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve report data (XML) or contents (meta-data).",
            "properties": {
                "contents": {
                    "description": "Display JSON meta-data contents instead of report data.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "generated": {
                                "description": "Whether report was manually requested (live) or scheduled.",
                                "enum": [
                                    "manual",
                                    "scheduled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system ID given to the report.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix epoch time the report was taken.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Whether this is a summary or detail report.",
                                "enum": [
                                    "summary",
                                    "detail"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/reports/<RID>/about": {
        "GET_args": {
            "description": "Retrieve report meta-data information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "generated": {
                                "description": "Whether report was manually requested (live) or scheduled.",
                                "enum": [
                                    "manual",
                                    "scheduled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system ID given to the report.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix epoch time the report was taken.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Whether this is a summary or detail report.",
                                "enum": [
                                    "summary",
                                    "detail"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/settings/mappings": {
        "DELETE_args": {
            "description": "Delete all rules.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all rules.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "mappings": {
                    "items": {
                        "properties": {
                            "domain": {
                                "description": "The FQDN of the source domain to map.",
                                "required": true,
                                "type": "string"
                            },
                            "mapping": {
                                "description": "The FQDN of destination domain to map to.",
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "The authentication provider type.",
                                "enum": [
                                    "ad",
                                    "local",
                                    "nis",
                                    "ldap"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "domain": {
                    "description": "The FQDN of the source domain to map.",
                    "required": true,
                    "type": "string"
                },
                "mapping": {
                    "description": "The FQDN of destination domain to map to.",
                    "required": true,
                    "type": "string"
                },
                "type": {
                    "description": "The authentication provider type.",
                    "enum": [
                        "ad",
                        "local",
                        "nis",
                        "ldap"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/settings/mappings/<ID>": {
        "DELETE_args": {
            "description": "Delete the mapping.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the mapping information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "mappings": {
                    "items": {
                        "properties": {
                            "domain": {
                                "description": "The FQDN of the source domain to map.",
                                "required": true,
                                "type": "string"
                            },
                            "mapping": {
                                "description": "The FQDN of destination domain to map to.",
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "The authentication provider type.",
                                "enum": [
                                    "ad",
                                    "local",
                                    "nis",
                                    "ldap"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the mapping.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "mapping": {
                    "description": "The FQDN of destination domain to map to.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/settings/notifications": {
        "DELETE_args": {
            "description": "Delete all rules.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all rules.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "notifications": {
                    "items": {
                        "properties": {
                            "action_alert": {
                                "description": "Send alert when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "action_email_address": {
                                "description": "Email a specific email address when rule matches.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "action_email_owner": {
                                "description": "Email quota domain owner when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "condition": {
                                "description": "The condition detected.",
                                "enum": [
                                    "exceeded",
                                    "denied",
                                    "violated",
                                    "expired"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "email_template": {
                                "description": "Path of optional /ifs template file used for email actions.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "holdoff": {
                                "description": "Time to wait between detections for rules triggered by user actions.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the rule.",
                                "required": true,
                                "type": "string"
                            },
                            "schedule": {
                                "description": "Schedule for rules that repeatedly notify.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "threshold": {
                                "description": "The quota threshold detected.",
                                "enum": [
                                    "hard",
                                    "soft",
                                    "advisory"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new global notification rule.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "action_alert": {
                    "description": "Send alert when rule matches.",
                    "type": "boolean"
                },
                "action_email_address": {
                    "description": "Email a specific email address when rule matches.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "action_email_owner": {
                    "description": "Email quota domain owner when rule matches.",
                    "type": "boolean"
                },
                "condition": {
                    "description": "The condition detected.",
                    "enum": [
                        "exceeded",
                        "denied",
                        "violated",
                        "expired"
                    ],
                    "required": true,
                    "type": "string"
                },
                "email_template": {
                    "description": "Path of optional /ifs template file used for email actions.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "holdoff": {
                    "description": "Time to wait between detections for rules triggered by user actions.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "Schedule for rules that repeatedly notify.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "threshold": {
                    "description": "The quota threshold detected.",
                    "enum": [
                        "hard",
                        "soft",
                        "advisory"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/quota/settings/notifications/<NID>": {
        "DELETE_args": {
            "description": "Delete the notification rule.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve notification rule information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "notifications": {
                    "items": {
                        "properties": {
                            "action_alert": {
                                "description": "Send alert when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "action_email_address": {
                                "description": "Email a specific email address when rule matches.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "action_email_owner": {
                                "description": "Email quota domain owner when rule matches.",
                                "required": true,
                                "type": "boolean"
                            },
                            "condition": {
                                "description": "The condition detected.",
                                "enum": [
                                    "exceeded",
                                    "denied",
                                    "violated",
                                    "expired"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "email_template": {
                                "description": "Path of optional /ifs template file used for email actions.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "holdoff": {
                                "description": "Time to wait between detections for rules triggered by user actions.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the rule.",
                                "required": true,
                                "type": "string"
                            },
                            "schedule": {
                                "description": "Schedule for rules that repeatedly notify.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "threshold": {
                                "description": "The quota threshold detected.",
                                "enum": [
                                    "hard",
                                    "soft",
                                    "advisory"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify notification rule. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "action_alert": {
                    "description": "Send alert when rule matches.",
                    "type": "boolean"
                },
                "action_email_address": {
                    "description": "Email a specific email address when rule matches.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "action_email_owner": {
                    "description": "Email quota domain owner when rule matches.",
                    "type": "boolean"
                },
                "email_template": {
                    "description": "Path of optional /ifs template file used for email actions.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "holdoff": {
                    "description": "Time to wait between detections for rules triggered by user actions.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "Schedule for rules that repeatedly notify.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/quota/settings/reports": {
        "GET_args": {
            "description": "List all settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "live_dir": {
                            "description": "The directory on /ifs where manual or live reports will be placed.",
                            "required": true,
                            "type": "string"
                        },
                        "live_retain": {
                            "description": "The number of manual reports to keep.",
                            "minimum": 1,
                            "required": true,
                            "type": "integer"
                        },
                        "schedule": {
                            "description": "The isidate schedule used to generate reports.",
                            "required": true,
                            "type": "string"
                        },
                        "scheduled_dir": {
                            "description": "The directory on /ifs where schedule reports will be placed.",
                            "required": true,
                            "type": "string"
                        },
                        "scheduled_retain": {
                            "description": "The number of scheduled reports to keep.",
                            "minimum": 1,
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "live_dir": {
                    "description": "The directory on /ifs where manual or live reports will be placed.",
                    "type": "string"
                },
                "live_retain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The number of manual reports to keep.",
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                },
                "schedule": {
                    "description": "The isidate schedule used to generate reports.",
                    "type": "string"
                },
                "scheduled_dir": {
                    "description": "The directory on /ifs where schedule reports will be placed.",
                    "type": "string"
                },
                "scheduled_retain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The number of scheduled reports to keep.",
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/remotesupport/connectemc": {
        "GET_args": {
            "description": "List all settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "connectemc": {
                    "properties": {
                        "email_customer_on_failure": {
                            "description": "Email the customer if all transmission methods fail.",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Enable ConnectEMC.",
                            "type": "boolean"
                        },
                        "gateway_access_pools": {
                            "description": "List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "primary_esrs_gateway": {
                            "description": "Primary ESRS Gateway. Necessary to enable ConnectEMC.",
                            "type": "string"
                        },
                        "secondary_esrs_gateway": {
                            "description": "Secondary ESRS Gateway. Used if Primary is unavailable.",
                            "type": "string"
                        },
                        "use_smtp_failover": {
                            "description": "Use SMPT if primary and secondary gateways are unavailable.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "email_customer_on_failure": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Email the customer if all transmission methods fail.",
                            "type": "boolean"
                        }
                    ]
                },
                "enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enable ConnectEMC.",
                            "type": "boolean"
                        }
                    ]
                },
                "gateway_access_pools": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "primary_esrs_gateway": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Primary ESRS Gateway. Necessary to enable ConnectEMC.",
                            "type": "string"
                        }
                    ]
                },
                "secondary_esrs_gateway": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Secondary ESRS Gateway. Used if Primary is unavailable.",
                            "type": "string"
                        }
                    ]
                },
                "use_smtp_failover": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Use SMPT if primary and secondary gateways are unavailable.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/aliases": {
        "DELETE_args": {
            "description": "Delete all or matching snapshot aliases.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all or matching snapshot aliases.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "aliases": {
                    "items": {
                        "properties": {
                            "created": {
                                "description": "The Unix Epoch time the snapshot alias was created.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "The system ID given to the snapshot alias.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The user or system supplied snapshot alias name.",
                                "required": true,
                                "type": "string"
                            },
                            "target_id": {
                                "description": "The ID of the snapshot pointed to.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_name": {
                                "description": "The name of the snapshot pointed to.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume token value to use in subsequent calls for continuation.",
                    "required": false,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new snapshot alias.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "name": {
                    "description": "The user or system supplied snapshot name.",
                    "required": true,
                    "type": "string"
                },
                "target": {
                    "description": "Snapshot name target for the alias.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The ID of the newly created snapshot alias.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/aliases/<SID>": {
        "DELETE_args": {
            "description": "Delete the snapshot alias",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve snapshot alias information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "aliases": {
                    "items": {
                        "properties": {
                            "created": {
                                "description": "The Unix Epoch time the snapshot alias was created.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "The system ID given to the snapshot alias.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The user or system supplied snapshot alias name.",
                                "required": true,
                                "type": "string"
                            },
                            "target_id": {
                                "description": "The ID of the snapshot pointed to.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_name": {
                                "description": "The name of the snapshot pointed to.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify snapshot alias. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "name": {
                    "description": "The user or system supplied snapshot alias name.",
                    "type": "string"
                },
                "target": {
                    "description": "Target snapshot for this snapshot alias.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/changelists": {
        "GET_args": {
            "description": "List all changelists.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "changelists": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The system ID given to the changelist.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job which created the changelist.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_entries": {
                                "description": "Number of LIN entries in changelist.",
                                "required": false,
                                "type": "integer"
                            },
                            "root_path": {
                                "description": "Root path of all LINs in changelist.",
                                "required": true,
                                "type": "string"
                            },
                            "snap1": {
                                "description": "The lower snapid used to compute the changelist.",
                                "required": true,
                                "type": "integer"
                            },
                            "snap2": {
                                "description": "The higher snapid used to compute the changelist.",
                                "required": true,
                                "type": "integer"
                            },
                            "status": {
                                "description": "Status of changelist.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new changelist.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "id": {
                    "description": "The system ID given to the changelist.",
                    "required": true,
                    "type": "string"
                },
                "job_id": {
                    "description": "The ID of the job which created the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "num_entries": {
                    "description": "Number of LIN entries in changelist.",
                    "required": false,
                    "type": "integer"
                },
                "root_path": {
                    "description": "Root path of all LINs in changelist.",
                    "required": true,
                    "type": "string"
                },
                "snap1": {
                    "description": "The lower snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "status": {
                    "description": "Status of changelist.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "job_id": {
                    "description": "The ID of the job which created the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "num_entries": {
                    "description": "Number of LIN entries in changelist.",
                    "required": false,
                    "type": "integer"
                },
                "root_path": {
                    "description": "Root path of all LINs in changelist.",
                    "required": true,
                    "type": "string"
                },
                "snap1": {
                    "description": "The lower snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "status": {
                    "description": "Status of changelist.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/changelists/<CHANGELIST>": {
        "DELETE_args": {
            "description": "Delete the specified changelist.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve basic information on a changelist.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "id": {
                    "description": "The system ID given to the changelist.",
                    "required": true,
                    "type": "string"
                },
                "job_id": {
                    "description": "The ID of the job which created the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "num_entries": {
                    "description": "Number of LIN entries in changelist.",
                    "required": false,
                    "type": "integer"
                },
                "root_path": {
                    "description": "Root path of all LINs in changelist.",
                    "required": true,
                    "type": "string"
                },
                "snap1": {
                    "description": "The lower snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the changelist.",
                    "required": true,
                    "type": "integer"
                },
                "status": {
                    "description": "Status of changelist.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/changelists/<CHANGELIST>/lins": {
        "GET_args": {
            "description": "Get entries from a changelist.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "lins": {
                    "items": {
                        "properties": {
                            "atime": {
                                "properties": {
                                    "nsec": {
                                        "description": "Nanoseconds component of timespec.",
                                        "required": false,
                                        "type": "integer"
                                    },
                                    "sec": {
                                        "description": "Seconds component of timespec.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "ctime": {
                                "properties": {
                                    "nsec": {
                                        "description": "Nanoseconds component of timespec.",
                                        "required": false,
                                        "type": "integer"
                                    },
                                    "sec": {
                                        "description": "Seconds component of timespec.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "The LIN number of the file associated with the entry.",
                                "required": true,
                                "type": "string"
                            },
                            "mtime": {
                                "properties": {
                                    "nsec": {
                                        "description": "Nanoseconds component of timespec.",
                                        "required": false,
                                        "type": "integer"
                                    },
                                    "sec": {
                                        "description": "Seconds component of timespec.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "path": {
                                "description": "The path to the file associated with the entry.",
                                "required": true,
                                "type": "string"
                            },
                            "size": {
                                "description": "The size of the file associated with the entry.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Type of file.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/changelists/<CHANGELIST>/lins/<LIN>": {
        "GET_args": {
            "description": "Get a single entry from the changelist.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "atime": {
                    "properties": {
                        "nsec": {
                            "description": "Nanoseconds component of timespec.",
                            "required": false,
                            "type": "integer"
                        },
                        "sec": {
                            "description": "Seconds component of timespec.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "ctime": {
                    "properties": {
                        "nsec": {
                            "description": "Nanoseconds component of timespec.",
                            "required": false,
                            "type": "integer"
                        },
                        "sec": {
                            "description": "Seconds component of timespec.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The LIN number of the file associated with the entry.",
                    "required": true,
                    "type": "string"
                },
                "mtime": {
                    "properties": {
                        "nsec": {
                            "description": "Nanoseconds component of timespec.",
                            "required": false,
                            "type": "integer"
                        },
                        "sec": {
                            "description": "Seconds component of timespec.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "path": {
                    "description": "The path to the file associated with the entry.",
                    "required": true,
                    "type": "string"
                },
                "size": {
                    "description": "The size of the file associated with the entry.",
                    "required": true,
                    "type": "integer"
                },
                "type": {
                    "description": "Type of file.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/license": {
        "GET_args": {
            "description": "Retrieve license information.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Information about an application license.",
            "properties": {
                "duration": {
                    "description": "Total duration in seconds for temporary licenses.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "expiration": {
                    "description": "Unix epoch time the license will expire.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "id": {
                    "description": "Unique identifier for the license.",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "Name of the licensed feature.",
                    "required": true,
                    "type": "string"
                },
                "status": {
                    "description": "Current status of the license.",
                    "enum": [
                        "Activated",
                        "Evaluation",
                        "Expired",
                        "Inactive",
                        "Unknown"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/pending": {
        "GET_args": {
            "description": "Return list of snapshots to be taken.",
            "properties": {
                "begin": {
                    "description": "Unix Epoch time to start generating matches. Default is now.",
                    "type": "integer"
                },
                "end": {
                    "description": "Unix Epoch time to end generating matches. Default is forever.",
                    "type": "integer"
                },
                "limit": {
                    "description": "Return no more than this many result at once (see resume).",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "schedule": {
                    "description": "Limit output only to the named schedule.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pending": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The system supplied unique ID used for sorting and paging.",
                                "required": true,
                                "type": "string"
                            },
                            "path": {
                                "description": "The /ifs path that will snapshotted.",
                                "required": true,
                                "type": "string"
                            },
                            "schedule": {
                                "description": "The name of the schedule used to create this snapshot.",
                                "required": true,
                                "type": "string"
                            },
                            "snapshot": {
                                "description": "The system snapshot name formed from the schedule formate.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "The Unix Epoch time the snapshot will be created.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume token value to use in subsequent calls for continuation.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/repstates": {
        "GET_args": {
            "description": "List all repstates.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "repstates": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The system ID given to the repstate.",
                                "required": true,
                                "type": "string"
                            },
                            "snap1": {
                                "description": "The lower snapid used to compute the repstate.",
                                "required": true,
                                "type": "integer"
                            },
                            "snap2": {
                                "description": "The higher snapid used to compute the repstate.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new repstates.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "id": {
                    "description": "The system ID given to the repstate.",
                    "required": true,
                    "type": "string"
                },
                "snap1": {
                    "description": "The lower snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "snap1": {
                    "description": "The lower snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/repstates/<REPSTATE>": {
        "DELETE_args": {
            "description": "Delete the specified repstate.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve basic information on a repstate.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "id": {
                    "description": "The system ID given to the repstate.",
                    "required": true,
                    "type": "string"
                },
                "snap1": {
                    "description": "The lower snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                },
                "snap2": {
                    "description": "The higher snapid used to compute the repstate.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/schedules/<SID>": {
        "DELETE_args": {
            "description": "Delete the schedule. This does not affect already created snapshots.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the schedule.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "schedules": {
                    "items": {
                        "properties": {
                            "alias": {
                                "description": "Alias name to create for each snapshot.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "duration": {
                                "description": "Time in seconds added to creation time to construction expiration time.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the schedule.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "The schedule name.",
                                "type": "string"
                            },
                            "next_run": {
                                "description": "Unix Epoch time of next snapshot to be created.",
                                "type": "integer"
                            },
                            "next_snapshot": {
                                "description": "Formatted name (see pattern) of next snapshot to be created.",
                                "type": "string"
                            },
                            "path": {
                                "description": "The /ifs path snapshotted.",
                                "type": "string"
                            },
                            "pattern": {
                                "description": "Pattern expanded with strftime to create snapshot name.",
                                "type": "string"
                            },
                            "schedule": {
                                "description": "The isidate compatible natural language description of the schedule.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the schedule. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "alias": {
                    "description": "Alias name to create for each snapshot.",
                    "required": false,
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "duration": {
                    "description": "Time in seconds added to creation time to construction expiration time.",
                    "minimum": 0,
                    "required": false,
                    "type": [
                        "null",
                        "integer"
                    ]
                },
                "name": {
                    "description": "The schedule name.",
                    "required": false,
                    "type": "string"
                },
                "path": {
                    "description": "The /ifs path snapshotted.",
                    "required": false,
                    "type": "string"
                },
                "pattern": {
                    "description": "Pattern expanded with strftime to create snapshot names.",
                    "required": false,
                    "type": "string"
                },
                "schedule": {
                    "description": "The isidate compatible natural language description of the schedule.",
                    "required": false,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/settings": {
        "GET_args": {
            "description": "List all settings",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "autocreate": {
                            "description": "True if the scheduled snapshot creation services is on.",
                            "required": true,
                            "type": "boolean"
                        },
                        "autodelete": {
                            "description": "True if the scheduled snapshot deletion services is on.",
                            "required": true,
                            "type": "boolean"
                        },
                        "global_visible_accessible": {
                            "description": "Global switch for other accessible and visible settings.",
                            "required": true,
                            "type": "boolean"
                        },
                        "local_root_accessible": {
                            "description": "True if root .snapshot directory is accessible locally.",
                            "required": true,
                            "type": "boolean"
                        },
                        "local_root_visible": {
                            "description": "True if root .snapshot directory is visible locally.",
                            "required": true,
                            "type": "boolean"
                        },
                        "local_subdir_accessible": {
                            "description": "True if sub-directory .snapshot directory is accessible locally.",
                            "required": true,
                            "type": "boolean"
                        },
                        "nfs_root_accessible": {
                            "description": "True if root .snapshot directory is accessible over NFS.",
                            "required": true,
                            "type": "boolean"
                        },
                        "nfs_root_visible": {
                            "description": "True if root .snapshot directory is visible over NFS.",
                            "required": true,
                            "type": "boolean"
                        },
                        "nfs_subdir_accessible": {
                            "description": "True if sub-directory .snapshot directory is accessible over NFS.",
                            "required": true,
                            "type": "boolean"
                        },
                        "reserve": {
                            "description": "Percentage of space to reserve for snapshots.",
                            "required": true,
                            "type": "number"
                        },
                        "service": {
                            "description": "True if the system allows snapshot creation.",
                            "required": true,
                            "type": "boolean"
                        },
                        "smb_root_accessible": {
                            "description": "True if root .snapshot directory is accessible over SMB.",
                            "required": true,
                            "type": "boolean"
                        },
                        "smb_root_visible": {
                            "description": "True if root .snapshot directory is visible over SMB.",
                            "required": true,
                            "type": "boolean"
                        },
                        "smb_subdir_accessible": {
                            "description": "True if sub-directory .snapshot directory is accessible over SMB.",
                            "required": true,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "autocreate": {
                    "description": "True if the scheduled snapshot creation services is on.",
                    "required": false,
                    "type": "boolean"
                },
                "autodelete": {
                    "description": "True if the scheduled snapshot deletion services is on.",
                    "required": false,
                    "type": "boolean"
                },
                "global_visible_accessible": {
                    "description": "Global switch for other accessible and visible settings.",
                    "required": false,
                    "type": "boolean"
                },
                "local_root_accessible": {
                    "description": "True if root .snapshot directory is accessible locally.",
                    "required": false,
                    "type": "boolean"
                },
                "local_root_visible": {
                    "description": "True if root .snapshot directory is visible locally.",
                    "required": false,
                    "type": "boolean"
                },
                "local_subdir_accessible": {
                    "description": "True if sub-directory .snapshot directory is accessible locally.",
                    "required": false,
                    "type": "boolean"
                },
                "nfs_root_accessible": {
                    "description": "True if root .snapshot directory is accessible over NFS.",
                    "required": false,
                    "type": "boolean"
                },
                "nfs_root_visible": {
                    "description": "True if root .snapshot directory is visible over NFS.",
                    "required": false,
                    "type": "boolean"
                },
                "nfs_subdir_accessible": {
                    "description": "True if sub-directory .snapshot directory is accessible over NFS.",
                    "required": false,
                    "type": "boolean"
                },
                "reserve": {
                    "description": "Percentage of space to reserve for snapshots.",
                    "required": false,
                    "type": "number"
                },
                "service": {
                    "description": "True if the system allows snapshot creation.",
                    "required": false,
                    "type": "boolean"
                },
                "smb_root_accessible": {
                    "description": "True if root .snapshot directory is accessible over SMB.",
                    "required": false,
                    "type": "boolean"
                },
                "smb_root_visible": {
                    "description": "True if root .snapshot directory is visible over SMB.",
                    "required": false,
                    "type": "boolean"
                },
                "smb_subdir_accessible": {
                    "description": "True if sub-directory .snapshot directory is accessible over SMB.",
                    "required": false,
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/snapshots": {
        "DELETE_args": {
            "description": "Delete all or matching snapshots.",
            "properties": {
                "schedule": {
                    "description": "Only list snapshots created by this schedule.",
                    "type": "string"
                },
                "type": {
                    "description": "Only list snapshots matching this type.",
                    "enum": [
                        "all",
                        "alias",
                        "real"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all or matching snapshots.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "schedule": {
                    "description": "Only list snapshots created by this schedule.",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id.",
                    "type": "string"
                },
                "state": {
                    "description": "Only list snapshots matching this state.",
                    "enum": [
                        "all",
                        "active",
                        "deleting"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Only list snapshots matching this type.",
                    "enum": [
                        "all",
                        "alias",
                        "real"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "snapshots": {
                    "items": {
                        "properties": {
                            "alias": {
                                "description": "Alias name to create for this snapshot. If null, remove any alias.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "created": {
                                "description": "The Unix Epoch time the snapshot was created.",
                                "required": true,
                                "type": "integer"
                            },
                            "expires": {
                                "description": "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "has_locks": {
                                "description": "True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The user or system supplied snapshot name. This will be null for snapshots pending delete.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "path": {
                                "description": "The /ifs path snapshotted.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "pct_filesystem": {
                                "description": "Percentage of /ifs used for storing this snapshot.",
                                "required": true,
                                "type": "number"
                            },
                            "pct_reserve": {
                                "description": "Percentage of configured snapshot reserved used for storing this snapshot.",
                                "required": true,
                                "type": "number"
                            },
                            "schedule": {
                                "description": "The name of the schedule used to create this snapshot, if applicable.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "shadow_bytes": {
                                "description": "The amount of shadow bytes referred to by this snapshot.",
                                "required": true,
                                "type": "integer"
                            },
                            "size": {
                                "description": "The amount of storage in bytes used to store this snapshot.",
                                "required": true,
                                "type": "integer"
                            },
                            "state": {
                                "description": "Snapshot state.",
                                "enum": [
                                    "active",
                                    "deleting"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_id": {
                                "description": "The ID of the snapshot pointed to if this is an alias.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "target_name": {
                                "description": "The name of the snapshot pointed to if this is an alias.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new snapshot.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "alias": {
                    "description": "Alias name to create for this snapshot. If null, remove any alias.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "expires": {
                    "description": "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "name": {
                    "description": "The user or system supplied snapshot name. This will be null for snapshots pending delete.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "path": {
                    "description": "The /ifs path snapshotted.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "alias": {
                    "description": "Alias name to create for this snapshot. If null, remove any alias.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "created": {
                    "description": "The Unix Epoch time the snapshot was created.",
                    "required": true,
                    "type": "integer"
                },
                "expires": {
                    "description": "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "has_locks": {
                    "description": "True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.",
                    "required": true,
                    "type": "boolean"
                },
                "id": {
                    "description": "The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.",
                    "required": true,
                    "type": "integer"
                },
                "name": {
                    "description": "The user or system supplied snapshot name. This will be null for snapshots pending delete.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "path": {
                    "description": "The /ifs path snapshotted.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "pct_filesystem": {
                    "description": "Percentage of /ifs used for storing this snapshot.",
                    "required": true,
                    "type": "number"
                },
                "pct_reserve": {
                    "description": "Percentage of configured snapshot reserved used for storing this snapshot.",
                    "required": true,
                    "type": "number"
                },
                "schedule": {
                    "description": "The name of the schedule used to create this snapshot, if applicable.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "shadow_bytes": {
                    "description": "The amount of shadow bytes referred to by this snapshot.",
                    "required": true,
                    "type": "integer"
                },
                "size": {
                    "description": "The amount of storage in bytes used to store this snapshot.",
                    "required": true,
                    "type": "integer"
                },
                "state": {
                    "description": "Snapshot state.",
                    "enum": [
                        "active",
                        "deleting"
                    ],
                    "required": true,
                    "type": "string"
                },
                "target_id": {
                    "description": "The ID of the snapshot pointed to if this is an alias.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "target_name": {
                    "description": "The name of the snapshot pointed to if this is an alias.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/snapshots-summary": {
        "GET_args": {
            "description": "Return summary information about snapshots.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "properties": {
                        "active_count": {
                            "description": "Total number of active snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "active_size": {
                            "description": "Sum of sizes of active snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "aliases_count": {
                            "description": "Total number of snapshot aliases.",
                            "required": true,
                            "type": "integer"
                        },
                        "count": {
                            "description": "Total number of snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "deleting_count": {
                            "description": "Total number of delete-pending snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "deleting_size": {
                            "description": "Sum of sizes of delete-pending snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "shadow_bytes": {
                            "description": "Sum of shadow bytes of all snapshots.",
                            "required": true,
                            "type": "integer"
                        },
                        "size": {
                            "description": "Sum of sizes in bytes of all snapshots.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/snapshots/<SID>": {
        "DELETE_args": {
            "description": "Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve snapshot information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "snapshots": {
                    "items": {
                        "properties": {
                            "alias": {
                                "description": "Alias name to create for this snapshot. If null, remove any alias.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "created": {
                                "description": "The Unix Epoch time the snapshot was created.",
                                "required": true,
                                "type": "integer"
                            },
                            "expires": {
                                "description": "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "has_locks": {
                                "description": "True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The user or system supplied snapshot name. This will be null for snapshots pending delete.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "path": {
                                "description": "The /ifs path snapshotted.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "pct_filesystem": {
                                "description": "Percentage of /ifs used for storing this snapshot.",
                                "required": true,
                                "type": "number"
                            },
                            "pct_reserve": {
                                "description": "Percentage of configured snapshot reserved used for storing this snapshot.",
                                "required": true,
                                "type": "number"
                            },
                            "schedule": {
                                "description": "The name of the schedule used to create this snapshot, if applicable.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "shadow_bytes": {
                                "description": "The amount of shadow bytes referred to by this snapshot.",
                                "required": true,
                                "type": "integer"
                            },
                            "size": {
                                "description": "The amount of storage in bytes used to store this snapshot.",
                                "required": true,
                                "type": "integer"
                            },
                            "state": {
                                "description": "Snapshot state.",
                                "enum": [
                                    "active",
                                    "deleting"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_id": {
                                "description": "The ID of the snapshot pointed to if this is an alias.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "target_name": {
                                "description": "The name of the snapshot pointed to if this is an alias.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify snapshot. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "alias": {
                    "description": "Alias name to create for this snapshot. If null, remove any alias.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "expires": {
                    "description": "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.",
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "name": {
                    "description": "The user or system supplied snapshot name. This will be null for snapshots pending delete.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/snapshots/<SID>/locks": {
        "DELETE_args": {
            "description": "Delete all locks. Will try to drain count of recursively held locks so that the snapshot can be deleted.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all locks.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.  Choices are id, expires, and comment.  Default is id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "locks": {
                    "items": {
                        "properties": {
                            "comment": {
                                "description": "User supplied lock comment.",
                                "type": "string"
                            },
                            "count": {
                                "description": "Recursive lock count.",
                                "type": "integer"
                            },
                            "expires": {
                                "description": "The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "System generated lock ID.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume token value to use in subsequent calls for continuation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new lock on this snapshot.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "comment": {
                    "description": "Free form comment.",
                    "required": false,
                    "type": "string"
                },
                "expires": {
                    "description": "The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "required": false,
                    "type": [
                        "null",
                        "integer"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The ID of the newly created snapshot lock.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/snapshot/snapshots/<SID>/locks/<LID>": {
        "DELETE_args": {
            "description": "Delete the snapshot lock.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve lock information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "locks": {
                    "items": {
                        "properties": {
                            "comment": {
                                "description": "User supplied lock comment.",
                                "type": "string"
                            },
                            "count": {
                                "description": "Recursive lock count.",
                                "type": "integer"
                            },
                            "expires": {
                                "description": "The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "System generated lock ID.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify lock. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "expires": {
                    "description": "The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "required": false,
                    "type": [
                        "null",
                        "integer"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/statistics/current": {
        "GET_args": {
            "description": "Retrieve stats.",
            "properties": {
                "degraded": {
                    "description": "If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data.",
                    "type": "boolean"
                },
                "devid": {
                    "description": "Node devid to query. Either an <integer> or \"all\". Can be used more than one time to query multiple nodes. \"all\" queries all up nodes. 0 means query the local node. For \"cluster\" scoped keys, in any devid including 0 can be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expand_clientid": {
                    "description": "If true, use name resolution to expand client addresses and other IDs.",
                    "type": "boolean"
                },
                "key": {
                    "description": "One key name. Can be used more than one time to query multiple keys. Also works with 'keys' arguments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "keys": {
                    "description": "Multiple key names. May request matching keys or request 'all' keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with 'substr'. Also works with 'key' arguments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "substr": {
                    "description": "Used in conjunction with the 'keys' argument, alters the behavior of keys. Makes the 'keys' arg perform a partial match. Defaults to false.",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Time in seconds to wait for results from remote nodes.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "stats": {
                    "items": {
                        "properties": {
                            "devid": {
                                "description": "Devid of node of statistic or 0 for cluster scoped statistics.",
                                "required": true,
                                "type": "integer"
                            },
                            "error": {
                                "description": "Key specific error string, if applicable.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "error_code": {
                                "description": "Key specific error number, if applicable.",
                                "required": true,
                                "type": [
                                    "null",
                                    "integer"
                                ]
                            },
                            "key": {
                                "description": "Key name of statistic.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds that statistic was collected.",
                                "required": true,
                                "type": "integer"
                            },
                            "value": {
                                "description": "Key dependent value.",
                                "required": true,
                                "type": "any"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/statistics/history": {
        "GET_args": {
            "description": "Retrieve stats.",
            "properties": {
                "begin": {
                    "description": "Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now.",
                    "type": "integer"
                },
                "degraded": {
                    "description": "If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data.",
                    "type": "boolean"
                },
                "devid": {
                    "description": "Node devid to query. Either an <integer> or \"all\". Can be used more than one time to query multiple nodes. \"all\" queries all up nodes. 0 means query the local node. For \"cluster\" scoped keys, in any devid including 0 can be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "end": {
                    "description": "Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time.",
                    "type": "integer"
                },
                "expand_clientid": {
                    "description": "If true, use name resolution to expand client addresses and other IDs.",
                    "type": "boolean"
                },
                "interval": {
                    "description": "Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled.",
                    "type": "integer"
                },
                "key": {
                    "description": "One key name. Can be used more than one time to query multiple keys. Also works with 'keys' arguments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "keys": {
                    "description": "Multiple key names. May request matching keys or request 'all' keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with 'substr'. Also works with 'key' arguments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "memory_only": {
                    "description": "Only use statistics sources that reside in memory (faster, but with less retention).",
                    "type": "boolean"
                },
                "resolution": {
                    "description": "Synonymous with 'interval', if supplied supersedes interval.",
                    "type": "integer"
                },
                "substr": {
                    "description": "Used in conjunction with the 'keys' argument, alters the behavior of keys. Makes the 'keys' arg perform a partial match. Defaults to false.",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Time in seconds to wait for results from remote nodes.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "stats": {
                    "items": {
                        "properties": {
                            "devid": {
                                "description": "Devid of node of statistic or 0 for cluster scoped statistics.",
                                "required": true,
                                "type": "integer"
                            },
                            "error": {
                                "description": "Key specific error string, if applicable.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "error_code": {
                                "description": "Key specific error number, if applicable.",
                                "required": true,
                                "type": [
                                    "null",
                                    "integer"
                                ]
                            },
                            "key": {
                                "description": "Key name of statistic.",
                                "required": true,
                                "type": "string"
                            },
                            "values": {
                                "description": "Time-series values.",
                                "items": {
                                    "properties": {
                                        "time": {
                                            "description": "Unix Epoch time in seconds that statistic was collected.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "value": {
                                            "description": "Key dependent value.",
                                            "required": true,
                                            "type": "any"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": [
                                    "null",
                                    "array"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/statistics/keys": {
        "GET_args": {
            "description": "List meta-data for matching keys.",
            "properties": {
                "count": {
                    "description": "Only count matching keys, do not return meta-data.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "queryable": {
                    "description": "Only list keys that can/cannot be queries. Default is true.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "keys": {
                    "items": {
                        "properties": {
                            "aggregation_type": {
                                "description": "Type of aggregation used in down-sampling.",
                                "enum": [
                                    "last",
                                    "min",
                                    "max",
                                    "avg",
                                    "sum",
                                    "custom"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "base_name": {
                                "description": "Name of key this keys is derived from, if any.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "default_cache_time": {
                                "description": "Default time in seconds system will used cached values.",
                                "required": true,
                                "type": "integer"
                            },
                            "description": {
                                "description": "Description of statistics key.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Key name.",
                                "required": true,
                                "type": "string"
                            },
                            "policies": {
                                "description": "List of effective history policies for key.",
                                "items": {
                                    "properties": {
                                        "interval": {
                                            "description": "Time between samples in seconds.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "persistent": {
                                            "description": "If true, history is persisted.",
                                            "required": true,
                                            "type": "boolean"
                                        },
                                        "retention": {
                                            "description": "Time in seconds to keep data.",
                                            "required": true,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": [
                                    "null",
                                    "array"
                                ]
                            },
                            "policy_cache_time": {
                                "description": "Configured time in seconds system will used cached values.",
                                "required": true,
                                "type": [
                                    "null",
                                    "integer"
                                ]
                            },
                            "real_name": {
                                "description": "Name of real key if this is an alias.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "scope": {
                                "description": "Scope of key.",
                                "enum": [
                                    "cluster",
                                    "node"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "Data type of key values.",
                                "required": true,
                                "type": "string"
                            },
                            "units": {
                                "description": "Units of key values.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/statistics/keys/<KEY>": {
        "GET_args": {
            "description": "List key meta-data.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "keys": {
                    "items": {
                        "properties": {
                            "aggregation_type": {
                                "description": "Type of aggregation used in down-sampling.",
                                "enum": [
                                    "last",
                                    "min",
                                    "max",
                                    "avg",
                                    "sum",
                                    "custom"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "base_name": {
                                "description": "Name of key this keys is derived from, if any.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "default_cache_time": {
                                "description": "Default time in seconds system will used cached values.",
                                "required": true,
                                "type": "integer"
                            },
                            "description": {
                                "description": "Description of statistics key.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Key name.",
                                "required": true,
                                "type": "string"
                            },
                            "policies": {
                                "description": "List of effective history policies for key.",
                                "items": {
                                    "properties": {
                                        "interval": {
                                            "description": "Time between samples in seconds.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "persistent": {
                                            "description": "If true, history is persisted.",
                                            "required": true,
                                            "type": "boolean"
                                        },
                                        "retention": {
                                            "description": "Time in seconds to keep data.",
                                            "required": true,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": [
                                    "null",
                                    "array"
                                ]
                            },
                            "policy_cache_time": {
                                "description": "Configured time in seconds system will used cached values.",
                                "required": true,
                                "type": [
                                    "null",
                                    "integer"
                                ]
                            },
                            "real_name": {
                                "description": "Name of real key if this is an alias.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "scope": {
                                "description": "Scope of key.",
                                "enum": [
                                    "cluster",
                                    "node"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "Data type of key values.",
                                "required": true,
                                "type": "string"
                            },
                            "units": {
                                "description": "Units of key values.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/statistics/protocols": {
        "GET_args": {
            "description": "Retrieve protocol list.",
            "properties": {
                "type": {
                    "description": "Specifies whether internal, external, or all protocols should be returned.",
                    "enum": [
                        "internal",
                        "external",
                        "all"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "protocols": {
                    "items": {
                        "properties": {
                            "name": {
                                "description": "Abbreviated name of protocol.",
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "External protocols are customer facing, internal protocols expose metrics for internal OneFS systems.",
                                "enum": [
                                    "external",
                                    "internal"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/compatibilities/class/active": {
        "GET_args": {
            "description": "Get a list of active compatibilities",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "active": {
                    "items": {
                        "properties": {
                            "class_1": {
                                "description": "The first class in an active compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "class_2": {
                                "description": "The second class in an active compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The id of this active compatibility",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new compatibility",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "assess": {
                    "description": "Do not create compatibility, only assess if creation is possible.",
                    "type": "boolean"
                },
                "class_1": {
                    "description": "The first class in the desired compatibility",
                    "required": true,
                    "type": "string"
                },
                "class_2": {
                    "description": "The second class in the desired compatibility",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "merges": {
                    "description": "A list of all merges that will occur given this compatibility operation",
                    "items": {
                        "properties": {
                            "ids": {
                                "description": "The nodepool ids that will be merged",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "names": {
                                "description": "The nodepool names that will be merged, in the sameorder as the ids",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "result_name": {
                                "description": "The name of the nodepool all others will merge into",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                },
                "message": {
                    "description": "A string describing the effects of the compatibility operation.",
                    "required": true,
                    "type": "string"
                },
                "splits": {
                    "description": "A list of all splits that will occur given this compatibility operation",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The nodepool id that will be split",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The nodepool name that will be split",
                                "required": true,
                                "type": "string"
                            },
                            "tier_name": {
                                "description": "A message explaining how the nodepools tier membership will change.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/compatibilities/class/active/<ID>": {
        "DELETE_args": {
            "description": "Delete an active compatibility by id",
            "type": "object"
        },
        "GET_args": {
            "description": "Get an active compatibilities by id",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "active": {
                    "items": {
                        "properties": {
                            "class_1": {
                                "description": "The first class in an active compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "class_2": {
                                "description": "The second class in an active compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The id of this active compatibility",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/compatibilities/class/available": {
        "GET_args": {
            "description": "Get a list of available compatibilities",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "available": {
                    "items": {
                        "properties": {
                            "class_1": {
                                "description": "The first class in an available compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "class_2": {
                                "description": "The second class in an available compatibility",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/compatibilities/ssd/available": {
        "GET_args": {
            "description": "Get a list of available ssd compatibilities",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "available": {
                    "items": {
                        "properties": {
                            "class": {
                                "description": "The node class of an ssd compatibility",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/settings": {
        "GET_args": {
            "description": "List all settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "automatically_manage_io_optimization": {
                            "description": "Automatically manage IO optimization settings on files.",
                            "enum": [
                                "all",
                                "files_at_default",
                                "none"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "automatically_manage_protection": {
                            "description": "Automatically manage protection settings on files.",
                            "enum": [
                                "all",
                                "files_at_default",
                                "none"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "global_namespace_acceleration_enabled": {
                            "description": "Optimize namespace operations by storing metadata on SSDs.",
                            "required": true,
                            "type": "boolean"
                        },
                        "global_namespace_acceleration_state": {
                            "description": "Whether or not namespace operation optimizations are currently in effect.",
                            "enum": [
                                "honored",
                                "inactive"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "protect_directories_one_level_higher": {
                            "description": "Automatically add additional protection level to all directories.",
                            "required": true,
                            "type": "boolean"
                        },
                        "spillover_enabled": {
                            "description": "Spill writes into other pools as needed.",
                            "required": true,
                            "type": "boolean"
                        },
                        "spillover_target": {
                            "description": "Target pool for spilled writes.",
                            "properties": {
                                "id": {
                                    "description": "Target pool ID if target specified, otherwise null.",
                                    "required": true,
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                },
                                "name": {
                                    "description": "Target pool name if target specified, otherwise null.",
                                    "required": true,
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "type": {
                                    "description": "Type of target pool.",
                                    "enum": [
                                        "tier",
                                        "nodepool",
                                        "anywhere",
                                        "invalid"
                                    ],
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "required": true,
                            "type": "object"
                        },
                        "ssd_l3_cache_default_enabled": {
                            "description": "The L3 Cache default enabled state. This specifies whether L3 Cache should be enabled on new node pools.",
                            "required": true,
                            "type": "boolean"
                        },
                        "virtual_hot_spare_deny_writes": {
                            "description": "Deny writes into reserved virtual hot spare space.",
                            "required": true,
                            "type": "boolean"
                        },
                        "virtual_hot_spare_hide_spare": {
                            "description": "Hide reserved virtual hot spare space from free space counts.",
                            "required": true,
                            "type": "boolean"
                        },
                        "virtual_hot_spare_limit_drives": {
                            "description": "The number of drives to reserve for the virtual hot spare, from 0-4.",
                            "maximum": 4,
                            "minimum": 0,
                            "required": true,
                            "type": "integer"
                        },
                        "virtual_hot_spare_limit_percent": {
                            "description": "The percent space to reserve for the virtual hot spare, from 0-20.",
                            "maximum": 20,
                            "minimum": 0,
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "automatically_manage_io_optimization": {
                    "description": "Automatically manage IO optimization settings on files.",
                    "enum": [
                        "all",
                        "files_at_default",
                        "none"
                    ],
                    "type": "string"
                },
                "automatically_manage_protection": {
                    "description": "Automatically manage protection settings on files.",
                    "enum": [
                        "all",
                        "files_at_default",
                        "none"
                    ],
                    "type": "string"
                },
                "global_namespace_acceleration_enabled": {
                    "description": "Optimize namespace operations by storing metadata on SSDs.",
                    "type": "boolean"
                },
                "protect_directories_one_level_higher": {
                    "description": "Automatically add additional protection level to all directories.",
                    "type": "boolean"
                },
                "spillover_enabled": {
                    "description": "Spill writes into other pools as needed.",
                    "type": "boolean"
                },
                "spillover_target": {
                    "description": "Target pool for spilled writes.",
                    "properties": {
                        "name_or_id": {
                            "description": "Target pool ID if target specified, otherwise null.",
                            "required": false,
                            "type": [
                                "integer",
                                "string",
                                "null"
                            ]
                        },
                        "type": {
                            "description": "Type of target pool.",
                            "enum": [
                                "storagepool",
                                "anywhere"
                            ],
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "ssd_l3_cache_default_enabled": {
                    "description": "The L3 Cache default enabled state. This specifies whether L3 Cache should be enabled on new node pools",
                    "type": "boolean"
                },
                "virtual_hot_spare_deny_writes": {
                    "description": "Deny writes into reserved virtual hot spare space.",
                    "type": "boolean"
                },
                "virtual_hot_spare_hide_spare": {
                    "description": "Hide reserved virtual hot spare space from free space counts.",
                    "type": "boolean"
                },
                "virtual_hot_spare_limit_drives": {
                    "description": "The number of drives to reserve for the virtual hot spare, from 0-4.",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "virtual_hot_spare_limit_percent": {
                    "description": "The percent space to reserve for the virtual hot spare, from 0-20.",
                    "maximum": 20,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/status": {
        "GET_args": {
            "description": "List any health conditions detected.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "unhealthy": {
                    "description": "Disk pools which are currently unhealthy.",
                    "items": {
                        "properties": {
                            "affected": {
                                "description": "The affected nodes and/or drives.",
                                "items": {
                                    "properties": {
                                        "device": {
                                            "description": "The logical node number or drive identifier.",
                                            "required": true,
                                            "type": [
                                                "integer",
                                                {
                                                    "properties": {
                                                        "bay": {
                                                            "description": "The drive bay number.",
                                                            "required": true,
                                                            "type": "integer"
                                                        },
                                                        "lnn": {
                                                            "description": "The node the drive is on.",
                                                            "required": true,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "down": {
                                            "description": "Whether or not the device is currently down.",
                                            "required": true,
                                            "type": "boolean"
                                        },
                                        "restriping": {
                                            "description": "Whether or not the device is currently being repaired.",
                                            "required": true,
                                            "type": "boolean"
                                        },
                                        "smartfailed": {
                                            "description": "Whether or not the device is currently smartfailed.",
                                            "required": true,
                                            "type": "boolean"
                                        },
                                        "type": {
                                            "description": "The type of affected device.",
                                            "enum": [
                                                "node",
                                                "drive"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "diskpool": {
                                "properties": {
                                    "drives": {
                                        "description": "The drives that are part of this disk pool.",
                                        "items": {
                                            "properties": {
                                                "bay": {
                                                    "description": "The drive bay number.",
                                                    "required": true,
                                                    "type": "integer"
                                                },
                                                "lnn": {
                                                    "description": "The node the drive is on.",
                                                    "required": true,
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    },
                                    "id": {
                                        "description": "The system ID given to the disk pool.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The disk pool name.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "nodepool_id": {
                                        "description": "The system ID of the disk pool's node pool, if it is in a node pool.",
                                        "required": true,
                                        "type": [
                                            "integer",
                                            "null"
                                        ]
                                    },
                                    "protection_policy": {
                                        "description": "The protection policy for the disk pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "ssd_drives": {
                                        "description": "The SSDs that are part of this disk pool.",
                                        "items": {
                                            "properties": {
                                                "bay": {
                                                    "description": "The drive bay number.",
                                                    "required": true,
                                                    "type": "integer"
                                                },
                                                "lnn": {
                                                    "description": "The node the drive is on.",
                                                    "required": true,
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "health_flags": {
                                "description": "An array of containing any health issues with this pool.  If the pool is healthy, the list is empty.",
                                "items": {
                                    "enum": [
                                        "underprovisioned",
                                        "missing_drives",
                                        "devices_down",
                                        "devices_smartfailed",
                                        "waiting_repair"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "unprovisioned": {
                    "description": "Drives which are not currently provisioned into a disk pool.",
                    "items": {
                        "properties": {
                            "bay": {
                                "description": "The drive bay number.",
                                "required": true,
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "The node the drive is on.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/tiers": {
        "DELETE_args": {
            "description": "Delete all tiers.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all tiers.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "tiers": {
                    "items": {
                        "properties": {
                            "children": {
                                "description": "The names or IDs of the tier's children.",
                                "items": {
                                    "type": [
                                        "string",
                                        "integer"
                                    ]
                                },
                                "required": false,
                                "type": "array"
                            },
                            "id": {
                                "description": "The system ID given to the tier.",
                                "required": true,
                                "type": "integer"
                            },
                            "lnns": {
                                "description": "The nodes that are part of this tier.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The tier name.",
                                "required": true,
                                "type": "string"
                            },
                            "usage": {
                                "description": "Total pool usage.",
                                "properties": {
                                    "avail_bytes": {
                                        "description": "Available free bytes remaining in the pool when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "avail_ssd_bytes": {
                                        "description": "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "balanced": {
                                        "description": "Whether or not the pool usage is currently balanced.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "free_bytes": {
                                        "description": "Free bytes remaining in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "free_ssd_bytes": {
                                        "description": "Free bytes remaining in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_bytes": {
                                        "description": "Total bytes used in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_ssd_bytes": {
                                        "description": "Total bytes used in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "virtual_hot_spare_bytes": {
                                        "description": "Bytes reserved for virtual hot spare in the pool.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new tier.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "children": {
                    "description": "The names or IDs of the tier's children.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "required": false,
                    "type": "array"
                },
                "name": {
                    "description": "The tier name.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The system ID of the new object.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/tiers/<TID>": {
        "DELETE_args": {
            "description": "Delete tier.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve tier information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "tiers": {
                    "items": {
                        "properties": {
                            "children": {
                                "description": "The names or IDs of the tier's children.",
                                "items": {
                                    "type": [
                                        "string",
                                        "integer"
                                    ]
                                },
                                "required": false,
                                "type": "array"
                            },
                            "id": {
                                "description": "The system ID given to the tier.",
                                "required": true,
                                "type": "integer"
                            },
                            "lnns": {
                                "description": "The nodes that are part of this tier.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The tier name.",
                                "required": true,
                                "type": "string"
                            },
                            "usage": {
                                "description": "Total pool usage.",
                                "properties": {
                                    "avail_bytes": {
                                        "description": "Available free bytes remaining in the pool when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "avail_ssd_bytes": {
                                        "description": "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "balanced": {
                                        "description": "Whether or not the pool usage is currently balanced.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "free_bytes": {
                                        "description": "Free bytes remaining in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "free_ssd_bytes": {
                                        "description": "Free bytes remaining in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_bytes": {
                                        "description": "Total bytes used in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_ssd_bytes": {
                                        "description": "Total bytes used in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "virtual_hot_spare_bytes": {
                                        "description": "Bytes reserved for virtual hot spare in the pool.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify tier. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "children": {
                    "description": "The names or IDs of the tier's children.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The tier name.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/storagepool/unprovisioned": {
        "GET_args": {
            "description": "Get the unprovisioned nodes and drives",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "unprovisioned": {
                    "items": {
                        "properties": {
                            "drives": {
                                "description": "A list of unprovisioned drives that do not belong to an unprovisioned node.",
                                "items": {
                                    "type": {
                                        "properties": {
                                            "bay": {
                                                "description": "The drive bay number.",
                                                "required": true,
                                                "type": "integer"
                                            },
                                            "lnn": {
                                                "description": "The node the drive is on.",
                                                "required": true,
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": true,
                                "type": "array"
                            },
                            "lnns": {
                                "description": "A list of lnns whose drives are all unprovisioned",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/history/file": {
        "GET_args": {
            "description": "List file operations performance data.",
            "properties": {
                "begin": {
                    "description": "Begin timestamp for time-series report.",
                    "type": "integer"
                },
                "end": {
                    "description": "End timestamp for time-series report.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "statistics": {
                    "items": {
                        "description": "A synciq performance report.",
                        "properties": {
                            "allocated": {
                                "description": "Nodes allocated for the sync action.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "An ID for a single performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Sync action limit.",
                                "required": true,
                                "type": "integer"
                            },
                            "timestamp": {
                                "description": "Timestamp for the performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "total": {
                                "description": "Total usage for the performance report.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/history/network": {
        "GET_args": {
            "description": "List network operations performance data.",
            "properties": {
                "begin": {
                    "description": "Begin timestamp for time-series report.",
                    "type": "integer"
                },
                "end": {
                    "description": "End timestamp for time-series report.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "statistics": {
                    "items": {
                        "description": "A synciq performance report.",
                        "properties": {
                            "allocated": {
                                "description": "Nodes allocated for the sync action.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "An ID for a single performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Sync action limit.",
                                "required": true,
                                "type": "integer"
                            },
                            "timestamp": {
                                "description": "Timestamp for the performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "total": {
                                "description": "Total usage for the performance report.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/license": {
        "GET_args": {
            "description": "Retrieve license information.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Information about an application license.",
            "properties": {
                "duration": {
                    "description": "Total duration in seconds for temporary licenses.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "expiration": {
                    "description": "Unix epoch time the license will expire.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "id": {
                    "description": "Unique identifier for the license.",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "Name of the licensed feature.",
                    "required": true,
                    "type": "string"
                },
                "status": {
                    "description": "Current status of the license.",
                    "enum": [
                        "Activated",
                        "Evaluation",
                        "Expired",
                        "Inactive",
                        "Unknown"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/policies/<POLICY>/reset": {
        "POST_args": {
            "description": "Reset a SyncIQ policy incremental state and force a full sync/copy.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/reports": {
        "GET_args": {
            "description": "Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by 'reports_per_policy'.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "newer_than": {
                    "description": "Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.",
                    "type": "integer"
                },
                "policy_name": {
                    "description": "Filter the returned reports to include only those with this policy name.",
                    "type": "string"
                },
                "reports_per_policy": {
                    "description": "If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10. ",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "Filter the returned reports to include only those whose jobs are in this state.",
                    "enum": [
                        "scheduled",
                        "running",
                        "paused",
                        "finished",
                        "failed",
                        "canceled",
                        "needs_attention",
                        "skipped",
                        "pending",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "subreport_count": {
                                "description": "The number of subreports that are available for this job report.",
                                "required": true,
                                "type": "integer"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/reports-rotate": {
        "GET_args": {
            "description": "Whether the rotation is still running or not.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Force rotation of reports.",
            "properties": {
                "message": {
                    "description": "A message about the status of the task.",
                    "required": true,
                    "type": "string"
                },
                "running": {
                    "description": "Whether this task is running or not.",
                    "required": true,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Rotate the records in the database(s).",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Force rotation of reports.",
            "properties": {
                "message": {
                    "description": "A message about the status of the task.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/reports/<RID>": {
        "GET_args": {
            "description": "View a single SyncIQ report.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "subreport_count": {
                                "description": "The number of subreports that are available for this job report.",
                                "required": true,
                                "type": "integer"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/reports/<RID>/subreports": {
        "GET_args": {
            "description": "Get a list of SyncIQ subreports for a report.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "newer_than": {
                    "description": "Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "Filter the returned reports to include only those whose jobs are in this state.",
                    "enum": [
                        "scheduled",
                        "running",
                        "paused",
                        "finished",
                        "failed",
                        "canceled",
                        "needs_attention",
                        "skipped",
                        "pending",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subreports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "enum": [
                                            "copy",
                                            "sync"
                                        ],
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/reports/<RID>/subreports/<SID>": {
        "GET_args": {
            "description": "View a single SyncIQ subreport.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "subreports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "enum": [
                                            "copy",
                                            "sync"
                                        ],
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/policies": {
        "GET_args": {
            "description": "List all SyncIQ target policies.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "target_path": {
                    "description": "Filter the returned policies to include only those with this target path.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "properties": {
                            "failover_failback_state": {
                                "description": "The condition of this policy with respect to sync failover/failback.",
                                "enum": [
                                    "writes_disabled",
                                    "enabling_writes",
                                    "writes_enabled",
                                    "disabling_writes",
                                    "creating_resync_policy",
                                    "resync_policy_created"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system ID given to this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "last_job_state": {
                                "description": "The state of the last job run for this policy.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "last_source_coordinator_ip": {
                                "description": "The IP address from which a SyncIQ coordinator daemon most recently connected to this cluster to update it about the progress of a job for this policy.",
                                "required": true,
                                "type": "string"
                            },
                            "last_update_from_source": {
                                "description": "The last time this cluster was updated with sync information from the source cluster for this policy, in unix epoch seconds.  Null if no such update has occurred yet.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "legacy_policy": {
                                "description": "Was this policy defined by a OneFS version earlier than 6.0? (Pre-6.0 policies did not have the target policy concept and canceling from the target side will not be available.)",
                                "required": true,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "User-assigned name of this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "source_cluster_guid": {
                                "description": "Unique identifier for the source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/policies/<POLICY>": {
        "DELETE_args": {
            "description": "Break the target association with this cluster for this policy.",
            "properties": {
                "force": {
                    "description": "Ignore any running jobs when preparing to delete the policy target association.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "View a single SyncIQ target policy.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "properties": {
                            "failover_failback_state": {
                                "description": "The condition of this policy with respect to sync failover/failback.",
                                "enum": [
                                    "writes_disabled",
                                    "enabling_writes",
                                    "writes_enabled",
                                    "disabling_writes",
                                    "creating_resync_policy",
                                    "resync_policy_created"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system ID given to this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "last_job_state": {
                                "description": "The state of the last job run for this policy.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "last_source_coordinator_ip": {
                                "description": "The IP address from which a SyncIQ coordinator daemon most recently connected to this cluster to update it about the progress of a job for this policy.",
                                "required": true,
                                "type": "string"
                            },
                            "last_update_from_source": {
                                "description": "The last time this cluster was updated with sync information from the source cluster for this policy, in unix epoch seconds.  Null if no such update has occurred yet.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "legacy_policy": {
                                "description": "Was this policy defined by a OneFS version earlier than 6.0? (Pre-6.0 policies did not have the target policy concept and canceling from the target side will not be available.)",
                                "required": true,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "User-assigned name of this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "source_cluster_guid": {
                                "description": "Unique identifier for the source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/policies/<POLICY>/cancel": {
        "POST_args": {
            "description": "Cancel the most recent SyncIQ job for this policy from the target side.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/reports": {
        "GET_args": {
            "description": "Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by 'reports_per_policy'.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "newer_than": {
                    "description": "Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.",
                    "type": "integer"
                },
                "policy_name": {
                    "description": "Filter the returned reports to include only those with this policy name.",
                    "type": "string"
                },
                "reports_per_policy": {
                    "description": "If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10. ",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "Filter the returned reports to include only those whose jobs are in this state.",
                    "enum": [
                        "scheduled",
                        "running",
                        "paused",
                        "finished",
                        "failed",
                        "canceled",
                        "needs_attention",
                        "skipped",
                        "pending",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "subreport_count": {
                                "description": "The number of subreports that are available for this job report.",
                                "required": true,
                                "type": "integer"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/reports/<RID>": {
        "GET_args": {
            "description": "View a single SyncIQ target report.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "subreport_count": {
                                "description": "The number of subreports that are available for this job report.",
                                "required": true,
                                "type": "integer"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/reports/<RID>/subreports": {
        "GET_args": {
            "description": "Get a list of SyncIQ target subreports for a report.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "newer_than": {
                    "description": "Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "Filter the returned reports to include only those whose jobs are in this state.",
                    "enum": [
                        "scheduled",
                        "running",
                        "paused",
                        "finished",
                        "failed",
                        "canceled",
                        "needs_attention",
                        "skipped",
                        "pending",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subreports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/1/sync/target/reports/<RID>/subreports/<SID>": {
        "GET_args": {
            "description": "View a single SyncIQ target subreport.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "subreports": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_host": {
                                "description": "Hostname or IP address of sync source cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/1/worm/domains": {
        "GET_args": {
            "description": "List all WORM domains.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domains": {
                    "items": {
                        "properties": {
                            "autocommit_offset": {
                                "description": "Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "default_retention": {
                                "description": "Specifies the default amount of time, in seconds, that a file in this domain will be protected for. The default retention period is applied if no retention date is manually set on the file. This parameter can also be set to 'forever', 'use_min' (which applies the 'min_retention' option), or 'use_max' (which applies the 'max_retention' option).",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "use_min",
                                            "use_max",
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the protection domain.",
                                "required": true,
                                "type": "integer"
                            },
                            "incomplete": {
                                "description": "True if OneFS is still in the process of creating this domain and is unable to prevent files from being modified or deleted. If false, indicates that the domain is fully created and is able to prevent files from being modified or deleted.",
                                "required": true,
                                "type": "boolean"
                            },
                            "lin": {
                                "description": "Specifies the logical inode number (LIN) for the root of this domain.",
                                "required": true,
                                "type": "integer"
                            },
                            "max_modifies": {
                                "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                                "required": true,
                                "type": "integer"
                            },
                            "max_retention": {
                                "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "min_retention": {
                                "description": "Specifies the minimum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a shorter retention period. If this parameter is set to null, this minimum value is not enforced. This parameter can also be set to 'forever'.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "override_date": {
                                "description": "Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "path": {
                                "description": "Specifies the root path of this domain. Files in this directory and all sub-directories will be protected.",
                                "required": true,
                                "type": "string"
                            },
                            "privileged_delete": {
                                "description": "When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.",
                                "enum": [
                                    "on",
                                    "off",
                                    "disabled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "total_modifies": {
                                "description": "Specifies the number of times this domain has been modified and the number of times the attributes for the domain have changed. A SmartLock domain can be modified a fixed number of times as defined by the 'max_modifies' parameter.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.",
                                "enum": [
                                    "enterprise",
                                    "compliance"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a WORM domain.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "autocommit_offset": {
                    "description": "Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "default_retention": {
                    "description": "Specifies the default amount of time, in seconds, that a file in this domain will be protected for. The default retention period is applied if no retention date is manually set on the file. This parameter can also be set to 'forever', 'use_min' (which applies the 'min_retention' option), or 'use_max' (which applies the 'max_retention' option).",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "use_min",
                                "use_max",
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "max_retention": {
                    "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "min_retention": {
                    "description": "Specifies the minimum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a shorter retention period. If this parameter is set to null, this minimum value is not enforced. This parameter can also be set to 'forever'.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "override_date": {
                    "description": "Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "path": {
                    "description": "Specifies the root path of this domain. Files in this directory and all sub-directories will be protected.",
                    "required": true,
                    "type": "string"
                },
                "privileged_delete": {
                    "description": "When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.",
                    "enum": [
                        "on",
                        "off",
                        "disabled"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.",
                    "enum": [
                        "enterprise",
                        "compliance"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "autocommit_offset": {
                    "description": "Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.",
                    "minimum": 0,
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "default_retention": {
                    "description": "Specifies the default amount of time, in seconds, that a file in this domain will be protected for. The default retention period is applied if no retention date is manually set on the file. This parameter can also be set to 'forever', 'use_min' (which applies the 'min_retention' option), or 'use_max' (which applies the 'max_retention' option).",
                    "minimum": 0,
                    "required": true,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "use_min",
                                "use_max",
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "id": {
                    "description": "Specifies the system-assigned ID for the protection domain.",
                    "required": true,
                    "type": "integer"
                },
                "incomplete": {
                    "description": "True if OneFS is still in the process of creating this domain and is unable to prevent files from being modified or deleted. If false, indicates that the domain is fully created and is able to prevent files from being modified or deleted.",
                    "required": true,
                    "type": "boolean"
                },
                "lin": {
                    "description": "Specifies the logical inode number (LIN) for the root of this domain.",
                    "required": true,
                    "type": "integer"
                },
                "max_modifies": {
                    "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                    "required": true,
                    "type": "integer"
                },
                "max_retention": {
                    "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                    "minimum": 0,
                    "required": true,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "min_retention": {
                    "description": "Specifies the minimum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a shorter retention period. If this parameter is set to null, this minimum value is not enforced. This parameter can also be set to 'forever'.",
                    "minimum": 0,
                    "required": true,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "override_date": {
                    "description": "Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.",
                    "minimum": 0,
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "path": {
                    "description": "Specifies the root path of this domain. Files in this directory and all sub-directories will be protected.",
                    "required": true,
                    "type": "string"
                },
                "privileged_delete": {
                    "description": "When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.",
                    "enum": [
                        "on",
                        "off",
                        "disabled"
                    ],
                    "required": true,
                    "type": "string"
                },
                "total_modifies": {
                    "description": "Specifies the number of times this domain has been modified and the number of times the attributes for the domain have changed. A SmartLock domain can be modified a fixed number of times as defined by the 'max_modifies' parameter.",
                    "required": true,
                    "type": "integer"
                },
                "type": {
                    "description": "Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.",
                    "enum": [
                        "enterprise",
                        "compliance"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/worm/domains/<DOMAIN+>": {
        "GET_args": {
            "description": "View a single WORM domain.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domains": {
                    "items": {
                        "properties": {
                            "autocommit_offset": {
                                "description": "Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "default_retention": {
                                "description": "Specifies the default amount of time, in seconds, that a file in this domain will be protected for. The default retention period is applied if no retention date is manually set on the file. This parameter can also be set to 'forever', 'use_min' (which applies the 'min_retention' option), or 'use_max' (which applies the 'max_retention' option).",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "use_min",
                                            "use_max",
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the protection domain.",
                                "required": true,
                                "type": "integer"
                            },
                            "incomplete": {
                                "description": "True if OneFS is still in the process of creating this domain and is unable to prevent files from being modified or deleted. If false, indicates that the domain is fully created and is able to prevent files from being modified or deleted.",
                                "required": true,
                                "type": "boolean"
                            },
                            "lin": {
                                "description": "Specifies the logical inode number (LIN) for the root of this domain.",
                                "required": true,
                                "type": "integer"
                            },
                            "max_modifies": {
                                "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                                "required": true,
                                "type": "integer"
                            },
                            "max_retention": {
                                "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "min_retention": {
                                "description": "Specifies the minimum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a shorter retention period. If this parameter is set to null, this minimum value is not enforced. This parameter can also be set to 'forever'.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null",
                                    {
                                        "enum": [
                                            "forever"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "override_date": {
                                "description": "Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "path": {
                                "description": "Specifies the root path of this domain. Files in this directory and all sub-directories will be protected.",
                                "required": true,
                                "type": "string"
                            },
                            "privileged_delete": {
                                "description": "When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.",
                                "enum": [
                                    "on",
                                    "off",
                                    "disabled"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "total_modifies": {
                                "description": "Specifies the number of times this domain has been modified and the number of times the attributes for the domain have changed. A SmartLock domain can be modified a fixed number of times as defined by the 'max_modifies' parameter.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.",
                                "enum": [
                                    "enterprise",
                                    "compliance"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a single WORM domain.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "autocommit_offset": {
                    "description": "Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "default_retention": {
                    "description": "Specifies the default amount of time, in seconds, that a file in this domain will be protected for. The default retention period is applied if no retention date is manually set on the file. This parameter can also be set to 'forever', 'use_min' (which applies the 'min_retention' option), or 'use_max' (which applies the 'max_retention' option).",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "use_min",
                                "use_max",
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "max_retention": {
                    "description": "Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "min_retention": {
                    "description": "Specifies the minimum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a shorter retention period. If this parameter is set to null, this minimum value is not enforced. This parameter can also be set to 'forever'.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null",
                        {
                            "enum": [
                                "forever"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "override_date": {
                    "description": "Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "privileged_delete": {
                    "description": "When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.",
                    "enum": [
                        "on",
                        "off",
                        "disabled"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.",
                    "enum": [
                        "enterprise",
                        "compliance"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/1/worm/settings": {
        "GET_args": {
            "description": "Get the global WORM settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Specifies global SmartLock (WORM) settings.",
                    "properties": {
                        "cdate": {
                            "description": "Specifies the current time of the SmartLock compliance clock in Unix Epoch seconds. If the compliance clock is not set, this value is null. A PUT request will set the compliance clock date to the current system time. The cluster must be in compliance mode to set the compliance clock.",
                            "type": [
                                "null",
                                "integer"
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the global WORM settings.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies global SmartLock (WORM) settings.",
            "properties": {
                "cdate": {
                    "description": "To set the compliance clock to the current system time, PUT to this resource with an empty JSON object {} for the cdate value.  This cluster must be in compliance mode to set the compliance clock.",
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/zones-summary": {
        "GET_args": {
            "description": "Retrieve access zone summary information.",
            "properties": {
                "groupnet": {
                    "description": "Name of groupnet in which to list zones.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "description": "The summary of a collection of objects.",
                    "properties": {
                        "count": {
                            "description": "The count of objects in the collection",
                            "required": true,
                            "type": "integer"
                        },
                        "list": {
                            "description": "List of zone names",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/1/zones-summary/<ZONE>": {
        "GET_args": {
            "description": "Retrieve non-privileged access zone information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "description": "The summary of a collection of objects.",
                    "properties": {
                        "path": {
                            "description": "The zone base path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/2/cluster/external-ips": {
        "GET_args": {
            "description": "Retrieve the cluster IP addresses including IPV4 and IPV6.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The list of the cluster's external IP addresses including IPV4 and IPV6.",
            "items": {
                "type": "string"
            },
            "type": "array"
        }
    },
    "/2/protocols/nfs/aliases": {
        "GET_args": {
            "description": "List all NFS aliases.",
            "properties": {
                "check": {
                    "description": "Check for conflicts when listing aliases.",
                    "type": "boolean"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "aliases": {
                    "items": {
                        "description": "Specifies properties for NFS aliases, which are names for physical paths in the file system.",
                        "properties": {
                            "health": {
                                "description": "Specifies whether the alias is usable.",
                                "type": [
                                    {
                                        "description": "Specifies whether the alias is usable.",
                                        "enum": [
                                            "good",
                                            "illegal file type",
                                            "illegal path",
                                            "name conflict",
                                            "not exported",
                                            "path not found",
                                            "unknown"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies a string which represents the unique location of the alias.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name by which the alias can be referenced.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the path to which the alias points.",
                                "type": "string"
                            },
                            "zone": {
                                "description": "Specifies the zone in which the alias is valid.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new NFS alias.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for NFS aliases, which are names for physical paths in the file system.",
            "properties": {
                "health": {
                    "description": "Specifies whether the alias is usable.",
                    "type": [
                        {
                            "description": "Specifies whether the alias is usable.",
                            "enum": [
                                "good",
                                "illegal file type",
                                "illegal path",
                                "name conflict",
                                "not exported",
                                "path not found",
                                "unknown"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the name by which the alias can be referenced.",
                    "required": true,
                    "type": "string"
                },
                "path": {
                    "description": "Specifies the path to which the alias points.",
                    "required": true,
                    "type": "string"
                },
                "zone": {
                    "description": "Specifies the zone in which the alias is valid.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Specifies the return value when an alias is successfully created or modified.",
            "properties": {
                "health": {
                    "description": "Specifies whether the alias is usable.",
                    "required": true,
                    "type": [
                        {
                            "description": "Specifies whether the alias is usable.",
                            "enum": [
                                "good",
                                "illegal file type",
                                "illegal path",
                                "name conflict",
                                "not exported",
                                "path not found",
                                "unknown"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "id": {
                    "description": "Specifies a string which represents the unique location of the alias.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/aliases/<AID>": {
        "DELETE_args": {
            "description": "Delete the export.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve export information.",
            "properties": {
                "check": {
                    "description": "Check for conflicts when viewing alias.",
                    "type": "boolean"
                },
                "scope": {
                    "description": "When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with non-default values are shown. When specified as 'default', the original values are returned.",
                    "enum": [
                        "effective",
                        "user"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "aliases": {
                    "items": {
                        "description": "Specifies properties for NFS aliases, which are names for physical paths in the file system.",
                        "properties": {
                            "health": {
                                "description": "Specifies whether the alias is usable.",
                                "type": [
                                    {
                                        "description": "Specifies whether the alias is usable.",
                                        "enum": [
                                            "good",
                                            "illegal file type",
                                            "illegal path",
                                            "name conflict",
                                            "not exported",
                                            "path not found",
                                            "unknown"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "id": {
                                "description": "Specifies a string which represents the unique location of the alias.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name by which the alias can be referenced.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the path to which the alias points.",
                                "type": "string"
                            },
                            "zone": {
                                "description": "Specifies the zone in which the alias is valid.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the alias. All input fields are optional, but one or more must be supplied.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies properties for NFS aliases, which are names for physical paths in the file system.",
            "properties": {
                "health": {
                    "description": "Specifies whether the alias is usable.",
                    "type": [
                        {
                            "description": "Specifies whether the alias is usable.",
                            "enum": [
                                "good",
                                "illegal file type",
                                "illegal path",
                                "name conflict",
                                "not exported",
                                "path not found",
                                "unknown"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the name by which the alias can be referenced.",
                    "type": "string"
                },
                "path": {
                    "description": "Specifies the path to which the alias points.",
                    "type": "string"
                },
                "zone": {
                    "description": "Specifies the zone in which the alias is valid.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/check": {
        "GET_args": {
            "description": "Retrieve NFS export validation information.",
            "properties": {
                "ignore_bad_auth": {
                    "description": "Ignore invalid users.",
                    "type": "boolean"
                },
                "ignore_bad_paths": {
                    "description": "Ignore nonexistent or otherwise bad paths.",
                    "type": "boolean"
                },
                "ignore_unresolvable_hosts": {
                    "description": "Ignore unresolvable hosts.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Validation information about NFS exports.",
            "properties": {
                "checks": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The ID of the export.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "messages": {
                                "description": "The message about the export.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "required": false,
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/exports": {
        "GET_args": {
            "description": "List all NFS exports.",
            "properties": {
                "check": {
                    "description": "Check for conflicts when listing exports.",
                    "type": "boolean"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "path": {
                    "description": "If specified, only exports that explicitly reference at least one of the given paths will be returned.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "scope": {
                    "description": "When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with non-default values are shown. When specified as 'default', the original values are returned.",
                    "enum": [
                        "effective",
                        "user"
                    ],
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "exports": {
                    "items": {
                        "description": "Specifies configuration values for NFS exports.",
                        "properties": {
                            "all_dirs": {
                                "description": "True if all directories under the specified paths are mountable.",
                                "type": "boolean"
                            },
                            "block_size": {
                                "description": "Specifies the block size returned by the NFS statfs procedure.",
                                "type": "integer"
                            },
                            "can_set_time": {
                                "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                                "type": "boolean"
                            },
                            "case_insensitive": {
                                "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "case_preserving": {
                                "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "chown_restricted": {
                                "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "clients": {
                                "description": "Specifies the clients with root access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "commit_asynchronous": {
                                "description": "True if NFS  commit  requests execute asynchronously.",
                                "type": "boolean"
                            },
                            "conflicting_paths": {
                                "description": "Reports the paths that conflict with another export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Specifies the user-defined string that is used to identify the export.",
                                "type": "string"
                            },
                            "directory_transfer_size": {
                                "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "encoding": {
                                "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the export. This ID is returned when an export is created through the POST method.",
                                "type": "integer"
                            },
                            "link_max": {
                                "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "map_all": {
                                "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_failure": {
                                "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_full": {
                                "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                                "type": "boolean"
                            },
                            "map_lookup_uid": {
                                "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                                "type": "boolean"
                            },
                            "map_non_root": {
                                "description": "Specifies the users and groups to which non-root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_retry": {
                                "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                                "type": "boolean"
                            },
                            "map_root": {
                                "description": "Specifies the users and groups to which root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "max_file_size": {
                                "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "name_max_size": {
                                "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "no_truncate": {
                                "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "paths": {
                                "description": "Specifies the paths under /ifs that are exported.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "read_only": {
                                "description": "True if the export is set to read-only.",
                                "type": "boolean"
                            },
                            "read_only_clients": {
                                "description": "Specifies the clients with read-only access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "read_transfer_max_size": {
                                "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_transfer_multiple": {
                                "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_transfer_size": {
                                "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_write_clients": {
                                "description": "Specifies the clients with both read and write access to the export, even when the export is set to read-only.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "readdirplus": {
                                "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                                "type": "boolean"
                            },
                            "readdirplus_prefetch": {
                                "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                                "type": "integer"
                            },
                            "return_32bit_file_ids": {
                                "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                                "type": "boolean"
                            },
                            "root_clients": {
                                "description": "Clients that have root access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "security_flavors": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "items": {
                                    "description": "Specifies the authentication types that are supported for this export.",
                                    "enum": [
                                        "unix",
                                        "krb5",
                                        "krb5i",
                                        "krb5p"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "setattr_asynchronous": {
                                "description": "True if set attribute operations execute asynchronously.",
                                "type": "boolean"
                            },
                            "snapshot": {
                                "description": "Specifies the snapshot for all mounts.",
                                "type": "string"
                            },
                            "symlinks": {
                                "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "boolean"
                            },
                            "time_delta": {
                                "description": "Specifies the resolution of all time values that are returned to the clients",
                                "type": "number"
                            },
                            "unresolved_clients": {
                                "description": "Reports clients that cannot be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "write_datasync_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_datasync_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_filesync_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_filesync_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_transfer_max_size": {
                                "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_transfer_multiple": {
                                "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_transfer_size": {
                                "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_unstable_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_unstable_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "zone": {
                                "description": "Specifies the zone in which the export is valid.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new NFS export.",
            "properties": {
                "force": {
                    "description": "If true, the export will be created even if it conflicts with another export.",
                    "type": "boolean"
                },
                "ignore_bad_auth": {
                    "description": "Ignore invalid users.",
                    "type": "boolean"
                },
                "ignore_bad_paths": {
                    "description": "Ignore nonexistent or otherwise bad paths.",
                    "type": "boolean"
                },
                "ignore_conflicts": {
                    "description": "Ignore conflicts with existing exports.",
                    "type": "boolean"
                },
                "ignore_unresolvable_hosts": {
                    "description": "Ignore unresolvable hosts.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies configuration values for NFS exports.",
            "properties": {
                "all_dirs": {
                    "description": "True if all directories under the specified paths are mountable.",
                    "type": "boolean"
                },
                "block_size": {
                    "description": "Specifies the block size returned by the NFS statfs procedure.",
                    "type": "integer"
                },
                "can_set_time": {
                    "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                    "type": "boolean"
                },
                "case_insensitive": {
                    "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "boolean"
                },
                "case_preserving": {
                    "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "boolean"
                },
                "chown_restricted": {
                    "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "boolean"
                },
                "clients": {
                    "description": "Specifies the clients with root access to the export.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "commit_asynchronous": {
                    "description": "True if NFS  commit  requests execute asynchronously.",
                    "type": "boolean"
                },
                "description": {
                    "description": "Specifies the user-defined string that is used to identify the export.",
                    "type": "string"
                },
                "directory_transfer_size": {
                    "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "encoding": {
                    "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                    "type": "string"
                },
                "link_max": {
                    "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "integer"
                },
                "map_all": {
                    "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                    "type": [
                        {
                            "description": "User and group mapping.",
                            "properties": {
                                "enabled": {
                                    "description": "True if the user mapping is applied.",
                                    "type": "boolean"
                                },
                                "primary_group": {
                                    "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                    "type": [
                                        {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "secondary_groups": {
                                    "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                    "items": {
                                        "type": [
                                            {
                                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                "properties": {
                                                    "id": {
                                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Specifies the persona name, which must be combined with a type.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                                        "enum": [
                                                            "user",
                                                            "group",
                                                            "wellknown"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "user": {
                                    "description": "Specifies the name of the privilege.",
                                    "type": [
                                        {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "map_failure": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_full": {
                    "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                    "type": "boolean"
                },
                "map_lookup_uid": {
                    "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                    "type": "boolean"
                },
                "map_non_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which non-root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_retry": {
                    "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                    "type": "boolean"
                },
                "map_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "max_file_size": {
                    "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "integer"
                },
                "name_max_size": {
                    "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "integer"
                },
                "no_truncate": {
                    "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                    "type": "boolean"
                },
                "paths": {
                    "description": "Specifies the paths under /ifs that are exported.",
                    "items": {
                        "type": "string"
                    },
                    "required": true,
                    "type": "array"
                },
                "read_only": {
                    "description": "True if the export is set to read-only.",
                    "type": "boolean"
                },
                "read_only_clients": {
                    "description": "Specifies the clients with read-only access to the export.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "read_transfer_max_size": {
                    "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "read_transfer_multiple": {
                    "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "read_transfer_size": {
                    "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "read_write_clients": {
                    "description": "Specifies the clients with both read and write access to the export, even when the export is set to read-only.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "readdirplus": {
                    "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                    "type": "boolean"
                },
                "readdirplus_prefetch": {
                    "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                    "type": "integer"
                },
                "return_32bit_file_ids": {
                    "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                    "type": "boolean"
                },
                "root_clients": {
                    "description": "Clients that have root access to the export.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "security_flavors": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the authentication types that are supported for this export.",
                            "items": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "enum": [
                                    "unix",
                                    "krb5",
                                    "krb5i",
                                    "krb5p"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "setattr_asynchronous": {
                    "description": "True if set attribute operations execute asynchronously.",
                    "type": "boolean"
                },
                "snapshot": {
                    "description": "Specifies the snapshot for all mounts.",
                    "type": "string"
                },
                "symlinks": {
                    "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "boolean"
                },
                "time_delta": {
                    "description": "Specifies the resolution of all time values that are returned to the clients",
                    "type": "number"
                },
                "write_datasync_action": {
                    "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "write_datasync_reply": {
                    "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "write_filesync_action": {
                    "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "write_filesync_reply": {
                    "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "write_transfer_max_size": {
                    "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "write_transfer_multiple": {
                    "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "write_transfer_size": {
                    "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                    "type": "integer"
                },
                "write_unstable_action": {
                    "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "write_unstable_reply": {
                    "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                    "type": [
                        {
                            "description": "Specifies the synchronization type.",
                            "enum": [
                                "DATASYNC",
                                "FILESYNC",
                                "UNSTABLE"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "zone": {
                    "description": "Specifies the zone in which the export is valid.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/exports-summary": {
        "GET_args": {
            "description": "Retrieve NFS export summary information.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "summary": {
                    "description": "The summary of a collection of objects.",
                    "properties": {
                        "count": {
                            "description": "The count of objects in the collection",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/exports/<EID>": {
        "DELETE_args": {
            "description": "Delete the export.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve export information.",
            "properties": {
                "scope": {
                    "description": "When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with non-default values are shown. When specified as 'default', the original values are returned.",
                    "enum": [
                        "effective",
                        "user"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "exports": {
                    "items": {
                        "description": "Specifies configuration values for NFS exports.",
                        "properties": {
                            "all_dirs": {
                                "description": "True if all directories under the specified paths are mountable.",
                                "type": "boolean"
                            },
                            "block_size": {
                                "description": "Specifies the block size returned by the NFS statfs procedure.",
                                "type": "integer"
                            },
                            "can_set_time": {
                                "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                                "type": "boolean"
                            },
                            "case_insensitive": {
                                "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "case_preserving": {
                                "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "chown_restricted": {
                                "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "clients": {
                                "description": "Specifies the clients with root access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "commit_asynchronous": {
                                "description": "True if NFS  commit  requests execute asynchronously.",
                                "type": "boolean"
                            },
                            "conflicting_paths": {
                                "description": "Reports the paths that conflict with another export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Specifies the user-defined string that is used to identify the export.",
                                "type": "string"
                            },
                            "directory_transfer_size": {
                                "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "encoding": {
                                "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the export. This ID is returned when an export is created through the POST method.",
                                "type": "integer"
                            },
                            "link_max": {
                                "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "map_all": {
                                "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_failure": {
                                "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_full": {
                                "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                                "type": "boolean"
                            },
                            "map_lookup_uid": {
                                "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                                "type": "boolean"
                            },
                            "map_non_root": {
                                "description": "Specifies the users and groups to which non-root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "map_retry": {
                                "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                                "type": "boolean"
                            },
                            "map_root": {
                                "description": "Specifies the users and groups to which root clients are mapped.",
                                "type": [
                                    {
                                        "description": "User and group mapping.",
                                        "properties": {
                                            "enabled": {
                                                "description": "True if the user mapping is applied.",
                                                "type": "boolean"
                                            },
                                            "primary_group": {
                                                "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "secondary_groups": {
                                                "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                                "items": {
                                                    "type": [
                                                        {
                                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                            "properties": {
                                                                "id": {
                                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                                    "enum": [
                                                                        "user",
                                                                        "group",
                                                                        "wellknown"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "user": {
                                                "description": "Specifies the name of the privilege.",
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "max_file_size": {
                                "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "name_max_size": {
                                "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "integer"
                            },
                            "no_truncate": {
                                "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                                "type": "boolean"
                            },
                            "paths": {
                                "description": "Specifies the paths under /ifs that are exported.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "read_only": {
                                "description": "True if the export is set to read-only.",
                                "type": "boolean"
                            },
                            "read_only_clients": {
                                "description": "Specifies the clients with read-only access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "read_transfer_max_size": {
                                "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_transfer_multiple": {
                                "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_transfer_size": {
                                "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "read_write_clients": {
                                "description": "Specifies the clients with both read and write access to the export, even when the export is set to read-only.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "readdirplus": {
                                "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                                "type": "boolean"
                            },
                            "readdirplus_prefetch": {
                                "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                                "type": "integer"
                            },
                            "return_32bit_file_ids": {
                                "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                                "type": "boolean"
                            },
                            "root_clients": {
                                "description": "Clients that have root access to the export.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "security_flavors": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "items": {
                                    "description": "Specifies the authentication types that are supported for this export.",
                                    "enum": [
                                        "unix",
                                        "krb5",
                                        "krb5i",
                                        "krb5p"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "setattr_asynchronous": {
                                "description": "True if set attribute operations execute asynchronously.",
                                "type": "boolean"
                            },
                            "snapshot": {
                                "description": "Specifies the snapshot for all mounts.",
                                "type": "string"
                            },
                            "symlinks": {
                                "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "boolean"
                            },
                            "time_delta": {
                                "description": "Specifies the resolution of all time values that are returned to the clients",
                                "type": "number"
                            },
                            "unresolved_clients": {
                                "description": "Reports clients that cannot be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "write_datasync_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_datasync_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_filesync_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_filesync_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_transfer_max_size": {
                                "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_transfer_multiple": {
                                "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_transfer_size": {
                                "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                                "type": "integer"
                            },
                            "write_unstable_action": {
                                "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "write_unstable_reply": {
                                "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                                "type": [
                                    {
                                        "description": "Specifies the synchronization type.",
                                        "enum": [
                                            "DATASYNC",
                                            "FILESYNC",
                                            "UNSTABLE"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "zone": {
                                "description": "Specifies the zone in which the export is valid.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the export. All input fields are optional, but one or more must be supplied.",
            "properties": {
                "force": {
                    "description": "If true, the export will be updated even if that change conflicts with another export.",
                    "type": "boolean"
                },
                "ignore_bad_auth": {
                    "description": "Ignore invalid users.",
                    "type": "boolean"
                },
                "ignore_bad_paths": {
                    "description": "Ignore nonexistent or otherwise bad paths.",
                    "type": "boolean"
                },
                "ignore_conflicts": {
                    "description": "Ignore conflicts with existing exports.",
                    "type": "boolean"
                },
                "ignore_unresolvable_hosts": {
                    "description": "Ignore unresolvable hosts.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies configuration values for NFS exports.",
            "properties": {
                "all_dirs": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if all directories under the specified paths are mountable.",
                            "type": "boolean"
                        }
                    ]
                },
                "block_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the block size returned by the NFS statfs procedure.",
                            "type": "integer"
                        }
                    ]
                },
                "can_set_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "case_insensitive": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "case_preserving": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "chown_restricted": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "clients": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the clients with root access to the export.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "commit_asynchronous": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if NFS  commit  requests execute asynchronously.",
                            "type": "boolean"
                        }
                    ]
                },
                "description": {
                    "description": "Specifies the user-defined string that is used to identify the export.",
                    "type": "string"
                },
                "directory_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "encoding": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                            "type": "string"
                        }
                    ]
                },
                "link_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "map_all": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_failure": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_full": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_lookup_uid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_non_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which non-root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_retry": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "max_file_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "name_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "no_truncate": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "paths": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the paths under /ifs that are exported.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "read_only": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the export is set to read-only.",
                            "type": "boolean"
                        }
                    ]
                },
                "read_only_clients": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the clients with read-only access to the export.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "read_transfer_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "read_transfer_multiple": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "read_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "read_write_clients": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the clients with both read and write access to the export, even when the export is set to read-only.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "readdirplus": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                            "type": "boolean"
                        }
                    ]
                },
                "readdirplus_prefetch": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                            "type": "integer"
                        }
                    ]
                },
                "return_32bit_file_ids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                            "type": "boolean"
                        }
                    ]
                },
                "root_clients": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Clients that have root access to the export.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "security_flavors": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the authentication types that are supported for this export.",
                            "items": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "enum": [
                                    "unix",
                                    "krb5",
                                    "krb5i",
                                    "krb5p"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "setattr_asynchronous": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if set attribute operations execute asynchronously.",
                            "type": "boolean"
                        }
                    ]
                },
                "snapshot": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the snapshot for all mounts.",
                            "type": "string"
                        }
                    ]
                },
                "symlinks": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "boolean"
                        }
                    ]
                },
                "time_delta": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the resolution of all time values that are returned to the clients",
                            "type": "number"
                        }
                    ]
                },
                "write_datasync_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_datasync_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_filesync_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_filesync_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_transfer_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_transfer_multiple": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_unstable_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_unstable_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the zone in which the export is valid.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/nlm/locks": {
        "GET_args": {
            "description": "List all NLM locks.",
            "properties": {
                "client": {
                    "description": "Filter locks by the specified client host name and IP address.",
                    "type": "string"
                },
                "client_id": {
                    "description": "Filter locks by the specified client ID.",
                    "type": "string"
                },
                "created": {
                    "description": "Return locks created after the specified unix epoch time.",
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "lin": {
                    "description": "Filter locks by the specified LIN in /ifs that is locked.",
                    "type": "string"
                },
                "path": {
                    "description": "Filter locks by the specified path under /ifs.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "locks": {
                    "items": {
                        "description": "Information for an NLM lock on NFS.",
                        "properties": {
                            "client": {
                                "description": "Specifies the client host name and IP address.",
                                "type": "string"
                            },
                            "client_id": {
                                "description": "Specifies the client ID.",
                                "type": "string"
                            },
                            "created": {
                                "description": "Specifies the UNIX EPoch time that the lock was created.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID given to the lock. This value is returned when the lock is created with the POST method.",
                                "type": "string"
                            },
                            "lin": {
                                "description": "Specifies the LIN in /ifs that is locked.",
                                "type": "string"
                            },
                            "lock_type": {
                                "description": "Specifies the lock type.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the path under /ifs that is locked.",
                                "type": "string"
                            },
                            "range": {
                                "description": "Specifies the byte range within the locked file.",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/nlm/waiters": {
        "GET_args": {
            "description": "List all NLM lock waiters.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                },
                "waiters": {
                    "items": {
                        "description": "Information for an NLM lock on NFS.",
                        "properties": {
                            "client": {
                                "description": "Specifies the client host name and IP address.",
                                "type": "string"
                            },
                            "client_id": {
                                "description": "Specifies the client ID.",
                                "type": "string"
                            },
                            "created": {
                                "description": "Specifies the UNIX EPoch time that the lock was created.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID given to the lock. This value is returned when the lock is created with the POST method.",
                                "type": "string"
                            },
                            "lin": {
                                "description": "Specifies the LIN in /ifs that is locked.",
                                "type": "string"
                            },
                            "lock_type": {
                                "description": "Specifies the lock type.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the path under /ifs that is locked.",
                                "type": "string"
                            },
                            "range": {
                                "description": "Specifies the byte range within the locked file.",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/settings/export": {
        "GET_args": {
            "description": "Retrieve export information.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Default NFS export configuration values.",
            "properties": {
                "settings": {
                    "description": "Specifies configuration values for NFS exports.",
                    "properties": {
                        "all_dirs": {
                            "description": "True if all directories under the specified paths are mountable.",
                            "type": "boolean"
                        },
                        "block_size": {
                            "description": "Specifies the block size returned by the NFS statfs procedure.",
                            "type": "integer"
                        },
                        "can_set_time": {
                            "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                            "type": "boolean"
                        },
                        "case_insensitive": {
                            "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        },
                        "case_preserving": {
                            "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        },
                        "chown_restricted": {
                            "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        },
                        "commit_asynchronous": {
                            "description": "True if NFS  commit  requests execute asynchronously.",
                            "type": "boolean"
                        },
                        "directory_transfer_size": {
                            "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "encoding": {
                            "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                            "type": "string"
                        },
                        "link_max": {
                            "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        },
                        "map_all": {
                            "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "map_failure": {
                            "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "map_full": {
                            "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                            "type": "boolean"
                        },
                        "map_lookup_uid": {
                            "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                            "type": "boolean"
                        },
                        "map_non_root": {
                            "description": "Specifies the users and groups to which non-root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "map_retry": {
                            "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                            "type": "boolean"
                        },
                        "map_root": {
                            "description": "Specifies the users and groups to which root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "max_file_size": {
                            "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        },
                        "name_max_size": {
                            "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        },
                        "no_truncate": {
                            "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        },
                        "read_only": {
                            "description": "True if the export is set to read-only.",
                            "type": "boolean"
                        },
                        "read_transfer_max_size": {
                            "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "read_transfer_multiple": {
                            "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "read_transfer_size": {
                            "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "readdirplus": {
                            "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                            "type": "boolean"
                        },
                        "readdirplus_prefetch": {
                            "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                            "type": "integer"
                        },
                        "return_32bit_file_ids": {
                            "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                            "type": "boolean"
                        },
                        "security_flavors": {
                            "description": "Specifies the authentication types that are supported for this export.",
                            "items": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "enum": [
                                    "unix",
                                    "krb5",
                                    "krb5i",
                                    "krb5p"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "setattr_asynchronous": {
                            "description": "True if set attribute operations execute asynchronously.",
                            "type": "boolean"
                        },
                        "snapshot": {
                            "description": "Specifies the snapshot for all mounts.",
                            "type": "string"
                        },
                        "symlinks": {
                            "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "boolean"
                        },
                        "time_delta": {
                            "description": "Specifies the resolution of all time values that are returned to the clients",
                            "type": "number"
                        },
                        "write_datasync_action": {
                            "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "write_datasync_reply": {
                            "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "write_filesync_action": {
                            "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "write_filesync_reply": {
                            "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "write_transfer_max_size": {
                            "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "write_transfer_multiple": {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "write_transfer_size": {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        },
                        "write_unstable_action": {
                            "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "write_unstable_reply": {
                            "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "zone": {
                            "description": "Specifies the zone in which the export is valid.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies configuration values for NFS exports.",
            "properties": {
                "all_dirs": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if all directories under the specified paths are mountable.",
                            "type": "boolean"
                        }
                    ]
                },
                "block_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the block size returned by the NFS statfs procedure.",
                            "type": "integer"
                        }
                    ]
                },
                "can_set_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "case_insensitive": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "case_preserving": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "chown_restricted": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "commit_asynchronous": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if NFS  commit  requests execute asynchronously.",
                            "type": "boolean"
                        }
                    ]
                },
                "directory_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "encoding": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.",
                            "type": "string"
                        }
                    ]
                },
                "link_max": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "map_all": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which non-root and root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_failure": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which clients should be mapped to if authentication fails.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_full": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_lookup_uid": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_non_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which non-root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "map_retry": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.",
                            "type": "boolean"
                        }
                    ]
                },
                "map_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users and groups to which root clients are mapped.",
                            "type": [
                                {
                                    "description": "User and group mapping.",
                                    "properties": {
                                        "enabled": {
                                            "description": "True if the user mapping is applied.",
                                            "type": "boolean"
                                        },
                                        "primary_group": {
                                            "description": "Specifies persona properties for the primary user group. A persona consists of either a type and name, or an ID.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "secondary_groups": {
                                            "description": "Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.",
                                            "items": {
                                                "type": [
                                                    {
                                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                        "properties": {
                                                            "id": {
                                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                                "enum": [
                                                                    "user",
                                                                    "group",
                                                                    "wellknown"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        "user": {
                                            "description": "Specifies the name of the privilege.",
                                            "type": [
                                                {
                                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                                    "properties": {
                                                        "id": {
                                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Specifies the persona name, which must be combined with a type.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                                            "enum": [
                                                                "user",
                                                                "group",
                                                                "wellknown"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        }
                    ]
                },
                "max_file_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "name_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "integer"
                        }
                    ]
                },
                "no_truncate": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.",
                            "type": "boolean"
                        }
                    ]
                },
                "read_only": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if the export is set to read-only.",
                            "type": "boolean"
                        }
                    ]
                },
                "read_transfer_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "read_transfer_multiple": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "read_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "readdirplus": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.",
                            "type": "boolean"
                        }
                    ]
                },
                "readdirplus_prefetch": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)",
                            "type": "integer"
                        }
                    ]
                },
                "return_32bit_file_ids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Limits the size of file identifiers returned by NFSv3+ to 32-bit values.",
                            "type": "boolean"
                        }
                    ]
                },
                "security_flavors": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the authentication types that are supported for this export.",
                            "items": {
                                "description": "Specifies the authentication types that are supported for this export.",
                                "enum": [
                                    "unix",
                                    "krb5",
                                    "krb5i",
                                    "krb5p"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "setattr_asynchronous": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if set attribute operations execute asynchronously.",
                            "type": "boolean"
                        }
                    ]
                },
                "snapshot": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the snapshot for all mounts.",
                            "type": "string"
                        }
                    ]
                },
                "symlinks": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "boolean"
                        }
                    ]
                },
                "time_delta": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the resolution of all time values that are returned to the clients",
                            "type": "number"
                        }
                    ]
                },
                "write_datasync_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ datasync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_datasync_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ datasync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_filesync_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ filesync write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_filesync_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ filesync write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_transfer_max_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_transfer_multiple": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_transfer_size": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.",
                            "type": "integer"
                        }
                    ]
                },
                "write_unstable_action": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the action to be taken when an NFSv3+ unstable write is requested.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "write_unstable_reply": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the stability disposition returned when an NFSv3+ unstable write is processed.",
                            "type": [
                                {
                                    "description": "Specifies the synchronization type.",
                                    "enum": [
                                        "DATASYNC",
                                        "FILESYNC",
                                        "UNSTABLE"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ]
                },
                "zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the zone in which the export is valid.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/2/protocols/nfs/settings/zone": {
        "GET_args": {
            "description": "Retrieve the NFS server settings for this zone.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Specifies the per-zone NFS configuration settings.",
                    "properties": {
                        "nfsv4_allow_numeric_ids": {
                            "description": "If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.",
                            "type": "boolean"
                        },
                        "nfsv4_domain": {
                            "description": "Specifies the domain or realm through which users and groups are associated.",
                            "type": "string"
                        },
                        "nfsv4_no_domain": {
                            "description": "If true, sends owners and groups without a domain name.",
                            "type": "boolean"
                        },
                        "nfsv4_no_domain_uids": {
                            "description": "If true, sends UIDs and GIDs without a domain name.",
                            "type": "boolean"
                        },
                        "nfsv4_no_names": {
                            "description": "If true, sends owners and groups as UIDs and GIDs.",
                            "type": "boolean"
                        },
                        "nfsv4_replace_domain": {
                            "description": "If true, replaces the owner or group domain with an NFS domain name.",
                            "type": "boolean"
                        },
                        "zone": {
                            "description": "Specifies the access zones in which these settings apply.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the NFS server settings for this zone.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the per-zone NFS configuration settings.",
            "properties": {
                "nfsv4_allow_numeric_ids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.",
                            "type": "boolean"
                        }
                    ]
                },
                "nfsv4_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain or realm through which users and groups are associated.",
                            "type": "string"
                        }
                    ]
                },
                "nfsv4_no_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, sends owners and groups without a domain name.",
                            "type": "boolean"
                        }
                    ]
                },
                "nfsv4_no_domain_uids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, sends UIDs and GIDs without a domain name.",
                            "type": "boolean"
                        }
                    ]
                },
                "nfsv4_no_names": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, sends owners and groups as UIDs and GIDs.",
                            "type": "boolean"
                        }
                    ]
                },
                "nfsv4_replace_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, replaces the owner or group domain with an NFS domain name.",
                            "type": "boolean"
                        }
                    ]
                },
                "zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the access zones in which these settings apply.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/policies": {
        "DELETE_args": {
            "description": "Delete all antivirus scan policies.",
            "type": "object"
        },
        "GET_args": {
            "description": "List antivirus scan policies.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "description": "An antivirus scan policy.",
                        "properties": {
                            "description": {
                                "description": "A description for the policy.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the policy is enabled.",
                                "type": "boolean"
                            },
                            "force_run": {
                                "description": "Forces the scan to run regardless of whether the files were recently scanned.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A unique identifier for the policy.",
                                "type": "string"
                            },
                            "impact": {
                                "description": "The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "last_run": {
                                "description": "The epoch time of the last run of this policy.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the policy.",
                                "type": "string"
                            },
                            "paths": {
                                "description": "Paths to include in the scan.",
                                "items": {
                                    "pattern": "^/ifs.*",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "recursion_depth": {
                                "description": "The depth to recurse in directories.  The default of -1 gives unlimited recursion.",
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create new antivirus scan policies.",
            "type": "object"
        },
        "POST_input_schema": {
            "type": [
                {
                    "description": "An antivirus scan policy.",
                    "properties": {
                        "description": {
                            "description": "A description for the policy.",
                            "type": "string"
                        },
                        "enabled": {
                            "description": "Whether the policy is enabled.",
                            "type": "boolean"
                        },
                        "force_run": {
                            "description": "Forces the scan to run regardless of whether the files were recently scanned.",
                            "type": "boolean"
                        },
                        "impact": {
                            "description": "The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "name": {
                            "description": "The name of the policy.",
                            "required": true,
                            "type": "string"
                        },
                        "paths": {
                            "description": "Paths to include in the scan.",
                            "items": {
                                "pattern": "^/ifs.*",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "recursion_depth": {
                            "description": "The depth to recurse in directories.  The default of -1 gives unlimited recursion.",
                            "type": "integer"
                        },
                        "schedule": {
                            "description": "The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.",
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "items": {
                        "description": "An antivirus scan policy.",
                        "properties": {
                            "description": {
                                "description": "A description for the policy.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the policy is enabled.",
                                "type": "boolean"
                            },
                            "force_run": {
                                "description": "Forces the scan to run regardless of whether the files were recently scanned.",
                                "type": "boolean"
                            },
                            "impact": {
                                "description": "The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "paths": {
                                "description": "Paths to include in the scan.",
                                "items": {
                                    "pattern": "^/ifs.*",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "recursion_depth": {
                                "description": "The depth to recurse in directories.  The default of -1 gives unlimited recursion.",
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        },
        "POST_output_schema": {
            "type": [
                {
                    "properties": {
                        "id": {
                            "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        }
    },
    "/3/antivirus/policies/<NAME>": {
        "DELETE_args": {
            "description": "Delete an antivirus scan policy.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve one antivirus scan policy.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "description": "An antivirus scan policy.",
                        "properties": {
                            "description": {
                                "description": "A description for the policy.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the policy is enabled.",
                                "type": "boolean"
                            },
                            "force_run": {
                                "description": "Forces the scan to run regardless of whether the files were recently scanned.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A unique identifier for the policy.",
                                "type": "string"
                            },
                            "impact": {
                                "description": "The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "last_run": {
                                "description": "The epoch time of the last run of this policy.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the policy.",
                                "type": "string"
                            },
                            "paths": {
                                "description": "Paths to include in the scan.",
                                "items": {
                                    "pattern": "^/ifs.*",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "recursion_depth": {
                                "description": "The depth to recurse in directories.  The default of -1 gives unlimited recursion.",
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify an antivirus scan policy.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "An antivirus scan policy.",
            "properties": {
                "description": {
                    "description": "A description for the policy.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the policy is enabled.",
                    "type": "boolean"
                },
                "force_run": {
                    "description": "Forces the scan to run regardless of whether the files were recently scanned.",
                    "type": "boolean"
                },
                "impact": {
                    "description": "The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "The name of the policy.",
                    "type": "string"
                },
                "paths": {
                    "description": "Paths to include in the scan.",
                    "items": {
                        "pattern": "^/ifs.*",
                        "type": "string"
                    },
                    "type": "array"
                },
                "recursion_depth": {
                    "description": "The depth to recurse in directories.  The default of -1 gives unlimited recursion.",
                    "type": "integer"
                },
                "schedule": {
                    "description": "The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/quarantine/<PATH+>": {
        "GET_args": {
            "description": "Retrieve the quarantine status of the file at the specified path.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The quarantine status of a file in /ifs.",
            "properties": {
                "file": {
                    "description": "Path of this file, starting with /ifs.",
                    "required": true,
                    "type": "string"
                },
                "last_istag": {
                    "description": "The ICAP Service Tag (ISTag) recorded for this file during the last scan, or null if no tag was recorded.  For more information about ISTags, see https://tools.ietf.org/html/rfc3507.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "last_scan": {
                    "description": "The date and time this file was last scanned for viruses, as a UNIX timestamp.  If null, the file has never been scanned.",
                    "required": true,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "quarantined": {
                    "description": "If true, this file is quarantined.  If false, the file is not quarantined.",
                    "required": true,
                    "type": "boolean"
                },
                "scan_result": {
                    "description": "The result of the last scan on this file.  This string is usually one of: never_scanned, clean, quarantined, repaired, truncated, infected_no_action_taken, skipped_per_settings.  However, a longer string starting with 'unknown_status' and describing the details can also appear in uncommon edge cases.",
                    "required": true,
                    "type": "string"
                },
                "scan_status": {
                    "description": "The scanning status of this file.  If 'current', the file was scanned with the most up-to-date virus defintions.  If 'not_current', it has either not been scanned, been modified since the last scan, or the virus definitions are not current.",
                    "enum": [
                        "current",
                        "not_current"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\"quarantined\":true} to quarantine the file, and {\"quarantined\":false} to unquarantine the file.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "The quarantine status of a file in /ifs.",
            "properties": {
                "quarantined": {
                    "description": "If true, this file is quarantined.  If false, the file is not quarantined.",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/reports/scans": {
        "DELETE_args": {
            "description": "Delete antivirus scan reports, and any threat reports associated with those scans.",
            "properties": {
                "age": {
                    "description": "An amount of time in seconds. If present, only reports older than this age are deleted.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List antivirus scan reports.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "policy_id": {
                    "description": "If present, only reports for scans associated with this policy will be returned.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "status": {
                    "description": "If present, only scan reports with this status will be returned.",
                    "enum": [
                        "Finish",
                        "Succeeded",
                        "Failed",
                        "Cancelled",
                        "Started",
                        "Paused",
                        "Resumed",
                        "Pending"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for an antivirus scan.",
                        "properties": {
                            "bytes_sent": {
                                "description": "The number of bytes sent to the virus definition server to be scanned.",
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The length of time the job ran for.",
                                "type": "integer"
                            },
                            "end": {
                                "description": "The time the job ended.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "files": {
                                "description": "The number of file scanned.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for the report.",
                                "type": "string"
                            },
                            "infections": {
                                "description": "The number of infections found.",
                                "type": "integer"
                            },
                            "job_id": {
                                "description": "The ID of the job that ran the policy.  If the scan was manually run on a single file, this field will be null.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "policy_id": {
                                "description": "The id of the policy that this scan job executed.",
                                "type": "string"
                            },
                            "size": {
                                "description": "The cumulative size of the file scanned.",
                                "type": "integer"
                            },
                            "start": {
                                "description": "The time the job started.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "status": {
                                "description": "The state of the job.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/reports/scans/<ID>": {
        "DELETE_args": {
            "description": "Delete one antivirus scan report, and all of its associated threat reports.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve one antivirus scan report.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for an antivirus scan.",
                        "properties": {
                            "bytes_sent": {
                                "description": "The number of bytes sent to the virus definition server to be scanned.",
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The length of time the job ran for.",
                                "type": "integer"
                            },
                            "end": {
                                "description": "The time the job ended.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "files": {
                                "description": "The number of file scanned.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for the report.",
                                "type": "string"
                            },
                            "infections": {
                                "description": "The number of infections found.",
                                "type": "integer"
                            },
                            "job_id": {
                                "description": "The ID of the job that ran the policy.  If the scan was manually run on a single file, this field will be null.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "policy_id": {
                                "description": "The id of the policy that this scan job executed.",
                                "type": "string"
                            },
                            "size": {
                                "description": "The cumulative size of the file scanned.",
                                "type": "integer"
                            },
                            "start": {
                                "description": "The time the job started.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "status": {
                                "description": "The state of the job.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/reports/threats": {
        "GET_args": {
            "description": "List antivirus threat reports.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "file": {
                    "description": "If present, only returns threat reports for the given file.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "remediation": {
                    "description": "If present, only returns threat reports with the given remediation.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "scan_id": {
                    "description": "If present, only returns threat reports associated with the given scan report.",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for an antivirus threat.",
                        "properties": {
                            "file": {
                                "description": "The file that contained the threat.",
                                "type": "string"
                            },
                            "id": {
                                "description": "A unique identifier for the report.",
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The id of the policy that found this threat.",
                                "type": "string"
                            },
                            "remediation": {
                                "description": "The action that was taken to remediate the threat.",
                                "type": "string"
                            },
                            "scan_id": {
                                "description": "The id of the scan report this threat is associated with.",
                                "type": "string"
                            },
                            "threat": {
                                "description": "A description of the threat that was found.",
                                "type": "string"
                            },
                            "time": {
                                "description": "The time that the threat was found, in Unix epoch seconds.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/reports/threats/<ID>": {
        "GET_args": {
            "description": "Retrieve one antivirus threat report.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "description": "A report for an antivirus threat.",
                        "properties": {
                            "file": {
                                "description": "The file that contained the threat.",
                                "type": "string"
                            },
                            "id": {
                                "description": "A unique identifier for the report.",
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The id of the policy that found this threat.",
                                "type": "string"
                            },
                            "remediation": {
                                "description": "The action that was taken to remediate the threat.",
                                "type": "string"
                            },
                            "scan_id": {
                                "description": "The id of the scan report this threat is associated with.",
                                "type": "string"
                            },
                            "threat": {
                                "description": "A description of the threat that was found.",
                                "type": "string"
                            },
                            "time": {
                                "description": "The time that the threat was found, in Unix epoch seconds.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/scan": {
        "POST_args": {
            "description": "Manually scan a file.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Parameters for a manual antivirus scan.",
            "properties": {
                "file": {
                    "description": "The full path of the file to scan.",
                    "minLength": 1,
                    "required": true,
                    "type": "string"
                },
                "force_run": {
                    "description": "Forces the scan to run regardless of whether the files were recently scanned. The default value is true.",
                    "type": "boolean"
                },
                "policy": {
                    "description": "The ID of the policy to use for the scan. By default, the scan will use the MANUAL policy.",
                    "minLength": 1,
                    "type": "string"
                },
                "report_id": {
                    "description": "The ID for the report for this scan. A report ID will be generated if one is not provided.",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "The result of a manual antivirus scan.",
            "properties": {
                "report_id": {
                    "description": "The ID for the report for this scan. A report ID will be generated if one is not provided. ",
                    "type": "string"
                },
                "result": {
                    "description": "The result of the scan.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/servers": {
        "DELETE_args": {
            "description": "Delete all antivirus servers.",
            "type": "object"
        },
        "GET_args": {
            "description": "List antivirus servers.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "servers": {
                    "items": {
                        "description": "An ICAP server that contains virus definitions.",
                        "properties": {
                            "definitions": {
                                "description": "Virus definitions on the server.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "description": {
                                "description": "A description for the server.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the server is enabled.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A unique identifier for the server.",
                                "type": "string"
                            },
                            "status": {
                                "description": "The status of the server.",
                                "enum": [
                                    "active",
                                    "inactive",
                                    null
                                ]
                            },
                            "url": {
                                "description": "The icap url for the server.  This should have a format of: icap://host.domain:port/path",
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create new antivirus servers.",
            "type": "object"
        },
        "POST_input_schema": {
            "type": [
                {
                    "description": "An ICAP server that contains virus definitions.",
                    "properties": {
                        "description": {
                            "description": "A description for the server.",
                            "type": "string"
                        },
                        "enabled": {
                            "description": "Whether the server is enabled.",
                            "type": "boolean"
                        },
                        "url": {
                            "description": "The icap url for the server.  This should have a format of: icap://host.domain:port/path",
                            "minLength": 1,
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "items": {
                        "description": "An ICAP server that contains virus definitions.",
                        "properties": {
                            "description": {
                                "description": "A description for the server.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the server is enabled.",
                                "type": "boolean"
                            },
                            "url": {
                                "description": "The icap url for the server.  This should have a format of: icap://host.domain:port/path",
                                "minLength": 1,
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        },
        "POST_output_schema": {
            "type": [
                {
                    "properties": {
                        "id": {
                            "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        }
    },
    "/3/antivirus/servers/<ID+>": {
        "DELETE_args": {
            "description": "Delete an antivirus server entry.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve one antivirus server entry.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "servers": {
                    "items": {
                        "description": "An ICAP server that contains virus definitions.",
                        "properties": {
                            "definitions": {
                                "description": "Virus definitions on the server.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "description": {
                                "description": "A description for the server.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether the server is enabled.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A unique identifier for the server.",
                                "type": "string"
                            },
                            "status": {
                                "description": "The status of the server.",
                                "enum": [
                                    "active",
                                    "inactive",
                                    null
                                ]
                            },
                            "url": {
                                "description": "The icap url for the server.  This should have a format of: icap://host.domain:port/path",
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify an antivirus server entry.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "An ICAP server that contains virus definitions.",
            "properties": {
                "description": {
                    "description": "A description for the server.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the server is enabled.",
                    "type": "boolean"
                },
                "url": {
                    "description": "The icap url for the server.  This should have a format of: icap://host.domain:port/path",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/antivirus/settings": {
        "GET_args": {
            "description": "Retrieve the Antivirus settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Antivirus settings.",
                    "properties": {
                        "fail_open": {
                            "description": "Allow access when scanning fails.",
                            "type": "boolean"
                        },
                        "glob_filters": {
                            "description": "Glob patterns for leaf filenames.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "glob_filters_enabled": {
                            "description": "Enable glob filters.",
                            "type": "boolean"
                        },
                        "glob_filters_include": {
                            "description": "If true, only scan files matching a glob filter. If false, only scan files that don't match a glob filter.",
                            "type": "boolean"
                        },
                        "path_prefixes": {
                            "description": "Paths to include in realtime scans.",
                            "items": {
                                "pattern": "^/ifs.*",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "quarantine": {
                            "description": "Try to quarantine files when threats are found.",
                            "type": "boolean"
                        },
                        "repair": {
                            "description": "Try to repair files when threats are found.",
                            "type": "boolean"
                        },
                        "report_expiry": {
                            "description": "Amount of time in seconds until old reporting data is purged.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "scan_on_close": {
                            "description": "Scan files when apps close them.",
                            "type": "boolean"
                        },
                        "scan_on_open": {
                            "description": "Scan files on access.",
                            "type": "boolean"
                        },
                        "scan_size_maximum": {
                            "description": "Skip scanning files larger than this.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "service": {
                            "description": "Whether the antivirus service is enabled.",
                            "type": "boolean"
                        },
                        "truncate": {
                            "description": "Try to truncate files when threats are found.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Antivirus settings.",
            "properties": {
                "fail_open": {
                    "description": "Allow access when scanning fails.",
                    "type": "boolean"
                },
                "glob_filters": {
                    "description": "Glob patterns for leaf filenames.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "glob_filters_enabled": {
                    "description": "Enable glob filters.",
                    "type": "boolean"
                },
                "glob_filters_include": {
                    "description": "If true, only scan files matching a glob filter. If false, only scan files that don't match a glob filter.",
                    "type": "boolean"
                },
                "path_prefixes": {
                    "description": "Paths to include in realtime scans.",
                    "items": {
                        "pattern": "^/ifs.*",
                        "type": "string"
                    },
                    "type": "array"
                },
                "quarantine": {
                    "description": "Try to quarantine files when threats are found.",
                    "type": "boolean"
                },
                "repair": {
                    "description": "Try to repair files when threats are found.",
                    "type": "boolean"
                },
                "report_expiry": {
                    "description": "Amount of time in seconds until old reporting data is purged.",
                    "minimum": 0,
                    "type": "integer"
                },
                "scan_on_close": {
                    "description": "Scan files when apps close them.",
                    "type": "boolean"
                },
                "scan_on_open": {
                    "description": "Scan files on access.",
                    "type": "boolean"
                },
                "scan_size_maximum": {
                    "description": "Skip scanning files larger than this.",
                    "minimum": 0,
                    "type": "integer"
                },
                "service": {
                    "description": "Whether the antivirus service is enabled.",
                    "type": "boolean"
                },
                "truncate": {
                    "description": "Try to truncate files when threats are found.",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/audit/settings": {
        "GET_args": {
            "description": "View per-Access Zone Audit settings.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains audit settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Per-Access Zone Audit settings",
                    "properties": {
                        "audit_failure": {
                            "type": [
                                {
                                    "description": "Filter of protocol operations to Audit when they fail.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "audit_success": {
                            "type": [
                                {
                                    "description": "Filter of protocol operations to Audit when they succeed.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "syslog_audit_events": {
                            "type": [
                                {
                                    "description": "Filter of Audit operations to forward to syslog.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "syslog_forwarding_enabled": {
                            "type": [
                                {
                                    "description": "Enables forwarding of events to syslog.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify per-Access Zone Audit settings.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains audit settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Per-Access Zone Audit settings",
            "properties": {
                "audit_failure": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Filter of protocol operations to Audit when they fail.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "audit_success": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Filter of protocol operations to Audit when they succeed.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "syslog_audit_events": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Filter of Audit operations to forward to syslog.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "syslog_forwarding_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables forwarding of events to syslog.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/audit/settings/global": {
        "GET_args": {
            "description": "View Global Audit settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Settings for Audit.",
                    "properties": {
                        "audited_zones": {
                            "type": [
                                {
                                    "description": "Specifies zones that are audited when the protocol_auditing_enabled property is enabled.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "cee_log_time": {
                            "type": [
                                {
                                    "description": "Specifies that events past a certain date are forwarded by the audit CEE forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS'.",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "cee_server_uris": {
                            "type": [
                                {
                                    "description": "Specifies a list of Common Event Enabler (CEE) server URIs. Protocol audit logs are sent to these URIs for external processing.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "config_auditing_enabled": {
                            "type": [
                                {
                                    "description": "Specifies whether logging for API configuration changes are enabled.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "config_syslog_enabled": {
                            "type": [
                                {
                                    "description": "Specifies whether configuration audit syslog messages are forwarded.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "hostname": {
                            "type": [
                                {
                                    "description": "Specifies the hostname that is reported in protocol events from this cluster.",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "protocol_auditing_enabled": {
                            "type": [
                                {
                                    "description": "Specifies if logging for the I/O stream is enabled.",
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "syslog_log_time": {
                            "type": [
                                {
                                    "description": "Specifies that events past a specified date are forwarded by the audit syslog forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS' format",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify Global Audit settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Settings for Audit.",
            "properties": {
                "audited_zones": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies zones that are audited when the protocol_auditing_enabled property is enabled.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "cee_log_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies that events past a certain date are forwarded by the audit CEE forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS'.",
                            "type": "string"
                        }
                    ]
                },
                "cee_server_uris": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a list of Common Event Enabler (CEE) server URIs. Protocol audit logs are sent to these URIs for external processing.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "config_auditing_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies whether logging for API configuration changes are enabled.",
                            "type": "boolean"
                        }
                    ]
                },
                "config_syslog_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies whether configuration audit syslog messages are forwarded.",
                            "type": "boolean"
                        }
                    ]
                },
                "hostname": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the hostname that is reported in protocol events from this cluster.",
                            "type": "string"
                        }
                    ]
                },
                "protocol_auditing_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if logging for the I/O stream is enabled.",
                            "type": "boolean"
                        }
                    ]
                },
                "syslog_log_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies that events past a specified date are forwarded by the audit syslog forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS' format",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/auth/log-level": {
        "GET_args": {
            "description": "Get the current authentications service and netlogon logging level.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "level": {
                    "properties": {
                        "lsass-level": {
                            "description": "Valid auth logging levels",
                            "enum": [
                                "always",
                                "error",
                                "warning",
                                "info",
                                "verbose",
                                "debug",
                                "trace"
                            ],
                            "type": "string"
                        },
                        "netlogon-level": {
                            "description": "Valid auth logging levels",
                            "enum": [
                                "always",
                                "error",
                                "warning",
                                "info",
                                "verbose",
                                "debug",
                                "trace"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set the current authentication service and netlogon logging level.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "level": {
                    "description": "Valid auth logging levels",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/mapping/dump": {
        "GET_args": {
            "description": "Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.",
            "properties": {
                "nocreate": {
                    "description": "Idmap should attempt to create missing identity mappings.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "identities": {
                    "items": {
                        "description": "On-disk identity mapping entry",
                        "items": {
                            "type": [
                                "string",
                                "array"
                            ]
                        },
                        "type": "array"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/mapping/import": {
        "PUT_args": {
            "description": "Set or update a list of mappings between two personae.",
            "properties": {
                "replace": {
                    "description": "Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Optional zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "identities": {
                    "items": {
                        "description": "On-disk identity mapping entry",
                        "items": {
                            "type": [
                                "string",
                                "array"
                            ]
                        },
                        "type": "array"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ads": {
        "GET_args": {
            "description": "List all ADS providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "ads": {
                    "items": {
                        "description": "Specifies the properties for an ADS authentication provider.",
                        "properties": {
                            "allocate_gids": {
                                "description": "Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a user does not include a GID, the system may allocate one. ",
                                "type": "boolean"
                            },
                            "allocate_uids": {
                                "description": "Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a user does not include a UID, the system may allocate one.",
                                "type": "boolean"
                            },
                            "assume_default_domain": {
                                "description": "Enables lookup of unqualified user names in the primary domain.",
                                "type": "boolean"
                            },
                            "authentication": {
                                "description": "Enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "controller_time": {
                                "type": [
                                    {
                                        "description": "Specifies the current time for the domain controllers.",
                                        "type": "integer"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "create_home_directory": {
                                "description": "Automatically creates a home directory on the first login.",
                                "type": "boolean"
                            },
                            "domain_offline_alerts": {
                                "description": "Sends an alert if the domain goes offline.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Sets list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Sets list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "forest": {
                                "type": [
                                    {
                                        "description": "Specifies the Active Directory forest.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "hostname": {
                                "type": [
                                    {
                                        "description": "Specifies the fully qualified hostname stored in the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the ID of the Active Directory provider instance.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ignore_all_trusts": {
                                "description": "If set to true, ignores all trusted domains.",
                                "type": "boolean"
                            },
                            "ignored_trusted_domains": {
                                "description": "Includes trusted domains when 'ignore_all_trusts' is set to false.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "include_trusted_domains": {
                                "description": "Includes trusted domains when 'ignore_all_trusts' is set to true.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "instance": {
                                "description": "Specifies Active Directory provider instnace.",
                                "type": "string"
                            },
                            "ldap_sign_and_seal": {
                                "description": "Enables encryption and signing on LDAP requests.",
                                "type": "boolean"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "lookup_domains": {
                                "description": "Limits user and group lookups to the specified domains.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "lookup_groups": {
                                "description": "Looks up AD groups in other providers before allocating a group ID.",
                                "type": "boolean"
                            },
                            "lookup_normalize_groups": {
                                "description": "Normalizes AD group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "lookup_normalize_users": {
                                "description": "Normalize AD user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "lookup_users": {
                                "description": "Looks up AD users in other providers before allocating a user ID.",
                                "type": "boolean"
                            },
                            "machine_account": {
                                "type": [
                                    {
                                        "description": "Specifies the SAM account name of the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "machine_name": {
                                "description": "Specifies name to join AD as.",
                                "type": "string"
                            },
                            "machine_password_changes": {
                                "description": "Enables periodic changes of the machine password for security.",
                                "type": "boolean"
                            },
                            "machine_password_lifespan": {
                                "description": "Sets maximum age of a password in seconds.",
                                "maximum": 31536000,
                                "minimum": 3600,
                                "type": "integer"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the Active Directory provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "netbios_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the NetBIOS domain name associated with the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "node_dc_affinity": {
                                "type": [
                                    {
                                        "description": "Specifies the domain controller for which the node has affinity.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "node_dc_affinity_timeout": {
                                "type": [
                                    {
                                        "description": "Specifies the timeout for the domain controller for which the local node has affinity.",
                                        "type": "integer"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "nss_enumeration": {
                                "description": "Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.",
                                "type": "boolean"
                            },
                            "primary_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the AD domain to which the provider is joined.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "restrict_findable": {
                                "description": "Check the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "sfu_support": {
                                "description": "Specifies whether to support RFC 2307 attributes on ADS domain controllers.",
                                "enum": [
                                    "none",
                                    "rfc2307"
                                ],
                                "type": "string"
                            },
                            "site": {
                                "type": [
                                    {
                                        "description": "Specifies the site for the Active Directory.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "store_sfu_mappings": {
                                "description": "Stores SFU mappings permanently in the ID mapper.",
                                "type": "boolean"
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If set to true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new ADS provider.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the properties for an ADS authentication provider.",
            "properties": {
                "account": {
                    "description": "Specifies the machine account name when creating a SAM account with Active Directory. The default cluster name is called 'default'.",
                    "type": "string"
                },
                "allocate_gids": {
                    "description": "Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a user does not include a GID, the system may allocate one. ",
                    "type": "boolean"
                },
                "allocate_uids": {
                    "description": "Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a user does not include a UID, the system may allocate one.",
                    "type": "boolean"
                },
                "assume_default_domain": {
                    "description": "Enables lookup of unqualified user names in the primary domain.",
                    "type": "boolean"
                },
                "authentication": {
                    "description": "Enables authentication and identity management through the authentication provider.",
                    "type": "boolean"
                },
                "check_online_interval": {
                    "description": "Specifies the time in seconds between provider online checks.",
                    "type": "integer"
                },
                "controller_time": {
                    "description": "Specifies the current time for the domain controllers.",
                    "type": "integer"
                },
                "create_home_directory": {
                    "description": "Automatically creates a home directory on the first login.",
                    "type": "boolean"
                },
                "dns_domain": {
                    "description": "Specifies the DNS search domain. Set this parameter if the DNS search domain has a unique name or address.",
                    "type": "string"
                },
                "domain_offline_alerts": {
                    "description": "Sends an alert if the domain goes offline.",
                    "type": "boolean"
                },
                "findable_groups": {
                    "description": "Sets list of groups that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "findable_users": {
                    "description": "Sets list of users that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "groupnet": {
                    "description": "Groupnet identifier.",
                    "type": "string"
                },
                "home_directory_template": {
                    "description": "Specifies the path to the home directory template.",
                    "type": "string"
                },
                "ignore_all_trusts": {
                    "description": "If set to true, ignores all trusted domains.",
                    "type": "boolean"
                },
                "ignored_trusted_domains": {
                    "description": "Includes trusted domains when 'ignore_all_trusts' is set to false.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "include_trusted_domains": {
                    "description": "Includes trusted domains when 'ignore_all_trusts' is set to true.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "instance": {
                    "description": "Specifies Active Directory provider instnace.",
                    "type": "string"
                },
                "kerberos_hdfs_spn": {
                    "description": "Determines if connecting through HDFS with Kerberos.",
                    "type": "boolean"
                },
                "kerberos_nfs_spn": {
                    "description": "Determines if connecting through NFS with Kerberos.",
                    "type": "boolean"
                },
                "ldap_sign_and_seal": {
                    "description": "Enables encryption and signing on LDAP requests.",
                    "type": "boolean"
                },
                "login_shell": {
                    "description": "Specifies the login shell path.",
                    "type": "string"
                },
                "lookup_domains": {
                    "description": "Limits user and group lookups to the specified domains.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lookup_groups": {
                    "description": "Looks up AD groups in other providers before allocating a group ID.",
                    "type": "boolean"
                },
                "lookup_normalize_groups": {
                    "description": "Normalizes AD group names to lowercase before look up.",
                    "type": "boolean"
                },
                "lookup_normalize_users": {
                    "description": "Normalize AD user names to lowercase before look up.",
                    "type": "boolean"
                },
                "lookup_users": {
                    "description": "Looks up AD users in other providers before allocating a user ID.",
                    "type": "boolean"
                },
                "machine_name": {
                    "description": "Specifies name to join AD as.",
                    "type": "string"
                },
                "machine_password_changes": {
                    "description": "Enables periodic changes of the machine password for security.",
                    "type": "boolean"
                },
                "machine_password_lifespan": {
                    "description": "Sets maximum age of a password in seconds.",
                    "maximum": 31536000,
                    "minimum": 3600,
                    "type": "integer"
                },
                "name": {
                    "description": "Specifies the Active Directory provider name.",
                    "required": true,
                    "type": "string"
                },
                "node_dc_affinity": {
                    "description": "Specifies the domain controller for which the node has affinity.",
                    "type": "string"
                },
                "node_dc_affinity_timeout": {
                    "description": "Specifies the timeout for the domain controller for which the local node has affinity.",
                    "type": "integer"
                },
                "nss_enumeration": {
                    "description": "Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.",
                    "type": "boolean"
                },
                "organizational_unit": {
                    "description": "Specifies the organizational unit.",
                    "type": "string"
                },
                "password": {
                    "description": "Specifies the password used during domain join.",
                    "required": true,
                    "type": "string"
                },
                "restrict_findable": {
                    "description": "Check the provider for filtered lists of findable and unfindable users and groups.",
                    "type": "boolean"
                },
                "sfu_support": {
                    "description": "Specifies whether to support RFC 2307 attributes on ADS domain controllers.",
                    "enum": [
                        "none",
                        "rfc2307"
                    ],
                    "type": "string"
                },
                "store_sfu_mappings": {
                    "description": "Stores SFU mappings permanently in the ID mapper.",
                    "type": "boolean"
                },
                "unfindable_groups": {
                    "description": "Specifies groups that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unfindable_users": {
                    "description": "Specifies users that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "user": {
                    "description": "Specifies the user name that has permission to join a machine to the given domain.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ads/<ID>": {
        "DELETE_args": {
            "description": "Delete the ADS provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the ADS provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "ads": {
                    "items": {
                        "description": "Specifies the properties for an ADS authentication provider.",
                        "properties": {
                            "allocate_gids": {
                                "description": "Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a user does not include a GID, the system may allocate one. ",
                                "type": "boolean"
                            },
                            "allocate_uids": {
                                "description": "Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a user does not include a UID, the system may allocate one.",
                                "type": "boolean"
                            },
                            "assume_default_domain": {
                                "description": "Enables lookup of unqualified user names in the primary domain.",
                                "type": "boolean"
                            },
                            "authentication": {
                                "description": "Enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "controller_time": {
                                "type": [
                                    {
                                        "description": "Specifies the current time for the domain controllers.",
                                        "type": "integer"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "create_home_directory": {
                                "description": "Automatically creates a home directory on the first login.",
                                "type": "boolean"
                            },
                            "domain_offline_alerts": {
                                "description": "Sends an alert if the domain goes offline.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Sets list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Sets list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "forest": {
                                "type": [
                                    {
                                        "description": "Specifies the Active Directory forest.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "hostname": {
                                "type": [
                                    {
                                        "description": "Specifies the fully qualified hostname stored in the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the ID of the Active Directory provider instance.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ignore_all_trusts": {
                                "description": "If set to true, ignores all trusted domains.",
                                "type": "boolean"
                            },
                            "ignored_trusted_domains": {
                                "description": "Includes trusted domains when 'ignore_all_trusts' is set to false.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "include_trusted_domains": {
                                "description": "Includes trusted domains when 'ignore_all_trusts' is set to true.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "instance": {
                                "description": "Specifies Active Directory provider instnace.",
                                "type": "string"
                            },
                            "ldap_sign_and_seal": {
                                "description": "Enables encryption and signing on LDAP requests.",
                                "type": "boolean"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "lookup_domains": {
                                "description": "Limits user and group lookups to the specified domains.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "lookup_groups": {
                                "description": "Looks up AD groups in other providers before allocating a group ID.",
                                "type": "boolean"
                            },
                            "lookup_normalize_groups": {
                                "description": "Normalizes AD group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "lookup_normalize_users": {
                                "description": "Normalize AD user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "lookup_users": {
                                "description": "Looks up AD users in other providers before allocating a user ID.",
                                "type": "boolean"
                            },
                            "machine_account": {
                                "type": [
                                    {
                                        "description": "Specifies the SAM account name of the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "machine_name": {
                                "description": "Specifies name to join AD as.",
                                "type": "string"
                            },
                            "machine_password_changes": {
                                "description": "Enables periodic changes of the machine password for security.",
                                "type": "boolean"
                            },
                            "machine_password_lifespan": {
                                "description": "Sets maximum age of a password in seconds.",
                                "maximum": 31536000,
                                "minimum": 3600,
                                "type": "integer"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the Active Directory provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "netbios_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the NetBIOS domain name associated with the machine account.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "node_dc_affinity": {
                                "type": [
                                    {
                                        "description": "Specifies the domain controller for which the node has affinity.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "node_dc_affinity_timeout": {
                                "type": [
                                    {
                                        "description": "Specifies the timeout for the domain controller for which the local node has affinity.",
                                        "type": "integer"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "nss_enumeration": {
                                "description": "Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.",
                                "type": "boolean"
                            },
                            "primary_domain": {
                                "type": [
                                    {
                                        "description": "Specifies the AD domain to which the provider is joined.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "recommended_spns": {
                                "description": "Configuration recommended SPNs.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "restrict_findable": {
                                "description": "Check the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "sfu_support": {
                                "description": "Specifies whether to support RFC 2307 attributes on ADS domain controllers.",
                                "enum": [
                                    "none",
                                    "rfc2307"
                                ],
                                "type": "string"
                            },
                            "site": {
                                "type": [
                                    {
                                        "description": "Specifies the site for the Active Directory.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "spns": {
                                "description": "Currently configured SPNs.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "store_sfu_mappings": {
                                "description": "Stores SFU mappings permanently in the ID mapper.",
                                "type": "boolean"
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If set to true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the ADS provider.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for an ADS authentication provider.",
            "properties": {
                "allocate_gids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a user does not include a GID, the system may allocate one. ",
                            "type": "boolean"
                        }
                    ]
                },
                "allocate_uids": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a user does not include a UID, the system may allocate one.",
                            "type": "boolean"
                        }
                    ]
                },
                "assume_default_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables lookup of unqualified user names in the primary domain.",
                            "type": "boolean"
                        }
                    ]
                },
                "authentication": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables authentication and identity management through the authentication provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "check_online_interval": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the time in seconds between provider online checks.",
                            "type": "integer"
                        }
                    ]
                },
                "controller_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the current time for the domain controllers.",
                            "type": "integer"
                        }
                    ]
                },
                "create_home_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically creates a home directory on the first login.",
                            "type": "boolean"
                        }
                    ]
                },
                "domain_controller": {
                    "description": "Specifies the domain controller to which the authentication service should send requests",
                    "type": "string"
                },
                "domain_offline_alerts": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sends an alert if the domain goes offline.",
                            "type": "boolean"
                        }
                    ]
                },
                "findable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets list of groups that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "findable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets list of users that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "home_directory_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the home directory template.",
                            "type": "string"
                        }
                    ]
                },
                "ignore_all_trusts": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If set to true, ignores all trusted domains.",
                            "type": "boolean"
                        }
                    ]
                },
                "ignored_trusted_domains": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Includes trusted domains when 'ignore_all_trusts' is set to false.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "include_trusted_domains": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Includes trusted domains when 'ignore_all_trusts' is set to true.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "instance": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies Active Directory provider instnace.",
                            "type": "string"
                        }
                    ]
                },
                "ldap_sign_and_seal": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables encryption and signing on LDAP requests.",
                            "type": "boolean"
                        }
                    ]
                },
                "login_shell": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the login shell path.",
                            "type": "string"
                        }
                    ]
                },
                "lookup_domains": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Limits user and group lookups to the specified domains.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "lookup_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Looks up AD groups in other providers before allocating a group ID.",
                            "type": "boolean"
                        }
                    ]
                },
                "lookup_normalize_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes AD group names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "lookup_normalize_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalize AD user names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "lookup_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Looks up AD users in other providers before allocating a user ID.",
                            "type": "boolean"
                        }
                    ]
                },
                "machine_name": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies name to join AD as.",
                            "type": "string"
                        }
                    ]
                },
                "machine_password_changes": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables periodic changes of the machine password for security.",
                            "type": "boolean"
                        }
                    ]
                },
                "machine_password_lifespan": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets maximum age of a password in seconds.",
                            "maximum": 31536000,
                            "minimum": 3600,
                            "type": "integer"
                        }
                    ]
                },
                "node_dc_affinity": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain controller for which the node has affinity.",
                            "type": "string"
                        }
                    ]
                },
                "node_dc_affinity_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the timeout for the domain controller for which the local node has affinity.",
                            "type": "integer"
                        }
                    ]
                },
                "nss_enumeration": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.",
                            "type": "boolean"
                        }
                    ]
                },
                "password": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the password used during domain join.",
                            "type": "string"
                        }
                    ]
                },
                "reset_schannel": {
                    "description": "Resets the secure channel to the primary domain.",
                    "type": "boolean"
                },
                "restrict_findable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Check the provider for filtered lists of findable and unfindable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "sfu_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies whether to support RFC 2307 attributes on ADS domain controllers.",
                            "enum": [
                                "none",
                                "rfc2307"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "spns": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Currently configured SPNs.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "store_sfu_mappings": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Stores SFU mappings permanently in the ID mapper.",
                            "type": "boolean"
                        }
                    ]
                },
                "unfindable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies groups that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unfindable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies users that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "user": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the user name that has permission to join a machine to the given domain.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ads/<ID>/domains": {
        "GET_args": {
            "description": "List all ADS domains.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domains": {
                    "items": {
                        "description": "Specifies properties for trusted domains of configured ADS providers.",
                        "properties": {
                            "client_site": {
                                "description": "The Nodes Site.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_address": {
                                "description": "Specifies the address for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_name": {
                                "description": "Specifies the name for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_site": {
                                "description": "Specifies the site for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the name of the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "guid": {
                                "description": "Specifies the globally unique ID for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Specifies a unique identifier for every domain returned.",
                                "type": "string"
                            },
                            "netbios_name": {
                                "description": "Specifies the NetBIOS name for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security ID for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "status": {
                                "description": "Specifies the status of the domain.",
                                "type": "string"
                            },
                            "trust_type": {
                                "description": "Specifies the type of trust for this domain. Options include 'primary', 'unknown', 'external', and 'forest'.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ads/<ID>/domains/<ADS-DOMAIN>": {
        "GET_args": {
            "description": "Retrieve the ADS domain information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "domains": {
                    "items": {
                        "description": "Specifies properties for trusted domains of configured ADS providers.",
                        "properties": {
                            "client_site": {
                                "description": "The Nodes Site.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_address": {
                                "description": "Specifies the address for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_name": {
                                "description": "Specifies the name for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "dc_site": {
                                "description": "Specifies the site for the domain controller.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "domain": {
                                "description": "Specifies the name of the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "guid": {
                                "description": "Specifies the globally unique ID for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Specifies a unique identifier for every domain returned.",
                                "type": "string"
                            },
                            "netbios_name": {
                                "description": "Specifies the NetBIOS name for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "sid": {
                                "description": "Specifies the security ID for the domain.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "status": {
                                "description": "Specifies the status of the domain.",
                                "type": "string"
                            },
                            "trust_type": {
                                "description": "Specifies the type of trust for this domain. Options include 'primary', 'unknown', 'external', and 'forest'.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/krb5": {
        "GET_args": {
            "description": "List all KRB5 providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "krb5": {
                    "items": {
                        "description": "Specifies properties for the Kerberos authentication provider.",
                        "properties": {
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the Kerberos provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "keytab_entries": {
                                "type": [
                                    {
                                        "description": "Specifies the key information for the Kerberos SPNs.",
                                        "items": {
                                            "description": "Krb5 SPN Key info",
                                            "properties": {
                                                "encryption": {
                                                    "description": "Specifies the encryption types.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "kvno": {
                                                    "description": "Specifies the version number of the SPN key.",
                                                    "type": "integer"
                                                },
                                                "spn": {
                                                    "description": "Specifies the Service Principal Name (SPN).",
                                                    "type": "string"
                                                },
                                                "timestamp": {
                                                    "description": "Specifies the time the SPN key was created.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "keytab_file": {
                                "description": "Specifies the path to a keytab file to import.",
                                "type": "string"
                            },
                            "manual_keying": {
                                "description": "If true, keys are managed manually. If false, keys are managed through kadmin.",
                                "type": "boolean"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the Kerberos provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "password": {
                                "type": [
                                    {
                                        "description": "Specifies the Kerberos provider password.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "description": "Specifies the name of realm.",
                                "type": "string"
                            },
                            "recommended_spns": {
                                "type": [
                                    {
                                        "description": "Specifies the recommended SPNs.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "status": {
                                "description": "Specifies the status of the provider.",
                                "type": "string"
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "user": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the user that performs kadmin tasks.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new KRB5 provider.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for the Kerberos authentication provider.",
            "properties": {
                "groupnet": {
                    "description": "Groupnet identifier.",
                    "type": "string"
                },
                "keytab_entries": {
                    "type": [
                        {
                            "description": "Specifies the key information for the Kerberos SPN.",
                            "items": {
                                "description": "Krb5 SPN Key info",
                                "properties": {
                                    "encryption": {
                                        "description": "Specifies the encryption types.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "kvno": {
                                        "description": "Specifies the version number of the SPN key.",
                                        "type": "integer"
                                    },
                                    "spn": {
                                        "description": "Specifies the Service Principal Name (SPN).",
                                        "type": "string"
                                    },
                                    "timestamp": {
                                        "description": "Specifies the time the SPN key was created.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "keytab_file": {
                    "description": "Specifies the path to a keytab file to import.",
                    "type": "string"
                },
                "manual_keying": {
                    "type": [
                        {
                            "description": "If true, keys are managed manually. If false, keys are managed through kadmin.",
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the Kerberos provider name.",
                    "type": "string"
                },
                "password": {
                    "description": "Specifies the Kerberos provider password.",
                    "type": "string"
                },
                "realm": {
                    "description": "Specifies the name of realm.",
                    "required": true,
                    "type": "string"
                },
                "user": {
                    "description": "Specifies the name of the user that performs kadmin tasks.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/krb5/<ID>": {
        "DELETE_args": {
            "description": "Delete the KRB5 provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the KRB5 provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "krb5": {
                    "items": {
                        "description": "Specifies properties for the Kerberos authentication provider.",
                        "properties": {
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the Kerberos provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "keytab_entries": {
                                "type": [
                                    {
                                        "description": "Specifies the key information for the Kerberos SPNs.",
                                        "items": {
                                            "description": "Krb5 SPN Key info",
                                            "properties": {
                                                "encryption": {
                                                    "description": "Specifies the encryption types.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "kvno": {
                                                    "description": "Specifies the version number of the SPN key.",
                                                    "type": "integer"
                                                },
                                                "spn": {
                                                    "description": "Specifies the Service Principal Name (SPN).",
                                                    "type": "string"
                                                },
                                                "timestamp": {
                                                    "description": "Specifies the time the SPN key was created.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "keytab_file": {
                                "description": "Specifies the path to a keytab file to import.",
                                "type": "string"
                            },
                            "manual_keying": {
                                "description": "If true, keys are managed manually. If false, keys are managed through kadmin.",
                                "type": "boolean"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the Kerberos provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "realm": {
                                "description": "Specifies the name of realm.",
                                "type": "string"
                            },
                            "recommended_spns": {
                                "type": [
                                    {
                                        "description": "Specifies the recommended SPNs.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "status": {
                                "description": "Specifies the status of the provider.",
                                "type": "string"
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "user": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the user that performs kadmin tasks.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the KRB5 provider.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies properties for the Kerberos authentication provider.",
            "properties": {
                "keytab_entries": {
                    "description": "Specifies the key information for the Kerberos SPNs.",
                    "items": {
                        "description": "Krb5 SPN Key info",
                        "properties": {
                            "encryption": {
                                "description": "Specifies the encryption types.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "kvno": {
                                "description": "Specifies the version number of the SPN key.",
                                "type": "integer"
                            },
                            "spn": {
                                "description": "Specifies the Service Principal Name (SPN).",
                                "type": "string"
                            },
                            "timestamp": {
                                "description": "Specifies the time the SPN key was created.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "keytab_file": {
                    "description": "Specifies the path to a keytab file to import.",
                    "type": "string"
                },
                "manual_keying": {
                    "description": "If true, keys are managed manually. If false, keys are managed through kadmin.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Specifies the Kerberos provider name.",
                    "type": "string"
                },
                "password": {
                    "description": "Specifies the Kerberos provider password.",
                    "type": "string"
                },
                "realm": {
                    "description": "Specifies the name of realm.",
                    "type": "string"
                },
                "status": {
                    "description": "Specifies the status of the provider.",
                    "type": "string"
                },
                "user": {
                    "description": "Specifies the name of the user that performs kadmin tasks.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ldap": {
        "GET_args": {
            "description": "List all LDAP providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "ldap": {
                    "items": {
                        "description": "Specifies the properties for the LDAP authentication provider.",
                        "properties": {
                            "alternate_security_identities_attribute": {
                                "description": "Specifies the attribute name used when searching for alternate security identities.",
                                "type": "string"
                            },
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "balance_servers": {
                                "description": "If true, connects the provider to a random server.",
                                "type": "boolean"
                            },
                            "base_dn": {
                                "description": "Specifies the root of the tree in which to search identities.",
                                "type": "string"
                            },
                            "bind_dn": {
                                "description": "Specifies the distinguished name for binding to the LDAP server.",
                                "type": "string"
                            },
                            "bind_mechanism": {
                                "description": "Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.",
                                "enum": [
                                    "simple",
                                    "gssapi",
                                    "digest-md5"
                                ],
                                "type": "string"
                            },
                            "bind_timeout": {
                                "description": "Specifies the timeout in seconds when binding to an LDAP server.",
                                "type": "integer"
                            },
                            "certificate_authority_file": {
                                "description": "Specifies the path to the root certificates file.",
                                "type": "string"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "cn_attribute": {
                                "description": "Specifies the canonical name.",
                                "type": "string"
                            },
                            "create_home_directory": {
                                "description": "Automatically create the home directory on the first login.",
                                "type": "boolean"
                            },
                            "crypt_password_attribute": {
                                "description": "Specifies the hashed password value.",
                                "type": "string"
                            },
                            "email_attribute": {
                                "description": "Specifies the LDAP Email attribute.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "If true, enables the LDAP provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "If true, allows the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "If true, allows the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "gecos_attribute": {
                                "description": "Specifies the LDAP GECOS attribute.",
                                "type": "string"
                            },
                            "gid_attribute": {
                                "description": "Specifies the LDAP GID attribute.",
                                "type": "string"
                            },
                            "group_base_dn": {
                                "description": "Specifies the distinguished name of the entry where LDAP searches for groups are started.",
                                "type": "string"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which groups are qualified.",
                                "type": "string"
                            },
                            "group_filter": {
                                "description": "Specifies the LDAP filter for group objects.",
                                "type": "string"
                            },
                            "group_members_attribute": {
                                "description": "Specifies the LDAP Group Members attribute.",
                                "type": "string"
                            },
                            "group_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "homedir_attribute": {
                                "description": "Specifies the LDAP Homedir attribute.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the ID of the LDAP provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ignore_tls_errors": {
                                "description": "If true, continues over secure connections even if identity checks fail.",
                                "type": "boolean"
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "member_of_attribute": {
                                "description": "Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.",
                                "type": "string"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the LDAP provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "name_attribute": {
                                "description": "Specifies the LDAP UID attribute, which is used as the login name.",
                                "type": "string"
                            },
                            "netgroup_base_dn": {
                                "description": "Specifies the distinguished name of the entry where LDAP searches for netgroups are started.",
                                "type": "string"
                            },
                            "netgroup_filter": {
                                "description": "Specifies the LDAP filter for netgroup objects.",
                                "type": "string"
                            },
                            "netgroup_members_attribute": {
                                "description": "Specifies the LDAP Netgroup Members attribute.",
                                "type": "string"
                            },
                            "netgroup_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "netgroup_triple_attribute": {
                                "description": "Specifies the LDAP Netgroup Triple attribute.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "nt_password_attribute": {
                                "description": "Specifies the LDAP NT Password attribute.",
                                "type": "string"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the provider domain.",
                                "type": "string"
                            },
                            "require_secure_connection": {
                                "description": "Determines whether to continue over a non-TLS connection.",
                                "type": "boolean"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "search_scope": {
                                "description": "Specifies the default depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "search_timeout": {
                                "description": "Specifies the search timeout period in seconds.",
                                "type": "integer"
                            },
                            "server_uris": {
                                "description": "Specifies the server URIs.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "shell_attribute": {
                                "description": "Specifies the the LDAP Shell attribute.",
                                "type": "string"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "uid_attribute": {
                                "description": "Specifies the the LDAP UID Number attribute.",
                                "type": "string"
                            },
                            "unfindable_groups": {
                                "description": "Specifies the groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unique_group_members_attribute": {
                                "description": "Sets the LDAP Unique Group Members attribute.",
                                "type": "string"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_base_dn": {
                                "description": "Specifies the distinguished name of the entry at which to start LDAP searches for users.",
                                "type": "string"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            },
                            "user_filter": {
                                "description": "Specifies the LDAP filter for user objects.",
                                "type": "string"
                            },
                            "user_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new LDAP provider.",
            "properties": {
                "force": {
                    "description": "Ignore unresolvable server URIs.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the properties for the LDAP authentication provider.",
            "properties": {
                "alternate_security_identities_attribute": {
                    "description": "Specifies the attribute name used when searching for alternate security identities.",
                    "type": "string"
                },
                "authentication": {
                    "description": "If true, enables authentication and identity management through the authentication provider.",
                    "type": "boolean"
                },
                "balance_servers": {
                    "description": "If true, connects the provider to a random server.",
                    "type": "boolean"
                },
                "base_dn": {
                    "description": "Specifies the root of the tree in which to search identities.",
                    "required": true,
                    "type": "string"
                },
                "bind_dn": {
                    "description": "Specifies the distinguished name for binding to the LDAP server.",
                    "type": "string"
                },
                "bind_mechanism": {
                    "description": "Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.",
                    "enum": [
                        "simple",
                        "gssapi",
                        "digest-md5"
                    ],
                    "type": "string"
                },
                "bind_password": {
                    "description": "Specifies the password for the distinguished name for binding to the LDAP server.",
                    "type": "string"
                },
                "bind_timeout": {
                    "description": "Specifies the timeout in seconds when binding to an LDAP server.",
                    "type": "integer"
                },
                "certificate_authority_file": {
                    "description": "Specifies the path to the root certificates file.",
                    "type": "string"
                },
                "check_online_interval": {
                    "description": "Specifies the time in seconds between provider online checks.",
                    "type": "integer"
                },
                "cn_attribute": {
                    "description": "Specifies the canonical name.",
                    "type": "string"
                },
                "create_home_directory": {
                    "description": "Automatically create the home directory on the first login.",
                    "type": "boolean"
                },
                "crypt_password_attribute": {
                    "description": "Specifies the hashed password value.",
                    "type": "string"
                },
                "email_attribute": {
                    "description": "Specifies the LDAP Email attribute.",
                    "type": "string"
                },
                "enabled": {
                    "description": "If true, enables the LDAP provider.",
                    "type": "boolean"
                },
                "enumerate_groups": {
                    "description": "If true, allows the provider to enumerate groups.",
                    "type": "boolean"
                },
                "enumerate_users": {
                    "description": "If true, allows the provider to enumerate users.",
                    "type": "boolean"
                },
                "findable_groups": {
                    "description": "Specifies the list of groups that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "findable_users": {
                    "description": "Specifies the list of users that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gecos_attribute": {
                    "description": "Specifies the LDAP GECOS attribute.",
                    "type": "string"
                },
                "gid_attribute": {
                    "description": "Specifies the LDAP GID attribute.",
                    "type": "string"
                },
                "group_base_dn": {
                    "description": "Specifies the distinguished name of the entry where LDAP searches for groups are started.",
                    "type": "string"
                },
                "group_domain": {
                    "description": "Specifies the domain for this provider through which groups are qualified.",
                    "type": "string"
                },
                "group_filter": {
                    "description": "Specifies the LDAP filter for group objects.",
                    "type": "string"
                },
                "group_members_attribute": {
                    "description": "Specifies the LDAP Group Members attribute.",
                    "type": "string"
                },
                "group_search_scope": {
                    "description": "Specifies the depth from the base DN to perform LDAP searches.",
                    "enum": [
                        "default",
                        "base",
                        "onelevel",
                        "subtree",
                        "children"
                    ],
                    "type": "string"
                },
                "groupnet": {
                    "description": "Groupnet identifier.",
                    "type": "string"
                },
                "home_directory_template": {
                    "description": "Specifies the path to the home directory template.",
                    "type": "string"
                },
                "homedir_attribute": {
                    "description": "Specifies the LDAP Homedir attribute.",
                    "type": "string"
                },
                "ignore_tls_errors": {
                    "description": "If true, continues over secure connections even if identity checks fail.",
                    "type": "boolean"
                },
                "listable_groups": {
                    "description": "Specifies the groups that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "listable_users": {
                    "description": "Specifies the users that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "login_shell": {
                    "description": "Specifies the login shell path.",
                    "type": "string"
                },
                "member_of_attribute": {
                    "description": "Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the name of the LDAP provider.",
                    "required": true,
                    "type": "string"
                },
                "name_attribute": {
                    "description": "Specifies the LDAP UID attribute, which is used as the login name.",
                    "type": "string"
                },
                "netgroup_base_dn": {
                    "description": "Specifies the distinguished name of the entry where LDAP searches for netgroups are started.",
                    "type": "string"
                },
                "netgroup_filter": {
                    "description": "Specifies the LDAP filter for netgroup objects.",
                    "type": "string"
                },
                "netgroup_members_attribute": {
                    "description": "Specifies the LDAP Netgroup Members attribute.",
                    "type": "string"
                },
                "netgroup_search_scope": {
                    "description": "Specifies the depth from the base DN to perform LDAP searches.",
                    "enum": [
                        "default",
                        "base",
                        "onelevel",
                        "subtree",
                        "children"
                    ],
                    "type": "string"
                },
                "netgroup_triple_attribute": {
                    "description": "Specifies the LDAP Netgroup Triple attribute.",
                    "type": "string"
                },
                "normalize_groups": {
                    "description": "Normalizes group names to lowercase before look up.",
                    "type": "boolean"
                },
                "normalize_users": {
                    "description": "Normalizes user names to lowercase before look up.",
                    "type": "boolean"
                },
                "nt_password_attribute": {
                    "description": "Specifies the LDAP NT Password attribute.",
                    "type": "string"
                },
                "ntlm_support": {
                    "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                    "enum": [
                        "all",
                        "v2only",
                        "none"
                    ],
                    "type": "string"
                },
                "provider_domain": {
                    "description": "Specifies the provider domain.",
                    "type": "string"
                },
                "require_secure_connection": {
                    "description": "Determines whether to continue over a non-TLS connection.",
                    "type": "boolean"
                },
                "restrict_findable": {
                    "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                    "type": "boolean"
                },
                "restrict_listable": {
                    "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                    "type": "boolean"
                },
                "search_scope": {
                    "description": "Specifies the default depth from the base DN to perform LDAP searches.",
                    "enum": [
                        "base",
                        "onelevel",
                        "subtree",
                        "children"
                    ],
                    "type": "string"
                },
                "search_timeout": {
                    "description": "Specifies the search timeout period in seconds.",
                    "type": "integer"
                },
                "server_uris": {
                    "description": "Specifies the server URIs.",
                    "items": {
                        "type": "string"
                    },
                    "required": true,
                    "type": "array"
                },
                "shell_attribute": {
                    "description": "Specifies the the LDAP Shell attribute.",
                    "type": "string"
                },
                "uid_attribute": {
                    "description": "Specifies the the LDAP UID Number attribute.",
                    "type": "string"
                },
                "unfindable_groups": {
                    "description": "Specifies the groups that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unfindable_users": {
                    "description": "Specifies users that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unique_group_members_attribute": {
                    "description": "Sets the LDAP Unique Group Members attribute.",
                    "type": "string"
                },
                "unlistable_groups": {
                    "description": "Specifies a group that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unlistable_users": {
                    "description": "Specifies a user that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "user_base_dn": {
                    "description": "Specifies the distinguished name of the entry at which to start LDAP searches for users.",
                    "type": "string"
                },
                "user_domain": {
                    "description": "Specifies the domain for this provider through which users are qualified.",
                    "type": "string"
                },
                "user_filter": {
                    "description": "Specifies the LDAP filter for user objects.",
                    "type": "string"
                },
                "user_search_scope": {
                    "description": "Specifies the depth from the base DN to perform LDAP searches.",
                    "enum": [
                        "default",
                        "base",
                        "onelevel",
                        "subtree",
                        "children"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/ldap/<ID>": {
        "DELETE_args": {
            "description": "Delete the LDAP provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the LDAP provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "ldap": {
                    "items": {
                        "description": "Specifies the properties for the LDAP authentication provider.",
                        "properties": {
                            "alternate_security_identities_attribute": {
                                "description": "Specifies the attribute name used when searching for alternate security identities.",
                                "type": "string"
                            },
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "balance_servers": {
                                "description": "If true, connects the provider to a random server.",
                                "type": "boolean"
                            },
                            "base_dn": {
                                "description": "Specifies the root of the tree in which to search identities.",
                                "type": "string"
                            },
                            "bind_dn": {
                                "description": "Specifies the distinguished name for binding to the LDAP server.",
                                "type": "string"
                            },
                            "bind_mechanism": {
                                "description": "Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.",
                                "enum": [
                                    "simple",
                                    "gssapi",
                                    "digest-md5"
                                ],
                                "type": "string"
                            },
                            "bind_timeout": {
                                "description": "Specifies the timeout in seconds when binding to an LDAP server.",
                                "type": "integer"
                            },
                            "certificate_authority_file": {
                                "description": "Specifies the path to the root certificates file.",
                                "type": "string"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "cn_attribute": {
                                "description": "Specifies the canonical name.",
                                "type": "string"
                            },
                            "create_home_directory": {
                                "description": "Automatically create the home directory on the first login.",
                                "type": "boolean"
                            },
                            "crypt_password_attribute": {
                                "description": "Specifies the hashed password value.",
                                "type": "string"
                            },
                            "email_attribute": {
                                "description": "Specifies the LDAP Email attribute.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "If true, enables the LDAP provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "If true, allows the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "If true, allows the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "gecos_attribute": {
                                "description": "Specifies the LDAP GECOS attribute.",
                                "type": "string"
                            },
                            "gid_attribute": {
                                "description": "Specifies the LDAP GID attribute.",
                                "type": "string"
                            },
                            "group_base_dn": {
                                "description": "Specifies the distinguished name of the entry where LDAP searches for groups are started.",
                                "type": "string"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which groups are qualified.",
                                "type": "string"
                            },
                            "group_filter": {
                                "description": "Specifies the LDAP filter for group objects.",
                                "type": "string"
                            },
                            "group_members_attribute": {
                                "description": "Specifies the LDAP Group Members attribute.",
                                "type": "string"
                            },
                            "group_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "homedir_attribute": {
                                "description": "Specifies the LDAP Homedir attribute.",
                                "type": "string"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the ID of the LDAP provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "ignore_tls_errors": {
                                "description": "If true, continues over secure connections even if identity checks fail.",
                                "type": "boolean"
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "member_of_attribute": {
                                "description": "Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.",
                                "type": "string"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the name of the LDAP provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "name_attribute": {
                                "description": "Specifies the LDAP UID attribute, which is used as the login name.",
                                "type": "string"
                            },
                            "netgroup_base_dn": {
                                "description": "Specifies the distinguished name of the entry where LDAP searches for netgroups are started.",
                                "type": "string"
                            },
                            "netgroup_filter": {
                                "description": "Specifies the LDAP filter for netgroup objects.",
                                "type": "string"
                            },
                            "netgroup_members_attribute": {
                                "description": "Specifies the LDAP Netgroup Members attribute.",
                                "type": "string"
                            },
                            "netgroup_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "netgroup_triple_attribute": {
                                "description": "Specifies the LDAP Netgroup Triple attribute.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "nt_password_attribute": {
                                "description": "Specifies the LDAP NT Password attribute.",
                                "type": "string"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the provider domain.",
                                "type": "string"
                            },
                            "require_secure_connection": {
                                "description": "Determines whether to continue over a non-TLS connection.",
                                "type": "boolean"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "search_scope": {
                                "description": "Specifies the default depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            },
                            "search_timeout": {
                                "description": "Specifies the search timeout period in seconds.",
                                "type": "integer"
                            },
                            "server_uris": {
                                "description": "Specifies the server URIs.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "shell_attribute": {
                                "description": "Specifies the the LDAP Shell attribute.",
                                "type": "string"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "uid_attribute": {
                                "description": "Specifies the the LDAP UID Number attribute.",
                                "type": "string"
                            },
                            "unfindable_groups": {
                                "description": "Specifies the groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unique_group_members_attribute": {
                                "description": "Sets the LDAP Unique Group Members attribute.",
                                "type": "string"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_base_dn": {
                                "description": "Specifies the distinguished name of the entry at which to start LDAP searches for users.",
                                "type": "string"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            },
                            "user_filter": {
                                "description": "Specifies the LDAP filter for user objects.",
                                "type": "string"
                            },
                            "user_search_scope": {
                                "description": "Specifies the depth from the base DN to perform LDAP searches.",
                                "enum": [
                                    "default",
                                    "base",
                                    "onelevel",
                                    "subtree",
                                    "children"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the LDAP provider.",
            "properties": {
                "force": {
                    "description": "Ignore unresolvable server URIs.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for the LDAP authentication provider.",
            "properties": {
                "alternate_security_identities_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the attribute name used when searching for alternate security identities.",
                            "type": "string"
                        }
                    ]
                },
                "authentication": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables authentication and identity management through the authentication provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "balance_servers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, connects the provider to a random server.",
                            "type": "boolean"
                        }
                    ]
                },
                "base_dn": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the root of the tree in which to search identities.",
                            "type": "string"
                        }
                    ]
                },
                "bind_dn": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the distinguished name for binding to the LDAP server.",
                            "type": "string"
                        }
                    ]
                },
                "bind_mechanism": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.",
                            "enum": [
                                "simple",
                                "gssapi",
                                "digest-md5"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "bind_password": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the password for the distinguished name for binding to the LDAP server.",
                            "type": "string"
                        }
                    ]
                },
                "bind_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the timeout in seconds when binding to an LDAP server.",
                            "type": "integer"
                        }
                    ]
                },
                "certificate_authority_file": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the root certificates file.",
                            "type": "string"
                        }
                    ]
                },
                "check_online_interval": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the time in seconds between provider online checks.",
                            "type": "integer"
                        }
                    ]
                },
                "cn_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the canonical name.",
                            "type": "string"
                        }
                    ]
                },
                "create_home_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically create the home directory on the first login.",
                            "type": "boolean"
                        }
                    ]
                },
                "crypt_password_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the hashed password value.",
                            "type": "string"
                        }
                    ]
                },
                "email_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Email attribute.",
                            "type": "string"
                        }
                    ]
                },
                "enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables the LDAP provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allows the provider to enumerate groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allows the provider to enumerate users.",
                            "type": "boolean"
                        }
                    ]
                },
                "findable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of groups that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "findable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of users that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "gecos_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP GECOS attribute.",
                            "type": "string"
                        }
                    ]
                },
                "gid_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP GID attribute.",
                            "type": "string"
                        }
                    ]
                },
                "group_base_dn": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the distinguished name of the entry where LDAP searches for groups are started.",
                            "type": "string"
                        }
                    ]
                },
                "group_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which groups are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "group_filter": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP filter for group objects.",
                            "type": "string"
                        }
                    ]
                },
                "group_members_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Group Members attribute.",
                            "type": "string"
                        }
                    ]
                },
                "group_search_scope": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the depth from the base DN to perform LDAP searches.",
                            "enum": [
                                "default",
                                "base",
                                "onelevel",
                                "subtree",
                                "children"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "home_directory_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the home directory template.",
                            "type": "string"
                        }
                    ]
                },
                "homedir_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Homedir attribute.",
                            "type": "string"
                        }
                    ]
                },
                "ignore_tls_errors": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, continues over secure connections even if identity checks fail.",
                            "type": "boolean"
                        }
                    ]
                },
                "listable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the groups that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "listable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "login_shell": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the login shell path.",
                            "type": "string"
                        }
                    ]
                },
                "member_of_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.",
                            "type": "string"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the name of the LDAP provider.",
                    "type": "string"
                },
                "name_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP UID attribute, which is used as the login name.",
                            "type": "string"
                        }
                    ]
                },
                "netgroup_base_dn": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the distinguished name of the entry where LDAP searches for netgroups are started.",
                            "type": "string"
                        }
                    ]
                },
                "netgroup_filter": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP filter for netgroup objects.",
                            "type": "string"
                        }
                    ]
                },
                "netgroup_members_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Netgroup Members attribute.",
                            "type": "string"
                        }
                    ]
                },
                "netgroup_search_scope": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the depth from the base DN to perform LDAP searches.",
                            "enum": [
                                "default",
                                "base",
                                "onelevel",
                                "subtree",
                                "children"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "netgroup_triple_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP Netgroup Triple attribute.",
                            "type": "string"
                        }
                    ]
                },
                "normalize_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes group names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "normalize_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes user names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "nt_password_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP NT Password attribute.",
                            "type": "string"
                        }
                    ]
                },
                "ntlm_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                            "enum": [
                                "all",
                                "v2only",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "provider_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the provider domain.",
                            "type": "string"
                        }
                    ]
                },
                "require_secure_connection": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Determines whether to continue over a non-TLS connection.",
                            "type": "boolean"
                        }
                    ]
                },
                "restrict_findable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "restrict_listable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "search_scope": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the default depth from the base DN to perform LDAP searches.",
                            "enum": [
                                "base",
                                "onelevel",
                                "subtree",
                                "children"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "search_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the search timeout period in seconds.",
                            "type": "integer"
                        }
                    ]
                },
                "server_uris": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the server URIs.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "shell_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the the LDAP Shell attribute.",
                            "type": "string"
                        }
                    ]
                },
                "uid_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the the LDAP UID Number attribute.",
                            "type": "string"
                        }
                    ]
                },
                "unfindable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the groups that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unfindable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies users that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unique_group_members_attribute": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Sets the LDAP Unique Group Members attribute.",
                            "type": "string"
                        }
                    ]
                },
                "unlistable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a group that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unlistable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a user that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "user_base_dn": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the distinguished name of the entry at which to start LDAP searches for users.",
                            "type": "string"
                        }
                    ]
                },
                "user_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which users are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "user_filter": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the LDAP filter for user objects.",
                            "type": "string"
                        }
                    ]
                },
                "user_search_scope": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the depth from the base DN to perform LDAP searches.",
                            "enum": [
                                "default",
                                "base",
                                "onelevel",
                                "subtree",
                                "children"
                            ],
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/nis": {
        "GET_args": {
            "description": "List all NIS providers.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nis": {
                    "items": {
                        "description": "Specifies the properties for an NIS authentication provider.",
                        "properties": {
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "balance_servers": {
                                "description": "If true, connects the provider to a random server.",
                                "type": "boolean"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates the home directory on the first login.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "If true, enables the NIS provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "If true, allows the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "If true, allows the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which groups are qualified.",
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Groupnet identifier.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "hostname_lookup": {
                                "description": "If true, enables host name look ups.",
                                "type": "boolean"
                            },
                            "id": {
                                "type": [
                                    {
                                        "description": "Specifies the NIS provider ID.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "name": {
                                "type": [
                                    {
                                        "description": "Specifies the NIS provider name.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "nis_domain": {
                                "description": "Specifies the NIS domain name.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the domain for the provider.",
                                "type": "string"
                            },
                            "request_timeout": {
                                "description": "Specifies the request timeout interval in seconds.",
                                "type": "integer"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "retry_time": {
                                "description": "Specifies the timeout period in seconds after which a request will be retried.",
                                "type": "integer"
                            },
                            "servers": {
                                "description": "Adds an NIS server for this provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "status": {
                                "type": [
                                    {
                                        "description": "Specifies the status of the provider.",
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "system": {
                                "type": [
                                    {
                                        "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            },
                            "ypmatch_using_tcp": {
                                "description": "If true, specifies TCP for YP Match operations.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new NIS provider.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies the properties for an NIS authentication provider.",
            "properties": {
                "authentication": {
                    "description": "If true, enables authentication and identity management through the authentication provider.",
                    "type": "boolean"
                },
                "balance_servers": {
                    "description": "If true, connects the provider to a random server.",
                    "type": "boolean"
                },
                "check_online_interval": {
                    "description": "Specifies the time in seconds between provider online checks.",
                    "type": "integer"
                },
                "create_home_directory": {
                    "description": "Automatically creates the home directory on the first login.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "If true, enables the NIS provider.",
                    "type": "boolean"
                },
                "enumerate_groups": {
                    "description": "If true, allows the provider to enumerate groups.",
                    "type": "boolean"
                },
                "enumerate_users": {
                    "description": "If true, allows the provider to enumerate users.",
                    "type": "boolean"
                },
                "findable_groups": {
                    "description": "Specifies the list of groups that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "findable_users": {
                    "description": "Specifies the list of users that can be resolved.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "group_domain": {
                    "description": "Specifies the domain for this provider through which groups are qualified.",
                    "type": "string"
                },
                "groupnet": {
                    "description": "Groupnet identifier.",
                    "type": "string"
                },
                "home_directory_template": {
                    "description": "Specifies the path to the home directory template.",
                    "type": "string"
                },
                "hostname_lookup": {
                    "description": "If true, enables host name look ups.",
                    "type": "boolean"
                },
                "listable_groups": {
                    "description": "Specifies the groups that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "listable_users": {
                    "description": "Specifies the users that can be viewed in the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "login_shell": {
                    "description": "Specifies the login shell path.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the NIS provider name.",
                    "required": true,
                    "type": "string"
                },
                "nis_domain": {
                    "description": "Specifies the NIS domain name.",
                    "required": true,
                    "type": "string"
                },
                "normalize_groups": {
                    "description": "Normalizes group names to lowercase before look up.",
                    "type": "boolean"
                },
                "normalize_users": {
                    "description": "Normalizes user names to lowercase before look up.",
                    "type": "boolean"
                },
                "ntlm_support": {
                    "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                    "enum": [
                        "all",
                        "v2only",
                        "none"
                    ],
                    "type": "string"
                },
                "provider_domain": {
                    "description": "Specifies the domain for the provider.",
                    "type": "string"
                },
                "request_timeout": {
                    "description": "Specifies the request timeout interval in seconds.",
                    "type": "integer"
                },
                "restrict_findable": {
                    "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                    "type": "boolean"
                },
                "restrict_listable": {
                    "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                    "type": "boolean"
                },
                "retry_time": {
                    "description": "Specifies the timeout period in seconds after which a request will be retried.",
                    "type": "integer"
                },
                "servers": {
                    "description": "Adds an NIS server for this provider.",
                    "items": {
                        "type": "string"
                    },
                    "required": true,
                    "type": "array"
                },
                "unfindable_groups": {
                    "description": "Specifies groups that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unfindable_users": {
                    "description": "Specifies users that cannot be resolved by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unlistable_groups": {
                    "description": "Specifies a group that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unlistable_users": {
                    "description": "Specifies a user that cannot be listed by the provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "user_domain": {
                    "description": "Specifies the domain for this provider through which users are qualified.",
                    "type": "string"
                },
                "ypmatch_using_tcp": {
                    "description": "If true, specifies TCP for YP Match operations.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/nis/<ID>": {
        "DELETE_args": {
            "description": "Delete the NIS provider.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the NIS provider.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nis": {
                    "items": {
                        "description": "Specifies the properties for an NIS authentication provider.",
                        "properties": {
                            "authentication": {
                                "description": "If true, enables authentication and identity management through the authentication provider.",
                                "type": "boolean"
                            },
                            "balance_servers": {
                                "description": "If true, connects the provider to a random server.",
                                "type": "boolean"
                            },
                            "check_online_interval": {
                                "description": "Specifies the time in seconds between provider online checks.",
                                "type": "integer"
                            },
                            "create_home_directory": {
                                "description": "Automatically creates the home directory on the first login.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "If true, enables the NIS provider.",
                                "type": "boolean"
                            },
                            "enumerate_groups": {
                                "description": "If true, allows the provider to enumerate groups.",
                                "type": "boolean"
                            },
                            "enumerate_users": {
                                "description": "If true, allows the provider to enumerate users.",
                                "type": "boolean"
                            },
                            "findable_groups": {
                                "description": "Specifies the list of groups that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "findable_users": {
                                "description": "Specifies the list of users that can be resolved.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "group_domain": {
                                "description": "Specifies the domain for this provider through which groups are qualified.",
                                "type": "string"
                            },
                            "home_directory_template": {
                                "description": "Specifies the path to the home directory template.",
                                "type": "string"
                            },
                            "hostname_lookup": {
                                "description": "If true, enables host name look ups.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Specifies the NIS provider ID.",
                                "type": "string"
                            },
                            "listable_groups": {
                                "description": "Specifies the groups that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "listable_users": {
                                "description": "Specifies the users that can be viewed in the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "login_shell": {
                                "description": "Specifies the login shell path.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the NIS provider name.",
                                "type": "string"
                            },
                            "nis_domain": {
                                "description": "Specifies the NIS domain name.",
                                "type": "string"
                            },
                            "normalize_groups": {
                                "description": "Normalizes group names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "normalize_users": {
                                "description": "Normalizes user names to lowercase before look up.",
                                "type": "boolean"
                            },
                            "ntlm_support": {
                                "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                                "enum": [
                                    "all",
                                    "v2only",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "provider_domain": {
                                "description": "Specifies the domain for the provider.",
                                "type": "string"
                            },
                            "request_timeout": {
                                "description": "Specifies the request timeout interval in seconds.",
                                "type": "integer"
                            },
                            "restrict_findable": {
                                "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                                "type": "boolean"
                            },
                            "restrict_listable": {
                                "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                                "type": "boolean"
                            },
                            "retry_time": {
                                "description": "Specifies the timeout period in seconds after which a request will be retried.",
                                "type": "integer"
                            },
                            "servers": {
                                "description": "Adds an NIS server for this provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "status": {
                                "description": "Specifies the status of the provider.",
                                "type": "string"
                            },
                            "system": {
                                "description": "If true, indicates that this provider instance was created by OneFS and cannot be removed.",
                                "type": "boolean"
                            },
                            "unfindable_groups": {
                                "description": "Specifies groups that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unfindable_users": {
                                "description": "Specifies users that cannot be resolved by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_groups": {
                                "description": "Specifies a group that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "unlistable_users": {
                                "description": "Specifies a user that cannot be listed by the provider.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "user_domain": {
                                "description": "Specifies the domain for this provider through which users are qualified.",
                                "type": "string"
                            },
                            "ypmatch_using_tcp": {
                                "description": "If true, specifies TCP for YP Match operations.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the NIS provider.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the properties for an NIS authentication provider.",
            "properties": {
                "authentication": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables authentication and identity management through the authentication provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "balance_servers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, connects the provider to a random server.",
                            "type": "boolean"
                        }
                    ]
                },
                "check_online_interval": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the time in seconds between provider online checks.",
                            "type": "integer"
                        }
                    ]
                },
                "create_home_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically creates the home directory on the first login.",
                            "type": "boolean"
                        }
                    ]
                },
                "enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables the NIS provider.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allows the provider to enumerate groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "enumerate_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, allows the provider to enumerate users.",
                            "type": "boolean"
                        }
                    ]
                },
                "findable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of groups that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "findable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of users that can be resolved.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "group_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which groups are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "home_directory_template": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the path to the home directory template.",
                            "type": "string"
                        }
                    ]
                },
                "hostname_lookup": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, enables host name look ups.",
                            "type": "boolean"
                        }
                    ]
                },
                "listable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the groups that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "listable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the users that can be viewed in the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "login_shell": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the login shell path.",
                            "type": "string"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the NIS provider name.",
                    "type": "string"
                },
                "nis_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the NIS domain name.",
                            "type": "string"
                        }
                    ]
                },
                "normalize_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes group names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "normalize_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Normalizes user names to lowercase before look up.",
                            "type": "boolean"
                        }
                    ]
                },
                "ntlm_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies which NTLM versions to support for users with NTLM-compatible credentials.",
                            "enum": [
                                "all",
                                "v2only",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "provider_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for the provider.",
                            "type": "string"
                        }
                    ]
                },
                "request_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the request timeout interval in seconds.",
                            "type": "integer"
                        }
                    ]
                },
                "restrict_findable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of findable and unfindable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "restrict_listable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, checks the provider for filtered lists of listable and unlistable users and groups.",
                            "type": "boolean"
                        }
                    ]
                },
                "retry_time": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the timeout period in seconds after which a request will be retried.",
                            "type": "integer"
                        }
                    ]
                },
                "servers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Adds an NIS server for this provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unfindable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies groups that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unfindable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies users that cannot be resolved by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unlistable_groups": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a group that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "unlistable_users": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a user that cannot be listed by the provider.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "user_domain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the domain for this provider through which users are qualified.",
                            "type": "string"
                        }
                    ]
                },
                "ypmatch_using_tcp": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If true, specifies TCP for YP Match operations.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/auth/providers/summary": {
        "GET_args": {
            "description": "Retrieve the summary information.",
            "properties": {
                "groupnet": {
                    "description": "Filter providers by groupnet.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter providers by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "provider_instances": {
                    "items": {
                        "description": "Specifies the summary information for an authentication provider.",
                        "properties": {
                            "active_server": {
                                "description": "Specifies the server through which the provider serves authentication requests. Null if no server is set or is not applicable for that provider.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "client_site": {
                                "description": "The Nodes Site.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "connections": {
                                "items": {
                                    "properties": {
                                        "address": {
                                            "description": "Specifies the IP address of the provider.",
                                            "type": "string"
                                        },
                                        "last_used": {
                                            "description": "Specifies the last time the server was contacted.",
                                            "type": "string"
                                        },
                                        "server": {
                                            "description": "Specifies the fully qualified domain name of the server.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "dc_site": {
                                "description": "The DC Site.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "forest": {
                                "description": "Specifies the Active Directory forest. Null if not applicable.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "groupnet": {
                                "description": "The groupnet the provider is in.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "Specifies the ID of the provider.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the name of the provider.",
                                "type": "string"
                            },
                            "status": {
                                "description": "Indicates the status of the provider.",
                                "enum": [
                                    "offline",
                                    "active",
                                    "online",
                                    "initializing",
                                    "joining",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of provider.",
                                "enum": [
                                    "file",
                                    "ldap",
                                    "local",
                                    "nis",
                                    "ads",
                                    "krb5",
                                    "unknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/refresh": {
        "POST_args": {
            "description": "Refresh the authentication service configuration.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "Unique ID of the log filter.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/settings/acls": {
        "GET_args": {
            "description": "Retrieve the ACL policy settings and preset configurations.",
            "properties": {
                "preset": {
                    "description": "If specified the preset configuration values for all applicable ACL policies are returned.",
                    "enum": [
                        "balanced",
                        "unix",
                        "windows"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "acl_policy_settings": {
                    "description": "ACL policies settings.",
                    "properties": {
                        "access": {
                            "type": [
                                {
                                    "description": "Access checks (chmod, chown).",
                                    "enum": [
                                        "unix",
                                        "windows"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "calcmode": {
                            "type": [
                                {
                                    "description": "Displayed mode bits.",
                                    "enum": [
                                        "approx",
                                        "777"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "calcmode_group": {
                            "type": [
                                {
                                    "description": "Approximate group mode bits when ACL exists.",
                                    "enum": [
                                        "group_aces",
                                        "group_only"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "calcmode_owner": {
                            "type": [
                                {
                                    "description": "Approximate owner mode bits when ACL exists.",
                                    "enum": [
                                        "owner_aces",
                                        "owner_only"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "chmod": {
                            "type": [
                                {
                                    "description": "chmod on files with existing ACLs.",
                                    "enum": [
                                        "remove",
                                        "replace",
                                        "replace_users_and_groups",
                                        "merge",
                                        "deny",
                                        "ignore"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "chmod_007": {
                            "type": [
                                {
                                    "description": "chmod (007) on files with existing ACLs.",
                                    "enum": [
                                        "default",
                                        "remove"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "chmod_inheritable": {
                            "type": [
                                {
                                    "description": "ACLs created on directories by UNIX chmod.",
                                    "enum": [
                                        "yes",
                                        "no"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "chown": {
                            "type": [
                                {
                                    "description": "chown/chgrp on files with existing ACLs.",
                                    "enum": [
                                        "owner_group_and_acl",
                                        "owner_group_only",
                                        "ignore"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "create_over_smb": {
                            "type": [
                                {
                                    "description": "ACL creation over SMB.",
                                    "enum": [
                                        "allow",
                                        "disallow"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "dos_attr": {
                            "type": [
                                {
                                    "description": " Read only DOS attribute.",
                                    "enum": [
                                        "deny_smb",
                                        "deny_smb_and_nfs"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "group_owner_inheritance": {
                            "type": [
                                {
                                    "description": "Group owner inheritance.",
                                    "enum": [
                                        "native",
                                        "parent",
                                        "creator"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "rwx": {
                            "type": [
                                {
                                    "description": "Treatment of 'rwx' permissions.",
                                    "enum": [
                                        "retain",
                                        "full_control"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "synthetic_denies": {
                            "type": [
                                {
                                    "description": "Synthetic 'deny' ACEs.",
                                    "enum": [
                                        "none",
                                        "remove"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "utimes": {
                            "type": [
                                {
                                    "description": "Access check (utimes)",
                                    "enum": [
                                        "only_owner",
                                        "owner_and_write"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify cluster ACL policy settings.",
            "properties": {},
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "ACL policies settings.",
            "properties": {
                "access": {
                    "description": "Access checks (chmod, chown).",
                    "enum": [
                        "unix",
                        "windows"
                    ],
                    "type": "string"
                },
                "calcmode": {
                    "description": "Displayed mode bits.",
                    "enum": [
                        "approx",
                        "777"
                    ],
                    "type": "string"
                },
                "calcmode_group": {
                    "description": "Approximate group mode bits when ACL exists.",
                    "enum": [
                        "group_aces",
                        "group_only"
                    ],
                    "type": "string"
                },
                "calcmode_owner": {
                    "description": "Approximate owner mode bits when ACL exists.",
                    "enum": [
                        "owner_aces",
                        "owner_only"
                    ],
                    "type": "string"
                },
                "chmod": {
                    "description": "chmod on files with existing ACLs.",
                    "enum": [
                        "remove",
                        "replace",
                        "replace_users_and_groups",
                        "merge",
                        "deny",
                        "ignore"
                    ],
                    "type": "string"
                },
                "chmod_007": {
                    "description": "chmod (007) on files with existing ACLs.",
                    "enum": [
                        "default",
                        "remove"
                    ],
                    "type": "string"
                },
                "chmod_inheritable": {
                    "description": "ACLs created on directories by UNIX chmod.",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "type": "string"
                },
                "chown": {
                    "description": "chown/chgrp on files with existing ACLs.",
                    "enum": [
                        "owner_group_and_acl",
                        "owner_group_only",
                        "ignore"
                    ],
                    "type": "string"
                },
                "create_over_smb": {
                    "description": "ACL creation over SMB.",
                    "enum": [
                        "allow",
                        "disallow"
                    ],
                    "type": "string"
                },
                "dos_attr": {
                    "description": " Read only DOS attribute.",
                    "enum": [
                        "deny_smb",
                        "deny_smb_and_nfs"
                    ],
                    "type": "string"
                },
                "group_owner_inheritance": {
                    "description": "Group owner inheritance.",
                    "enum": [
                        "native",
                        "parent",
                        "creator"
                    ],
                    "type": "string"
                },
                "rwx": {
                    "description": "Treatment of 'rwx' permissions.",
                    "enum": [
                        "retain",
                        "full_control"
                    ],
                    "type": "string"
                },
                "synthetic_denies": {
                    "description": "Synthetic 'deny' ACEs.",
                    "enum": [
                        "none",
                        "remove"
                    ],
                    "type": "string"
                },
                "utimes": {
                    "description": "Access check (utimes)",
                    "enum": [
                        "only_owner",
                        "owner_and_write"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/users/<USER>/change-password": {
        "PUT_args": {
            "description": "Change the user's password.",
            "properties": {
                "zone": {
                    "description": "Specifies access zone containing user.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Change Password Request",
            "properties": {
                "new_password": {
                    "description": "Specifies user's new password",
                    "required": true,
                    "type": "string"
                },
                "old_password": {
                    "description": "User's expired password",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/users/<USER>/member-of": {
        "GET_args": {
            "description": "List all groups the user is a member of.",
            "properties": {
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "resolve_names": {
                    "description": "Resolve names of personas.",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "member_of": {
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add the user to a group.",
            "properties": {
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
            "properties": {
                "id": {
                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the persona name, which must be combined with a type.",
                    "type": "string"
                },
                "type": {
                    "description": "Specifies the type of persona, which must be combined with a name.",
                    "enum": [
                        "user",
                        "group",
                        "wellknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/auth/users/<USER>/member-of/<MEMBER_OF>": {
        "DELETE_args": {
            "description": "Remove the user from the group.",
            "properties": {
                "provider": {
                    "description": "Filter groups by provider.",
                    "type": "string"
                },
                "zone": {
                    "description": "Filter groups by zone.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/access": {
        "GET_args": {
            "description": "List all accessible cluster identifiers.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "clusters": {
                    "items": {
                        "description": "Accessible cloud storage information",
                        "properties": {
                            "accounts": {
                                "description": "A list of accounts created on the cluster with this guid",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "current": {
                                "description": "Whether the guid is that of the current (local) cluster",
                                "type": "boolean"
                            },
                            "guid": {
                                "description": "A cluster guid indicating the birth place of one or more accounts or policies on this cluster",
                                "type": "string"
                            },
                            "id": {
                                "description": "A cluster guid indicating the birth place of one or more accounts or policies on this cluster",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the cluster from which the above guid originated",
                                "type": "string"
                            },
                            "policies": {
                                "description": "A list of policies created on the cluster with this guid",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "state": {
                                "description": "Whether the guid has access to the cloud",
                                "enum": [
                                    "permitted",
                                    "pending enable",
                                    "pending disable",
                                    "not permitted"
                                ],
                                "type": "string"
                            },
                            "synced_from": {
                                "description": "The name of the cluster from which the above guid was synced",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add a cluster identifier to access list.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Accessible cloud storage information",
            "properties": {
                "guid": {
                    "description": "A cluster guid indicating the birth place of one or more accounts or policies on this cluster",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {}
    },
    "/3/cloud/access/<GUID>": {
        "DELETE_args": {
            "description": "Delete cloud access.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve cloud access information.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "clusters": {
                    "items": {
                        "description": "Accessible cloud storage information",
                        "properties": {
                            "accounts": {
                                "description": "A list of accounts created on the cluster with this guid",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "current": {
                                "description": "Whether the guid is that of the current (local) cluster",
                                "type": "boolean"
                            },
                            "guid": {
                                "description": "A cluster guid indicating the birth place of one or more accounts or policies on this cluster",
                                "type": "string"
                            },
                            "id": {
                                "description": "A cluster guid indicating the birth place of one or more accounts or policies on this cluster",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the cluster from which the above guid originated",
                                "type": "string"
                            },
                            "policies": {
                                "description": "A list of policies created on the cluster with this guid",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "state": {
                                "description": "Whether the guid has access to the cloud",
                                "enum": [
                                    "permitted",
                                    "pending enable",
                                    "pending disable",
                                    "not permitted"
                                ],
                                "type": "string"
                            },
                            "synced_from": {
                                "description": "The name of the cluster from which the above guid was synced",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/accounts": {
        "GET_args": {
            "description": "List all accounts.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "accounts": {
                    "items": {
                        "description": "A cloud account object",
                        "properties": {
                            "account_id": {
                                "description": "(S3 only) The user id of the S3 account",
                                "type": "string"
                            },
                            "account_username": {
                                "description": "The username required to authenticate against the cloud service",
                                "type": "string"
                            },
                            "birth_cluster_id": {
                                "description": "The guid of the cluster where this account was created",
                                "type": "string"
                            },
                            "bucket": {
                                "description": "The machine generated name of the account bucket to store data",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether this account is explicitly enabled or disabled by a user",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A globally unique name for this account",
                                "type": "string"
                            },
                            "key": {
                                "description": "A valid authentication key for connecting to the cloud",
                                "type": "string"
                            },
                            "metadata_bucket": {
                                "description": "The machine generated name of the account bucket to store metadata",
                                "type": "string"
                            },
                            "name": {
                                "description": "A unique name for this account",
                                "type": "string"
                            },
                            "pool": {
                                "description": "Name of the pool referencing this account.  Empty if none.",
                                "type": "string"
                            },
                            "skip_ssl_validation": {
                                "description": "Indicates whether to skip SSL certificate validation when connecting to the cloud",
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Indicates whether this account is in a good state (\"OK\"), disabled (\"disabled\") or inaccessible via the network (\"unreachable\")",
                                "enum": [
                                    "OK",
                                    "disabled",
                                    "unreachable"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this account",
                                "type": "string"
                            },
                            "storage_region": {
                                "description": "(S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "telemetry_bucket": {
                                "description": "(S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider",
                                "type": "string"
                            },
                            "type": {
                                "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                                "enum": [
                                    "isilon",
                                    "ecs",
                                    "virtustream",
                                    "azure",
                                    "s3",
                                    "ran",
                                    "ecs2"
                                ],
                                "type": "string"
                            },
                            "uri": {
                                "description": "A valid URI pointing to the location of the cloud storage",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new account.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A cloud account object",
            "properties": {
                "account_id": {
                    "description": "(S3 only) The user id of the S3 account",
                    "type": "string"
                },
                "account_username": {
                    "description": "The username required to authenticate against the cloud service",
                    "required": true,
                    "type": "string"
                },
                "birth_cluster_id": {
                    "description": "The guid of the cluster where this account was created",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether this account is explicitly enabled or disabled by a user",
                    "type": "boolean"
                },
                "key": {
                    "description": "A valid authentication key for connecting to the cloud",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "A unique name for this account",
                    "required": true,
                    "type": "string"
                },
                "skip_ssl_validation": {
                    "description": "Indicates whether to skip SSL certificate validation when connecting to the cloud",
                    "type": "boolean"
                },
                "storage_region": {
                    "description": "(S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "telemetry_bucket": {
                    "description": "(S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider",
                    "type": "string"
                },
                "type": {
                    "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                    "enum": [
                        "isilon",
                        "ecs",
                        "virtustream",
                        "azure",
                        "s3",
                        "ran",
                        "ecs2"
                    ],
                    "required": true,
                    "type": "string"
                },
                "uri": {
                    "description": "A valid URI pointing to the location of the cloud storage",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The name of the new account",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/accounts/<ACCOUNT>": {
        "DELETE_args": {
            "description": "Delete cloud account.",
            "properties": {
                "acknowledge_force_delete": {
                    "description": "A value of 1 acknowledges that the user is deleting data.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve cloud account information.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "accounts": {
                    "items": {
                        "description": "A cloud account object",
                        "properties": {
                            "account_id": {
                                "description": "(S3 only) The user id of the S3 account",
                                "type": "string"
                            },
                            "account_username": {
                                "description": "The username required to authenticate against the cloud service",
                                "type": "string"
                            },
                            "birth_cluster_id": {
                                "description": "The guid of the cluster where this account was created",
                                "type": "string"
                            },
                            "bucket": {
                                "description": "The machine generated name of the account bucket to store data",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether this account is explicitly enabled or disabled by a user",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "A globally unique name for this account",
                                "type": "string"
                            },
                            "key": {
                                "description": "A valid authentication key for connecting to the cloud",
                                "type": "string"
                            },
                            "metadata_bucket": {
                                "description": "The machine generated name of the account bucket to store metadata",
                                "type": "string"
                            },
                            "name": {
                                "description": "A unique name for this account",
                                "type": "string"
                            },
                            "pool": {
                                "description": "Name of the pool referencing this account.  Empty if none.",
                                "type": "string"
                            },
                            "skip_ssl_validation": {
                                "description": "Indicates whether to skip SSL certificate validation when connecting to the cloud",
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Indicates whether this account is in a good state (\"OK\"), disabled (\"disabled\") or inaccessible via the network (\"unreachable\")",
                                "enum": [
                                    "OK",
                                    "disabled",
                                    "unreachable"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this account",
                                "type": "string"
                            },
                            "storage_region": {
                                "description": "(S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "telemetry_bucket": {
                                "description": "(S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider",
                                "type": "string"
                            },
                            "type": {
                                "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                                "enum": [
                                    "isilon",
                                    "ecs",
                                    "virtustream",
                                    "azure",
                                    "s3",
                                    "ran",
                                    "ecs2"
                                ],
                                "type": "string"
                            },
                            "uri": {
                                "description": "A valid URI pointing to the location of the cloud storage",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify cloud account.  All fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A cloud account object",
            "properties": {
                "account_id": {
                    "description": "(S3 only) The user id of the S3 account",
                    "type": "string"
                },
                "account_username": {
                    "description": "The username required to authenticate against the cloud service",
                    "type": "string"
                },
                "birth_cluster_id": {
                    "description": "The guid of the cluster where this account was created",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether this account is explicitly enabled or disabled by a user",
                    "type": "boolean"
                },
                "key": {
                    "description": "A valid authentication key for connecting to the cloud",
                    "type": "string"
                },
                "name": {
                    "description": "A unique name for this account",
                    "type": "string"
                },
                "skip_ssl_validation": {
                    "description": "Indicates whether to skip SSL certificate validation when connecting to the cloud",
                    "type": "boolean"
                },
                "storage_region": {
                    "description": "(S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "telemetry_bucket": {
                    "description": "(S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider",
                    "type": "string"
                },
                "uri": {
                    "description": "A valid URI pointing to the location of the cloud storage",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/jobs": {
        "GET_args": {
            "description": "List all cloudpools jobs.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "description": "A cloud job for archiving or recalling files",
                        "properties": {
                            "completion_time": {
                                "description": "The time at which the job was completed (if applicable)",
                                "type": "integer"
                            },
                            "create_time": {
                                "description": "The time at which the job was created",
                                "type": "integer"
                            },
                            "description": {
                                "description": "A brief description of the job contents",
                                "type": "string"
                            },
                            "effective_state": {
                                "description": "The effective state of the job (e.g,. the combination of operation_state and job_state)",
                                "enum": [
                                    "running",
                                    "paused",
                                    "canceled",
                                    "completed",
                                    "failed"
                                ],
                                "type": "string"
                            },
                            "files": {
                                "description": "The files and filters addressed by this job",
                                "properties": {
                                    "file_matching_pattern": {
                                        "description": "The file filtering logic to find files for this job",
                                        "type": "object"
                                    },
                                    "names": {
                                        "description": "A list of files to be addressed by this job.  (Note* these are only reported when audit_level is 'high'",
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "description": "The full path name of a file to be acted on by this job",
                                                    "type": "string"
                                                },
                                                "state": {
                                                    "description": "The current state of this file",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "total": {
                                        "description": "The total number of files addressed by this job",
                                        "type": "integer"
                                    },
                                    "total_canceled": {
                                        "description": "The number of canceled files",
                                        "type": "integer"
                                    },
                                    "total_failed": {
                                        "description": "The number of files which failed",
                                        "type": "integer"
                                    },
                                    "total_pending": {
                                        "description": "The number of files pending action",
                                        "type": "integer"
                                    },
                                    "total_processing": {
                                        "description": "The number of files currently being processed",
                                        "type": "integer"
                                    },
                                    "total_succeeded": {
                                        "description": "The total number of files successfully completed",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "The job's ID",
                                "type": "integer"
                            },
                            "job_engine_job": {
                                "description": "Information about the related job engine job if there is one",
                                "properties": {
                                    "id": {
                                        "description": "ID of the related job engine job",
                                        "type": "integer"
                                    },
                                    "state": {
                                        "description": "The state of the related job engine job",
                                        "enum": [
                                            "null",
                                            "running",
                                            "user-paused",
                                            "system-paused",
                                            "policy-paused",
                                            "waiting",
                                            "user-canceled",
                                            "system-canceled",
                                            "failed",
                                            "succeeded"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "job_state": {
                                "description": "The current state of the job",
                                "enum": [
                                    "running",
                                    "paused",
                                    "canceled",
                                    "completed",
                                    "failed"
                                ],
                                "type": "string"
                            },
                            "operation_state": {
                                "description": "The current state of the operation associated with the job",
                                "enum": [
                                    "running",
                                    "paused"
                                ],
                                "type": "string"
                            },
                            "state_change_time": {
                                "description": "The last time at which the job state changed",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of cloud action to be performed by this job.",
                                "enum": [
                                    "archive",
                                    "recall",
                                    "local-garbage-collection",
                                    "cloud-garbage-collection",
                                    "cache-writeback",
                                    "cache-on-access",
                                    "cache-invalidation",
                                    "restore-coi"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new job.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A cloud job for archiving or recalling files or restoring COI",
            "properties": {
                "accounts": {
                    "description": "The names of accounts for COI restore",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "directories": {
                    "description": "Directories addressed by this job",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expiration_date": {
                    "description": "The new expiration date in seconds",
                    "type": "integer"
                },
                "file_matching_pattern": {
                    "description": "The file filtering logic to find files for this job. (Only applicable for 'recall' jobs)",
                    "type": "object"
                },
                "files": {
                    "description": "Filenames addressed by this job",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "policy": {
                    "description": "The name of an existing cloudpool policy to apply to this job. (Only applicable for 'archive' jobs)",
                    "type": "string"
                },
                "type": {
                    "description": "The type of cloud action to be performed by this job.",
                    "enum": [
                        "archive",
                        "recall",
                        "local-garbage-collection",
                        "cloud-garbage-collection",
                        "cache-writeback",
                        "cache-on-access",
                        "cache-invalidation",
                        "restore-coi"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The id of the new job",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/jobs-files/<JOB>": {
        "GET_args": {
            "description": "Retrieve files associated with a cloudpool job.",
            "properties": {
                "batch": {
                    "description": "If true, only \"limit\" and \"page\" arguments are honored.  Query will return all results, unsorted, as quickly as possible.",
                    "type": "boolean"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "page": {
                    "description": "Works only when \"batch\" parameter and \"limit\" parameters are specified.  Indicates which the page index of results to be returned",
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "files": {
                    "items": {
                        "description": "File associated with a cloud job",
                        "type": "string"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/jobs/<JOB>": {
        "GET_args": {
            "description": "Retrieve cloudpool job information.",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "description": "A cloud job for archiving or recalling files",
                        "properties": {
                            "completion_time": {
                                "description": "The time at which the job was completed (if applicable)",
                                "type": "integer"
                            },
                            "create_time": {
                                "description": "The time at which the job was created",
                                "type": "integer"
                            },
                            "description": {
                                "description": "A brief description of the job contents",
                                "type": "string"
                            },
                            "effective_state": {
                                "description": "The effective state of the job (e.g,. the combination of operation_state and job_state)",
                                "enum": [
                                    "running",
                                    "paused",
                                    "canceled",
                                    "completed",
                                    "failed"
                                ],
                                "type": "string"
                            },
                            "files": {
                                "description": "The files and filters addressed by this job",
                                "properties": {
                                    "file_matching_pattern": {
                                        "description": "The file filtering logic to find files for this job",
                                        "type": "object"
                                    },
                                    "names": {
                                        "description": "A list of files to be addressed by this job.  (Note* these are only reported when audit_level is 'high'",
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "description": "The full path name of a file to be acted on by this job",
                                                    "type": "string"
                                                },
                                                "state": {
                                                    "description": "The current state of this file",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "total": {
                                        "description": "The total number of files addressed by this job",
                                        "type": "integer"
                                    },
                                    "total_canceled": {
                                        "description": "The number of canceled files",
                                        "type": "integer"
                                    },
                                    "total_failed": {
                                        "description": "The number of files which failed",
                                        "type": "integer"
                                    },
                                    "total_pending": {
                                        "description": "The number of files pending action",
                                        "type": "integer"
                                    },
                                    "total_processing": {
                                        "description": "The number of files currently being processed",
                                        "type": "integer"
                                    },
                                    "total_succeeded": {
                                        "description": "The total number of files successfully completed",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "The job's ID",
                                "type": "integer"
                            },
                            "job_engine_job": {
                                "description": "Information about the related job engine job if there is one",
                                "properties": {
                                    "id": {
                                        "description": "ID of the related job engine job",
                                        "type": "integer"
                                    },
                                    "state": {
                                        "description": "The state of the related job engine job",
                                        "enum": [
                                            "null",
                                            "running",
                                            "user-paused",
                                            "system-paused",
                                            "policy-paused",
                                            "waiting",
                                            "user-canceled",
                                            "system-canceled",
                                            "failed",
                                            "succeeded"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "job_state": {
                                "description": "The current state of the job",
                                "enum": [
                                    "running",
                                    "paused",
                                    "canceled",
                                    "completed",
                                    "failed"
                                ],
                                "type": "string"
                            },
                            "operation_state": {
                                "description": "The current state of the operation associated with the job",
                                "enum": [
                                    "running",
                                    "paused"
                                ],
                                "type": "string"
                            },
                            "state_change_time": {
                                "description": "The last time at which the job state changed",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of cloud action to be performed by this job.",
                                "enum": [
                                    "archive",
                                    "recall",
                                    "local-garbage-collection",
                                    "cloud-garbage-collection",
                                    "cache-writeback",
                                    "cache-on-access",
                                    "cache-invalidation",
                                    "restore-coi"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a cloud job or operation.",
            "properties": {},
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A cloud job for archiving or recalling files",
            "properties": {
                "all": {
                    "description": "Whether to apply to the given operation type or to all jobs of the given operation type",
                    "type": "boolean"
                },
                "state": {
                    "description": "The desired state of the job or operation",
                    "enum": [
                        "resume",
                        "pause",
                        "cancel"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/pools": {
        "GET_args": {
            "description": "List all pools.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pools": {
                    "items": {
                        "description": "A group of cloud accounts which will be the destination for file stubbing",
                        "properties": {
                            "accounts": {
                                "description": "A list of valid names for the accounts in this pool.  There is currently only one account allowed per pool.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "birth_cluster_id": {
                                "description": "The guid of the cluster where this pool was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A brief description of this pool",
                                "type": "string"
                            },
                            "id": {
                                "description": "A unique name for this pool",
                                "type": "string"
                            },
                            "name": {
                                "description": "A unique name for this pool",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this pool is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this pool",
                                "type": "string"
                            },
                            "type": {
                                "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                                "enum": [
                                    "isilon",
                                    "ecs",
                                    "virtustream",
                                    "azure",
                                    "s3",
                                    "ran",
                                    "ecs2"
                                ],
                                "type": "string"
                            },
                            "vendor": {
                                "description": "A string identifier of the cloud services vendor",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new pool.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A group of cloud accounts which will be the destination for file stubbing",
            "properties": {
                "accounts": {
                    "description": "A list of valid names for the accounts in this pool.  There is currently only one account allowed per pool.",
                    "items": {
                        "type": "string"
                    },
                    "required": true,
                    "type": "array"
                },
                "birth_cluster_id": {
                    "description": "The guid of the cluster where this pool was created",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of this pool",
                    "type": "string"
                },
                "name": {
                    "description": "A unique name for this pool",
                    "required": true,
                    "type": "string"
                },
                "type": {
                    "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                    "enum": [
                        "isilon",
                        "ecs",
                        "virtustream",
                        "azure",
                        "s3",
                        "ran",
                        "ecs2"
                    ],
                    "required": true,
                    "type": "string"
                },
                "vendor": {
                    "description": "A string identifier of the cloud services vendor",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The name of the new pool",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/pools/<POOL>": {
        "DELETE_args": {
            "description": "Delete a cloud pool.",
            "properties": {
                "acknowledge_force_delete": {
                    "description": "A value of 1 acknowledges that the user is deleting data.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve cloud pool information",
            "properties": {},
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pools": {
                    "items": {
                        "description": "A group of cloud accounts which will be the destination for file stubbing",
                        "properties": {
                            "accounts": {
                                "description": "A list of valid names for the accounts in this pool.  There is currently only one account allowed per pool.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "birth_cluster_id": {
                                "description": "The guid of the cluster where this pool was created",
                                "type": "string"
                            },
                            "description": {
                                "description": "A brief description of this pool",
                                "type": "string"
                            },
                            "id": {
                                "description": "A unique name for this pool",
                                "type": "string"
                            },
                            "name": {
                                "description": "A unique name for this pool",
                                "type": "string"
                            },
                            "state": {
                                "description": "Indicates whether this pool is in a good state (\"OK\") or disabled (\"disabled\")",
                                "enum": [
                                    "OK",
                                    "disabled"
                                ],
                                "type": "string"
                            },
                            "state_details": {
                                "description": "Gives further information to describe the state of this pool",
                                "type": "string"
                            },
                            "type": {
                                "description": "The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3",
                                "enum": [
                                    "isilon",
                                    "ecs",
                                    "virtustream",
                                    "azure",
                                    "s3",
                                    "ran",
                                    "ecs2"
                                ],
                                "type": "string"
                            },
                            "vendor": {
                                "description": "A string identifier of the cloud services vendor",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a cloud pool.  All fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A group of cloud accounts which will be the destination for file stubbing",
            "properties": {
                "accounts": {
                    "description": "A list of valid names for the accounts in this pool.  There is currently only one account allowed per pool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "birth_cluster_id": {
                    "description": "The guid of the cluster where this pool was created",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of this pool",
                    "type": "string"
                },
                "name": {
                    "description": "A unique name for this pool",
                    "type": "string"
                },
                "vendor": {
                    "description": "A string identifier of the cloud services vendor",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/settings": {
        "GET_args": {
            "description": "List all cloud settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "cloud_policy_defaults": {
                            "description": "The default filepool policy values for cloud pools.",
                            "type": "object"
                        },
                        "retry_coefficient_archive": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive archive attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_cache_invalidation": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_cloud_garbage_collection": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_local_garbage_collection": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_read_ahead": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_recall": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive recall attempts.",
                            "type": "string"
                        },
                        "retry_coefficient_writeback": {
                            "description": "Coefficients in the quadratic function for determining the rest period between successive writeback attempts.",
                            "type": "string"
                        },
                        "sleep_timeout_archive": {
                            "description": "Amount of time to wait between successive file archive operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_cache_invalidation": {
                            "description": "Amount of time to wait between successive file cache_invalidation operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_cloud_garbage_collection": {
                            "description": "Amount of time to wait between successive file cloud garbage collection operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_local_garbage_collection": {
                            "description": "Amount of time to wait between successive file local garbage collection operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_read_ahead": {
                            "description": "Amount of time to wait between successive file read ahead operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_recall": {
                            "description": "Amount of time to wait between successive file recall operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "sleep_timeout_writeback": {
                            "description": "Amount of time to wait between successive file writeback operations.",
                            "properties": {
                                "recovery_with_tasks": {
                                    "description": "Sleep timeout for a recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "recovery_without_tasks": {
                                    "description": "Sleep timeout for a recovery thread without pending tasks",
                                    "type": "integer"
                                },
                                "with_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread with pending tasks",
                                    "type": "integer"
                                },
                                "without_tasks": {
                                    "description": "Sleep timeout for a non-recovery thread without pending tasks",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "cloud_policy_defaults": {
                    "description": "The default filepool policy values for cloud pools.",
                    "type": "object"
                },
                "retry_coefficient_archive": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive archive attempts.",
                    "type": "string"
                },
                "retry_coefficient_cache_invalidation": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.",
                    "type": "string"
                },
                "retry_coefficient_cloud_garbage_collection": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.",
                    "type": "string"
                },
                "retry_coefficient_local_garbage_collection": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.",
                    "type": "string"
                },
                "retry_coefficient_read_ahead": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.",
                    "type": "string"
                },
                "retry_coefficient_recall": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive recall attempts.",
                    "type": "string"
                },
                "retry_coefficient_writeback": {
                    "description": "Coefficients in the quadratic function for determining the rest period between successive writeback attempts.",
                    "type": "string"
                },
                "sleep_timeout_archive": {
                    "description": "Amount of time to wait between successive file archive operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_cache_invalidation": {
                    "description": "Amount of time to wait between successive file cache_invalidation operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_cloud_garbage_collection": {
                    "description": "Amount of time to wait between successive file cloud garbage collection operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_local_garbage_collection": {
                    "description": "Amount of time to wait between successive file local garbage collection operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_read_ahead": {
                    "description": "Amount of time to wait between successive file read ahead operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_recall": {
                    "description": "Amount of time to wait between successive file recall operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "sleep_timeout_writeback": {
                    "description": "Amount of time to wait between successive file writeback operations.",
                    "properties": {
                        "recovery_with_tasks": {
                            "description": "Sleep timeout for a recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "recovery_without_tasks": {
                            "description": "Sleep timeout for a recovery thread without pending tasks",
                            "type": "integer"
                        },
                        "with_tasks": {
                            "description": "Sleep timeout for a non-recovery thread with pending tasks",
                            "type": "integer"
                        },
                        "without_tasks": {
                            "description": "Sleep timeout for a non-recovery thread without pending tasks",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/3/cloud/settings/encryption-key": {
        "POST_args": {
            "description": "Regenerate master encryption key.",
            "type": "object"
        },
        "POST_output_schema": {}
    },
    "/3/cloud/settings/reporting-eula": {
        "DELETE_args": {
            "description": "Revoke acceptance of telemetry collection EULA.",
            "type": "object"
        },
        "GET_args": {
            "description": "View telemetry collection EULA acceptance and content URI.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "accepted": {
                    "description": "Indicates whether the telemetry collection warning has been acknowledged",
                    "type": "boolean"
                },
                "body": {
                    "description": "The body of the telemetry collection warning",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Accept telemetry collection EULA.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "accepted": {
                    "description": "Indicates whether the telemetry collection warning has been acknowledged",
                    "type": "boolean"
                },
                "body": {
                    "description": "The body of the telemetry collection warning",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "accepted": {
                    "description": "Indicates whether the telemetry collection warning has been acknowledged",
                    "type": "boolean"
                },
                "body": {
                    "description": "The body of the telemetry collection warning",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/add-node": {
        "POST_args": {
            "description": "Serial number and arguments of node to add.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Add Node information.",
            "properties": {
                "allow_down": {
                    "description": "Allow down nodes (Default false).",
                    "required": false,
                    "type": "boolean"
                },
                "serial_number": {
                    "description": "Serial number of this node.",
                    "required": true,
                    "type": "string"
                },
                "skip_hardware_version_check": {
                    "description": "Bypass hardware version checks (Default false).",
                    "required": false,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/config": {
        "GET_args": {
            "description": "Retrieve the cluster information.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": {
                "description": "Customer configurable description.",
                "required": true,
                "type": "string"
            },
            "devices": {
                "items": {
                    "properties": {
                        "devid": {
                            "description": "Device ID.",
                            "required": true,
                            "type": "integer"
                        },
                        "guid": {
                            "description": "Device GUID.",
                            "required": true,
                            "type": "string"
                        },
                        "is_up": {
                            "description": "If true, this node is online and communicating with the local node and every other node with the is_up property normally.  If false, this node is not currently communicating with the local node or other nodes with the is_up property.  It may be shut down, rebooting, disconnected from the backend network, or connected only to other nodes.",
                            "required": true,
                            "type": "boolean"
                        },
                        "lnn": {
                            "description": "Device logical node number.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "required": true,
                "type": "array"
            },
            "encoding": {
                "description": "Default encoding.",
                "required": true,
                "type": "string"
            },
            "guid": {
                "description": "Cluster GUID.",
                "required": true,
                "type": "string"
            },
            "has_quorum": {
                "description": "If true, the local node is in a group with quorum: It is communicating, storing, and protecting data normally with other nodes in its group.  Under normal circumstances, every node in the cluster is part of one group.",
                "required": true,
                "type": "boolean"
            },
            "is_compliance": {
                "description": "If true, the cluster is in compliance mode.  Compliance mode clusters do not allow root access and have stricter WORM (Write Once Read Many) features for retaining data in compliance with U.S. Securities and Exchange Commission rule 17a-4.",
                "required": true,
                "type": "boolean"
            },
            "is_virtual": {
                "description": "true if the cluster is deployed on a desktop VMWorkstation",
                "required": true,
                "type": "boolean"
            },
            "is_vonefs": {
                "description": "true if this is a vOneFS cluster on an ESXi",
                "required": true,
                "type": "boolean"
            },
            "join_mode": {
                "description": "Node join mode: 'manual' or 'secure'.",
                "required": true,
                "type": "string"
            },
            "local_devid": {
                "description": "Device ID of the queried node.",
                "required": true,
                "type": "integer"
            },
            "local_lnn": {
                "description": "Device logical node number of the queried node.",
                "required": true,
                "type": "integer"
            },
            "local_serial": {
                "description": "Device serial number of the queried node.",
                "required": true,
                "type": "string"
            },
            "name": {
                "description": "Cluster name.",
                "required": true,
                "type": "string"
            },
            "onefs_version": {
                "properties": {
                    "build": {
                        "description": "OneFS build string.",
                        "required": true,
                        "type": "string"
                    },
                    "copyright": {
                        "description": "Cluster copyright information.",
                        "required": true,
                        "type": "string"
                    },
                    "reldate": {
                        "description": "Timestamp of release date.",
                        "required": true,
                        "type": "integer"
                    },
                    "release": {
                        "description": "Kernel release number.",
                        "required": true,
                        "type": "string"
                    },
                    "revision": {
                        "description": "OneFS build number.",
                        "required": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "Kernel release type.",
                        "required": true,
                        "type": "string"
                    },
                    "version": {
                        "description": "Kernel full version information.",
                        "required": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "timezone": {
                "description": "The cluster timezone settings.",
                "properties": {
                    "abbreviation": {
                        "description": "Timezone abbreviation.",
                        "type": "string"
                    },
                    "custom": {
                        "description": "Customer timezone information.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Timezone full name.",
                        "type": "string"
                    },
                    "path": {
                        "description": "Timezone hierarchical name.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "upgrade_type": {
                "description": "The type of the current running upgrade (rolling, simultaneous, or assessment), or null if no upgrade is currently happening.",
                "required": true,
                "type": [
                    "null",
                    {
                        "enum": [
                            "rolling",
                            "simultaneous",
                            "assessment"
                        ],
                        "type": "string"
                    }
                ]
            }
        }
    },
    "/3/cluster/identity": {
        "GET_args": {
            "description": "Retrieve the login information.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Unprivileged cluster information for display when logging in.",
            "properties": {
                "description": {
                    "description": "A description of the cluster.",
                    "required": true,
                    "type": "string"
                },
                "logon": {
                    "description": "The information displayed when a user logs in to the cluster.",
                    "properties": {
                        "motd": {
                            "description": "The message of the day.",
                            "required": true,
                            "type": "string"
                        },
                        "motd_header": {
                            "description": "The header to the message of the day.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "name": {
                    "description": "The name of the cluster.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the login information.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Unprivileged cluster information for display when logging in.",
            "properties": {
                "description": {
                    "description": "A description of the cluster.",
                    "type": "string"
                },
                "logon": {
                    "description": "The information displayed when a user logs in to the cluster.",
                    "properties": {
                        "motd": {
                            "description": "The message of the day.",
                            "type": "string"
                        },
                        "motd_header": {
                            "description": "The header to the message of the day.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "The name of the cluster.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes": {
        "GET_args": {
            "description": "List the nodes on this cluster.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node information.",
                        "properties": {
                            "drives": {
                                "description": "List of the drives in this node.",
                                "items": {
                                    "description": "Drive information.",
                                    "properties": {
                                        "baynum": {
                                            "description": "Numerical representation of this drive's bay.",
                                            "type": "integer"
                                        },
                                        "blocks": {
                                            "description": "Number of blocks on this drive.",
                                            "type": "integer"
                                        },
                                        "chassis": {
                                            "description": "The chassis number which contains this drive.",
                                            "type": "integer"
                                        },
                                        "devname": {
                                            "description": "This drive's device name.",
                                            "type": "string"
                                        },
                                        "firmware": {
                                            "description": "Drive firmware information.",
                                            "properties": {
                                                "current_firmware": {
                                                    "description": "This drive's current firmware revision",
                                                    "type": "string"
                                                },
                                                "desired_firmware": {
                                                    "description": "This drive's desired firmware revision.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "handle": {
                                            "description": "Drive_d's handle representation for this drive",
                                            "type": "integer"
                                        },
                                        "interface_type": {
                                            "description": "String representtation of this drive's interface type.",
                                            "type": "string"
                                        },
                                        "lnum": {
                                            "description": "This drive's logical drive number in IFS.",
                                            "type": "integer"
                                        },
                                        "locnstr": {
                                            "description": "String representation of this drive's physical location.",
                                            "type": "string"
                                        },
                                        "logical_block_length": {
                                            "description": "Size of a logical block on this drive.",
                                            "type": "integer"
                                        },
                                        "media_type": {
                                            "description": "String representation of this drive's media type.",
                                            "type": "string"
                                        },
                                        "model": {
                                            "description": "This drive's manufacturer and model.",
                                            "type": "string"
                                        },
                                        "physical_block_length": {
                                            "description": "Size of a physical block on this drive.",
                                            "type": "integer"
                                        },
                                        "present": {
                                            "description": "Indicates whether this drive is physically present in the node.",
                                            "type": "boolean"
                                        },
                                        "purpose": {
                                            "description": "This drive's purpose in the DRV state machine.",
                                            "type": "string"
                                        },
                                        "purpose_description": {
                                            "description": "Description of this drive's purpose.",
                                            "type": "string"
                                        },
                                        "serial": {
                                            "description": "Serial number for this drive.",
                                            "type": "string"
                                        },
                                        "ui_state": {
                                            "description": "This drive's state as presented to the UI.",
                                            "type": "string"
                                        },
                                        "wwn": {
                                            "description": "The drive's 'worldwide name' from its NAA identifiers.",
                                            "type": "string"
                                        },
                                        "x_loc": {
                                            "description": "This drive's x-axis grid location.",
                                            "type": "integer"
                                        },
                                        "y_loc": {
                                            "description": "This drive's y-axis grid location.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "hardware": {
                                "description": "Node hardware identifying information (static).",
                                "properties": {
                                    "chassis": {
                                        "description": "Name of this node's chassis.",
                                        "type": "string"
                                    },
                                    "chassis_code": {
                                        "description": "Chassis code of this node (1U, 2U, etc.).",
                                        "type": "string"
                                    },
                                    "chassis_count": {
                                        "description": "Number of chassis making up this node.",
                                        "type": "string"
                                    },
                                    "class": {
                                        "description": "Class of this node (storage, accelerator, etc.).",
                                        "type": "string"
                                    },
                                    "configuration_id": {
                                        "description": "Node configuration ID.",
                                        "type": "string"
                                    },
                                    "cpu": {
                                        "description": "Manufacturer and model of this node's CPU.",
                                        "type": "string"
                                    },
                                    "disk_controller": {
                                        "description": "Manufacturer and model of this node's disk controller.",
                                        "type": "string"
                                    },
                                    "disk_expander": {
                                        "description": "Manufacturer and model of this node's disk expander.",
                                        "type": "string"
                                    },
                                    "family_code": {
                                        "description": "Family code of this node (X, S, NL, etc.).",
                                        "type": "string"
                                    },
                                    "flash_drive": {
                                        "description": "Manufacturer, model, and device id of this node's flash drive.",
                                        "type": "string"
                                    },
                                    "generation_code": {
                                        "description": "Generation code of this node.",
                                        "type": "string"
                                    },
                                    "hwgen": {
                                        "description": "Isilon hardware generation name.",
                                        "type": "string"
                                    },
                                    "imb_version": {
                                        "description": "Version of this node's Isilon Management Board.",
                                        "type": "string"
                                    },
                                    "infiniband": {
                                        "description": "Infiniband card type.",
                                        "type": "string"
                                    },
                                    "lcd_version": {
                                        "description": "Version of the LCD panel.",
                                        "type": "string"
                                    },
                                    "motherboard": {
                                        "description": "Manufacturer and model of this node's motherboard.",
                                        "type": "string"
                                    },
                                    "net_interfaces": {
                                        "description": "Description of all this node's network interfaces.",
                                        "type": "string"
                                    },
                                    "nvram": {
                                        "description": "Manufacturer and model of this node's NVRAM board.",
                                        "type": "string"
                                    },
                                    "powersupplies": {
                                        "description": "Description strings for each power supply on this node.",
                                        "items": {
                                            "description": "Manufacturer and firmware of this power supply.",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "processor": {
                                        "description": "Number of processors and cores on this node.",
                                        "type": "string"
                                    },
                                    "product": {
                                        "description": "Isilon product name.",
                                        "type": "string"
                                    },
                                    "ram": {
                                        "description": "Size of RAM in bytes.",
                                        "type": "integer"
                                    },
                                    "serial_number": {
                                        "description": "Serial number of this node.",
                                        "type": "string"
                                    },
                                    "series": {
                                        "description": "Series of this node (X, I, NL, etc.).",
                                        "type": "string"
                                    },
                                    "storage_class": {
                                        "description": "Storage class of this node (storage or diskless).",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "partitions": {
                                "description": "Node partition information.",
                                "properties": {
                                    "count": {
                                        "description": "Count of how many partitions are included.",
                                        "type": "integer"
                                    },
                                    "partitions": {
                                        "description": "Partition information.",
                                        "items": {
                                            "description": "Node partition information.",
                                            "properties": {
                                                "block_size": {
                                                    "description": "The block size used for the reported partition information.",
                                                    "type": "integer"
                                                },
                                                "capacity": {
                                                    "description": "Total blocks on this file system partition.",
                                                    "type": "integer"
                                                },
                                                "component_devices": {
                                                    "description": "Comma separated list of devices used for this file system partition.",
                                                    "type": "string"
                                                },
                                                "mount_point": {
                                                    "description": "Directory on which this partition is mounted.",
                                                    "type": "string"
                                                },
                                                "percent_used": {
                                                    "description": "Used blocks on this file system partition, expressed as a percentage.",
                                                    "type": "string"
                                                },
                                                "statfs": {
                                                    "description": "System partition details as provided by statfs(2).",
                                                    "properties": {
                                                        "f_bavail": {
                                                            "description": "Free blocks available to non-superuser on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_bfree": {
                                                            "description": "Free blocks on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_blocks": {
                                                            "description": "Total data blocks on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_bsize": {
                                                            "description": "Filesystem fragment size; block size in OneFS.",
                                                            "type": "integer"
                                                        },
                                                        "f_ffree": {
                                                            "description": "Free file nodes avail to non-superuser.",
                                                            "type": "integer"
                                                        },
                                                        "f_files": {
                                                            "description": "Total file nodes in filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_flags": {
                                                            "description": "Mount exported flags.",
                                                            "type": "integer"
                                                        },
                                                        "f_fstypename": {
                                                            "description": "File system type name.",
                                                            "type": "string"
                                                        },
                                                        "f_iosize": {
                                                            "description": "Optimal transfer block size.",
                                                            "type": "integer"
                                                        },
                                                        "f_mntfromname": {
                                                            "description": "Names of devices this partition is mounted from.",
                                                            "type": "string"
                                                        },
                                                        "f_mntonname": {
                                                            "description": "Directory this partition is mounted to.",
                                                            "type": "string"
                                                        },
                                                        "f_namemax": {
                                                            "description": "Maximum filename length.",
                                                            "type": "integer"
                                                        },
                                                        "f_owner": {
                                                            "description": "UID of user that mounted the filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_type": {
                                                            "description": "Type of filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_version": {
                                                            "description": "statfs() structure version number.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "used": {
                                                    "description": "Used blocks on this file system partition.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "sensors": {
                                "description": "Node sensor information (hardware reported).",
                                "properties": {
                                    "sensors": {
                                        "description": "This node's sensor information.",
                                        "items": {
                                            "description": "Node sensor information.",
                                            "properties": {
                                                "count": {
                                                    "description": "The count of values in this sensor group.",
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "description": "The name of this sensor group.",
                                                    "type": "string"
                                                },
                                                "values": {
                                                    "description": "The list of specific sensor value info in this sensor group.",
                                                    "items": {
                                                        "description": "Specific sensor value info.",
                                                        "properties": {
                                                            "desc": {
                                                                "description": "The descriptive name of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "The identifier name of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "The units of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value of this sensor.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "state": {
                                "description": "Node state information (reported and modifiable).",
                                "properties": {
                                    "readonly": {
                                        "description": "Node readonly state.",
                                        "properties": {
                                            "allowed": {
                                                "description": "The current read-only mode allowed status for the node.",
                                                "type": "boolean"
                                            },
                                            "enabled": {
                                                "description": "The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.",
                                                "type": "boolean"
                                            },
                                            "mode": {
                                                "description": "The current read-only mode status for the node.",
                                                "type": "boolean"
                                            },
                                            "status": {
                                                "description": "The current read-only mode status description for the node.",
                                                "type": "string"
                                            },
                                            "valid": {
                                                "description": "The read-only state values are valid (False = Error).",
                                                "type": "boolean"
                                            },
                                            "value": {
                                                "description": "The current read-only value (enumerated bitfield) for the node.",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "servicelight": {
                                        "description": "Node service light state.",
                                        "properties": {
                                            "enabled": {
                                                "description": "The node service light state (True = on).",
                                                "required": true,
                                                "type": "boolean"
                                            },
                                            "present": {
                                                "description": "This node has a service light.",
                                                "type": "boolean"
                                            },
                                            "supported": {
                                                "description": "This node supports a service light.",
                                                "type": "boolean"
                                            },
                                            "valid": {
                                                "description": "The node service light state is valid (False = Error).",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "smartfail": {
                                        "description": "Node smartfail state.",
                                        "properties": {
                                            "dead": {
                                                "description": "This node is dead (dead_devs).",
                                                "type": "boolean"
                                            },
                                            "down": {
                                                "description": "This node is down (down_devs).",
                                                "type": "boolean"
                                            },
                                            "in_cluster": {
                                                "description": "This node is in the cluster (all_devs).",
                                                "type": "boolean"
                                            },
                                            "readonly": {
                                                "description": "This node is readonly (ro_devs).",
                                                "type": "boolean"
                                            },
                                            "shutdown_readonly": {
                                                "description": "This node is shutdown readonly (down_devs).",
                                                "type": "boolean"
                                            },
                                            "smartfailed": {
                                                "description": "This node is smartfailed (soft_devs).",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "Node status information (hardware reported).",
                                "properties": {
                                    "batterystatus": {
                                        "description": "Battery status information.",
                                        "properties": {
                                            "last_test_time1": {
                                                "description": "The last battery test time for battery 1.",
                                                "type": "string"
                                            },
                                            "last_test_time2": {
                                                "description": "The last battery test time for battery 2.",
                                                "type": "string"
                                            },
                                            "next_test_time1": {
                                                "description": "The next checkup for battery 1.",
                                                "type": "string"
                                            },
                                            "next_test_time2": {
                                                "description": "The next checkup for battery 2.",
                                                "type": "string"
                                            },
                                            "present": {
                                                "description": "Node has battery status.",
                                                "type": "boolean"
                                            },
                                            "result1": {
                                                "description": "The result of the last battery test for battery 1.",
                                                "type": "string"
                                            },
                                            "result2": {
                                                "description": "The result of the last battery test for battery 2.",
                                                "type": "string"
                                            },
                                            "status1": {
                                                "description": "The status of battery 1.",
                                                "type": "string"
                                            },
                                            "status2": {
                                                "description": "The status of battery 2.",
                                                "type": "string"
                                            },
                                            "supported": {
                                                "description": "Node supports battery status.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "capacity": {
                                        "description": "Storage capacity of this node.",
                                        "items": {
                                            "description": "Node capacity information.",
                                            "properties": {
                                                "bytes": {
                                                    "description": "Total device storage bytes.",
                                                    "type": "integer"
                                                },
                                                "count": {
                                                    "description": "Total device count.",
                                                    "type": "integer"
                                                },
                                                "type": {
                                                    "description": "Device type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "cpu": {
                                        "description": "CPU status information for this node.",
                                        "properties": {
                                            "model": {
                                                "description": "Manufacturer model description of this CPU.",
                                                "type": "string"
                                            },
                                            "overtemp": {
                                                "description": "CPU overtemp state.",
                                                "type": "string"
                                            },
                                            "proc": {
                                                "description": "Type of processor and core of this CPU.",
                                                "type": "string"
                                            },
                                            "speed_limit": {
                                                "description": "CPU throttling (expressed as a percentage).",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "nvram": {
                                        "description": "Node NVRAM information.",
                                        "properties": {
                                            "batteries": {
                                                "description": "This node's NVRAM battery status information.",
                                                "items": {
                                                    "description": "NVRAM battery status information.",
                                                    "properties": {
                                                        "color": {
                                                            "description": "The current status color of the NVRAM battery.",
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "description": "Identifying index for the NVRAM battery.",
                                                            "type": "integer"
                                                        },
                                                        "status": {
                                                            "description": "The current status message of the NVRAM battery.",
                                                            "type": "string"
                                                        },
                                                        "voltage": {
                                                            "description": "The current voltage of the NVRAM battery.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "battery_count": {
                                                "description": "This node's NVRAM battery count.",
                                                "type": "integer"
                                            },
                                            "charge_status": {
                                                "description": "This node's NVRAM battery charge status, as a color.",
                                                "type": "string"
                                            },
                                            "charge_status_number": {
                                                "description": "This node's NVRAM battery charge status, as a number.",
                                                "type": "integer"
                                            },
                                            "device": {
                                                "description": "This node's NVRAM device name with path.",
                                                "type": "string"
                                            },
                                            "present": {
                                                "description": "This node has NVRAM.",
                                                "type": "boolean"
                                            },
                                            "present_flash": {
                                                "description": "This node has NVRAM with flash storage.",
                                                "type": "boolean"
                                            },
                                            "present_size": {
                                                "description": "The size of the NVRAM, in bytes.",
                                                "type": "integer"
                                            },
                                            "present_type": {
                                                "description": "This node's NVRAM type.",
                                                "type": "string"
                                            },
                                            "ship_mode": {
                                                "description": "This node's current ship mode state for NVRAM batteries.",
                                                "type": "integer"
                                            },
                                            "supported": {
                                                "description": "This node supports NVRAM.",
                                                "type": "boolean"
                                            },
                                            "supported_flash": {
                                                "description": "This node supports NVRAM with flash storage.",
                                                "type": "boolean"
                                            },
                                            "supported_size": {
                                                "description": "The maximum size of the NVRAM, in bytes.",
                                                "type": "integer"
                                            },
                                            "supported_type": {
                                                "description": "This node's supported NVRAM type.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "powersupplies": {
                                        "description": "Information about this node's power supplies.",
                                        "properties": {
                                            "count": {
                                                "description": "Count of how many power supplies are supported.",
                                                "type": "integer"
                                            },
                                            "failures": {
                                                "description": "Count of how many power supplies have failed.",
                                                "type": "integer"
                                            },
                                            "has_cff": {
                                                "description": "Does this node have a CFF power supply.",
                                                "type": "boolean"
                                            },
                                            "status": {
                                                "description": "A descriptive status string for this node's power supplies.",
                                                "type": "string"
                                            },
                                            "supplies": {
                                                "description": "List of this node's power supplies.",
                                                "items": {
                                                    "description": "Power supply information.",
                                                    "properties": {
                                                        "chassis": {
                                                            "description": "Which node chassis is this power supply in.",
                                                            "type": "integer"
                                                        },
                                                        "firmware": {
                                                            "description": "The current firmware revision of this power supply.",
                                                            "type": "string"
                                                        },
                                                        "good": {
                                                            "description": "Is this power supply in a failure state.",
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "description": "Identifying index for this power supply.",
                                                            "required": true,
                                                            "type": "integer"
                                                        },
                                                        "name": {
                                                            "description": "Complete identifying string for this power supply.",
                                                            "type": "string"
                                                        },
                                                        "status": {
                                                            "description": "A descriptive status string for this power supply.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "The type of this power supply.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "supports_cff": {
                                                "description": "Does this node support CFF power supplies.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "release": {
                                        "description": "OneFS release.",
                                        "type": "string"
                                    },
                                    "uptime": {
                                        "description": "Seconds this node has been online.",
                                        "type": "integer"
                                    },
                                    "version": {
                                        "description": "OneFS version.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes-available": {
        "GET_args": {
            "description": "List all nodes that are available to add to this cluster.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Available Node information.",
                        "properties": {
                            "configuration_id": {
                                "description": "Node configuration ID.",
                                "type": "string"
                            },
                            "description": {
                                "description": "Human-readable description giving further detail on status (may be empty)",
                                "required": false,
                                "type": "string"
                            },
                            "product": {
                                "description": "Isilon product name.",
                                "type": "string"
                            },
                            "serial_number": {
                                "description": "Serial number of this node.",
                                "type": "string"
                            },
                            "status": {
                                "description": "Availability of the node.",
                                "enum": [
                                    "available",
                                    "waiting",
                                    "error",
                                    "error_permanent",
                                    "working",
                                    "rebooting",
                                    "exiting"
                                ],
                                "type": "string"
                            },
                            "version": {
                                "description": "OneFS build version running on the node.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>": {
        "GET_args": {
            "description": "Retrieve node information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node information.",
                        "properties": {
                            "drives": {
                                "description": "List of the drives in this node.",
                                "items": {
                                    "description": "Drive information.",
                                    "properties": {
                                        "baynum": {
                                            "description": "Numerical representation of this drive's bay.",
                                            "type": "integer"
                                        },
                                        "blocks": {
                                            "description": "Number of blocks on this drive.",
                                            "type": "integer"
                                        },
                                        "chassis": {
                                            "description": "The chassis number which contains this drive.",
                                            "type": "integer"
                                        },
                                        "devname": {
                                            "description": "This drive's device name.",
                                            "type": "string"
                                        },
                                        "firmware": {
                                            "description": "Drive firmware information.",
                                            "properties": {
                                                "current_firmware": {
                                                    "description": "This drive's current firmware revision",
                                                    "type": "string"
                                                },
                                                "desired_firmware": {
                                                    "description": "This drive's desired firmware revision.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "handle": {
                                            "description": "Drive_d's handle representation for this drive",
                                            "type": "integer"
                                        },
                                        "interface_type": {
                                            "description": "String representtation of this drive's interface type.",
                                            "type": "string"
                                        },
                                        "lnum": {
                                            "description": "This drive's logical drive number in IFS.",
                                            "type": "integer"
                                        },
                                        "locnstr": {
                                            "description": "String representation of this drive's physical location.",
                                            "type": "string"
                                        },
                                        "logical_block_length": {
                                            "description": "Size of a logical block on this drive.",
                                            "type": "integer"
                                        },
                                        "media_type": {
                                            "description": "String representation of this drive's media type.",
                                            "type": "string"
                                        },
                                        "model": {
                                            "description": "This drive's manufacturer and model.",
                                            "type": "string"
                                        },
                                        "physical_block_length": {
                                            "description": "Size of a physical block on this drive.",
                                            "type": "integer"
                                        },
                                        "present": {
                                            "description": "Indicates whether this drive is physically present in the node.",
                                            "type": "boolean"
                                        },
                                        "purpose": {
                                            "description": "This drive's purpose in the DRV state machine.",
                                            "type": "string"
                                        },
                                        "purpose_description": {
                                            "description": "Description of this drive's purpose.",
                                            "type": "string"
                                        },
                                        "serial": {
                                            "description": "Serial number for this drive.",
                                            "type": "string"
                                        },
                                        "ui_state": {
                                            "description": "This drive's state as presented to the UI.",
                                            "type": "string"
                                        },
                                        "wwn": {
                                            "description": "The drive's 'worldwide name' from its NAA identifiers.",
                                            "type": "string"
                                        },
                                        "x_loc": {
                                            "description": "This drive's x-axis grid location.",
                                            "type": "integer"
                                        },
                                        "y_loc": {
                                            "description": "This drive's y-axis grid location.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "hardware": {
                                "description": "Node hardware identifying information (static).",
                                "properties": {
                                    "chassis": {
                                        "description": "Name of this node's chassis.",
                                        "type": "string"
                                    },
                                    "chassis_code": {
                                        "description": "Chassis code of this node (1U, 2U, etc.).",
                                        "type": "string"
                                    },
                                    "chassis_count": {
                                        "description": "Number of chassis making up this node.",
                                        "type": "string"
                                    },
                                    "class": {
                                        "description": "Class of this node (storage, accelerator, etc.).",
                                        "type": "string"
                                    },
                                    "configuration_id": {
                                        "description": "Node configuration ID.",
                                        "type": "string"
                                    },
                                    "cpu": {
                                        "description": "Manufacturer and model of this node's CPU.",
                                        "type": "string"
                                    },
                                    "disk_controller": {
                                        "description": "Manufacturer and model of this node's disk controller.",
                                        "type": "string"
                                    },
                                    "disk_expander": {
                                        "description": "Manufacturer and model of this node's disk expander.",
                                        "type": "string"
                                    },
                                    "family_code": {
                                        "description": "Family code of this node (X, S, NL, etc.).",
                                        "type": "string"
                                    },
                                    "flash_drive": {
                                        "description": "Manufacturer, model, and device id of this node's flash drive.",
                                        "type": "string"
                                    },
                                    "generation_code": {
                                        "description": "Generation code of this node.",
                                        "type": "string"
                                    },
                                    "hwgen": {
                                        "description": "Isilon hardware generation name.",
                                        "type": "string"
                                    },
                                    "imb_version": {
                                        "description": "Version of this node's Isilon Management Board.",
                                        "type": "string"
                                    },
                                    "infiniband": {
                                        "description": "Infiniband card type.",
                                        "type": "string"
                                    },
                                    "lcd_version": {
                                        "description": "Version of the LCD panel.",
                                        "type": "string"
                                    },
                                    "motherboard": {
                                        "description": "Manufacturer and model of this node's motherboard.",
                                        "type": "string"
                                    },
                                    "net_interfaces": {
                                        "description": "Description of all this node's network interfaces.",
                                        "type": "string"
                                    },
                                    "nvram": {
                                        "description": "Manufacturer and model of this node's NVRAM board.",
                                        "type": "string"
                                    },
                                    "powersupplies": {
                                        "description": "Description strings for each power supply on this node.",
                                        "items": {
                                            "description": "Manufacturer and firmware of this power supply.",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "processor": {
                                        "description": "Number of processors and cores on this node.",
                                        "type": "string"
                                    },
                                    "product": {
                                        "description": "Isilon product name.",
                                        "type": "string"
                                    },
                                    "ram": {
                                        "description": "Size of RAM in bytes.",
                                        "type": "integer"
                                    },
                                    "serial_number": {
                                        "description": "Serial number of this node.",
                                        "type": "string"
                                    },
                                    "series": {
                                        "description": "Series of this node (X, I, NL, etc.).",
                                        "type": "string"
                                    },
                                    "storage_class": {
                                        "description": "Storage class of this node (storage or diskless).",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "partitions": {
                                "description": "Node partition information.",
                                "properties": {
                                    "count": {
                                        "description": "Count of how many partitions are included.",
                                        "type": "integer"
                                    },
                                    "partitions": {
                                        "description": "Partition information.",
                                        "items": {
                                            "description": "Node partition information.",
                                            "properties": {
                                                "block_size": {
                                                    "description": "The block size used for the reported partition information.",
                                                    "type": "integer"
                                                },
                                                "capacity": {
                                                    "description": "Total blocks on this file system partition.",
                                                    "type": "integer"
                                                },
                                                "component_devices": {
                                                    "description": "Comma separated list of devices used for this file system partition.",
                                                    "type": "string"
                                                },
                                                "mount_point": {
                                                    "description": "Directory on which this partition is mounted.",
                                                    "type": "string"
                                                },
                                                "percent_used": {
                                                    "description": "Used blocks on this file system partition, expressed as a percentage.",
                                                    "type": "string"
                                                },
                                                "statfs": {
                                                    "description": "System partition details as provided by statfs(2).",
                                                    "properties": {
                                                        "f_bavail": {
                                                            "description": "Free blocks available to non-superuser on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_bfree": {
                                                            "description": "Free blocks on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_blocks": {
                                                            "description": "Total data blocks on this partition.",
                                                            "type": "integer"
                                                        },
                                                        "f_bsize": {
                                                            "description": "Filesystem fragment size; block size in OneFS.",
                                                            "type": "integer"
                                                        },
                                                        "f_ffree": {
                                                            "description": "Free file nodes avail to non-superuser.",
                                                            "type": "integer"
                                                        },
                                                        "f_files": {
                                                            "description": "Total file nodes in filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_flags": {
                                                            "description": "Mount exported flags.",
                                                            "type": "integer"
                                                        },
                                                        "f_fstypename": {
                                                            "description": "File system type name.",
                                                            "type": "string"
                                                        },
                                                        "f_iosize": {
                                                            "description": "Optimal transfer block size.",
                                                            "type": "integer"
                                                        },
                                                        "f_mntfromname": {
                                                            "description": "Names of devices this partition is mounted from.",
                                                            "type": "string"
                                                        },
                                                        "f_mntonname": {
                                                            "description": "Directory this partition is mounted to.",
                                                            "type": "string"
                                                        },
                                                        "f_namemax": {
                                                            "description": "Maximum filename length.",
                                                            "type": "integer"
                                                        },
                                                        "f_owner": {
                                                            "description": "UID of user that mounted the filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_type": {
                                                            "description": "Type of filesystem.",
                                                            "type": "integer"
                                                        },
                                                        "f_version": {
                                                            "description": "statfs() structure version number.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "used": {
                                                    "description": "Used blocks on this file system partition.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "sensors": {
                                "description": "Node sensor information (hardware reported).",
                                "properties": {
                                    "sensors": {
                                        "description": "This node's sensor information.",
                                        "items": {
                                            "description": "Node sensor information.",
                                            "properties": {
                                                "count": {
                                                    "description": "The count of values in this sensor group.",
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "description": "The name of this sensor group.",
                                                    "type": "string"
                                                },
                                                "values": {
                                                    "description": "The list of specific sensor value info in this sensor group.",
                                                    "items": {
                                                        "description": "Specific sensor value info.",
                                                        "properties": {
                                                            "desc": {
                                                                "description": "The descriptive name of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "The identifier name of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "units": {
                                                                "description": "The units of this sensor.",
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value of this sensor.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "state": {
                                "description": "Node state information (reported and modifiable).",
                                "properties": {
                                    "readonly": {
                                        "description": "Node readonly state.",
                                        "properties": {
                                            "allowed": {
                                                "description": "The current read-only mode allowed status for the node.",
                                                "type": "boolean"
                                            },
                                            "enabled": {
                                                "description": "The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.",
                                                "type": "boolean"
                                            },
                                            "mode": {
                                                "description": "The current read-only mode status for the node.",
                                                "type": "boolean"
                                            },
                                            "status": {
                                                "description": "The current read-only mode status description for the node.",
                                                "type": "string"
                                            },
                                            "valid": {
                                                "description": "The read-only state values are valid (False = Error).",
                                                "type": "boolean"
                                            },
                                            "value": {
                                                "description": "The current read-only value (enumerated bitfield) for the node.",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "servicelight": {
                                        "description": "Node service light state.",
                                        "properties": {
                                            "enabled": {
                                                "description": "The node service light state (True = on).",
                                                "required": true,
                                                "type": "boolean"
                                            },
                                            "present": {
                                                "description": "This node has a service light.",
                                                "type": "boolean"
                                            },
                                            "supported": {
                                                "description": "This node supports a service light.",
                                                "type": "boolean"
                                            },
                                            "valid": {
                                                "description": "The node service light state is valid (False = Error).",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "smartfail": {
                                        "description": "Node smartfail state.",
                                        "properties": {
                                            "dead": {
                                                "description": "This node is dead (dead_devs).",
                                                "type": "boolean"
                                            },
                                            "down": {
                                                "description": "This node is down (down_devs).",
                                                "type": "boolean"
                                            },
                                            "in_cluster": {
                                                "description": "This node is in the cluster (all_devs).",
                                                "type": "boolean"
                                            },
                                            "readonly": {
                                                "description": "This node is readonly (ro_devs).",
                                                "type": "boolean"
                                            },
                                            "shutdown_readonly": {
                                                "description": "This node is shutdown readonly (down_devs).",
                                                "type": "boolean"
                                            },
                                            "smartfailed": {
                                                "description": "This node is smartfailed (soft_devs).",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "Node status information (hardware reported).",
                                "properties": {
                                    "batterystatus": {
                                        "description": "Battery status information.",
                                        "properties": {
                                            "last_test_time1": {
                                                "description": "The last battery test time for battery 1.",
                                                "type": "string"
                                            },
                                            "last_test_time2": {
                                                "description": "The last battery test time for battery 2.",
                                                "type": "string"
                                            },
                                            "next_test_time1": {
                                                "description": "The next checkup for battery 1.",
                                                "type": "string"
                                            },
                                            "next_test_time2": {
                                                "description": "The next checkup for battery 2.",
                                                "type": "string"
                                            },
                                            "present": {
                                                "description": "Node has battery status.",
                                                "type": "boolean"
                                            },
                                            "result1": {
                                                "description": "The result of the last battery test for battery 1.",
                                                "type": "string"
                                            },
                                            "result2": {
                                                "description": "The result of the last battery test for battery 2.",
                                                "type": "string"
                                            },
                                            "status1": {
                                                "description": "The status of battery 1.",
                                                "type": "string"
                                            },
                                            "status2": {
                                                "description": "The status of battery 2.",
                                                "type": "string"
                                            },
                                            "supported": {
                                                "description": "Node supports battery status.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "capacity": {
                                        "description": "Storage capacity of this node.",
                                        "items": {
                                            "description": "Node capacity information.",
                                            "properties": {
                                                "bytes": {
                                                    "description": "Total device storage bytes.",
                                                    "type": "integer"
                                                },
                                                "count": {
                                                    "description": "Total device count.",
                                                    "type": "integer"
                                                },
                                                "type": {
                                                    "description": "Device type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "cpu": {
                                        "description": "CPU status information for this node.",
                                        "properties": {
                                            "model": {
                                                "description": "Manufacturer model description of this CPU.",
                                                "type": "string"
                                            },
                                            "overtemp": {
                                                "description": "CPU overtemp state.",
                                                "type": "string"
                                            },
                                            "proc": {
                                                "description": "Type of processor and core of this CPU.",
                                                "type": "string"
                                            },
                                            "speed_limit": {
                                                "description": "CPU throttling (expressed as a percentage).",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "nvram": {
                                        "description": "Node NVRAM information.",
                                        "properties": {
                                            "batteries": {
                                                "description": "This node's NVRAM battery status information.",
                                                "items": {
                                                    "description": "NVRAM battery status information.",
                                                    "properties": {
                                                        "color": {
                                                            "description": "The current status color of the NVRAM battery.",
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "description": "Identifying index for the NVRAM battery.",
                                                            "type": "integer"
                                                        },
                                                        "status": {
                                                            "description": "The current status message of the NVRAM battery.",
                                                            "type": "string"
                                                        },
                                                        "voltage": {
                                                            "description": "The current voltage of the NVRAM battery.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "battery_count": {
                                                "description": "This node's NVRAM battery count.",
                                                "type": "integer"
                                            },
                                            "charge_status": {
                                                "description": "This node's NVRAM battery charge status, as a color.",
                                                "type": "string"
                                            },
                                            "charge_status_number": {
                                                "description": "This node's NVRAM battery charge status, as a number.",
                                                "type": "integer"
                                            },
                                            "device": {
                                                "description": "This node's NVRAM device name with path.",
                                                "type": "string"
                                            },
                                            "present": {
                                                "description": "This node has NVRAM.",
                                                "type": "boolean"
                                            },
                                            "present_flash": {
                                                "description": "This node has NVRAM with flash storage.",
                                                "type": "boolean"
                                            },
                                            "present_size": {
                                                "description": "The size of the NVRAM, in bytes.",
                                                "type": "integer"
                                            },
                                            "present_type": {
                                                "description": "This node's NVRAM type.",
                                                "type": "string"
                                            },
                                            "ship_mode": {
                                                "description": "This node's current ship mode state for NVRAM batteries.",
                                                "type": "integer"
                                            },
                                            "supported": {
                                                "description": "This node supports NVRAM.",
                                                "type": "boolean"
                                            },
                                            "supported_flash": {
                                                "description": "This node supports NVRAM with flash storage.",
                                                "type": "boolean"
                                            },
                                            "supported_size": {
                                                "description": "The maximum size of the NVRAM, in bytes.",
                                                "type": "integer"
                                            },
                                            "supported_type": {
                                                "description": "This node's supported NVRAM type.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "powersupplies": {
                                        "description": "Information about this node's power supplies.",
                                        "properties": {
                                            "count": {
                                                "description": "Count of how many power supplies are supported.",
                                                "type": "integer"
                                            },
                                            "failures": {
                                                "description": "Count of how many power supplies have failed.",
                                                "type": "integer"
                                            },
                                            "has_cff": {
                                                "description": "Does this node have a CFF power supply.",
                                                "type": "boolean"
                                            },
                                            "status": {
                                                "description": "A descriptive status string for this node's power supplies.",
                                                "type": "string"
                                            },
                                            "supplies": {
                                                "description": "List of this node's power supplies.",
                                                "items": {
                                                    "description": "Power supply information.",
                                                    "properties": {
                                                        "chassis": {
                                                            "description": "Which node chassis is this power supply in.",
                                                            "type": "integer"
                                                        },
                                                        "firmware": {
                                                            "description": "The current firmware revision of this power supply.",
                                                            "type": "string"
                                                        },
                                                        "good": {
                                                            "description": "Is this power supply in a failure state.",
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "description": "Identifying index for this power supply.",
                                                            "required": true,
                                                            "type": "integer"
                                                        },
                                                        "name": {
                                                            "description": "Complete identifying string for this power supply.",
                                                            "type": "string"
                                                        },
                                                        "status": {
                                                            "description": "A descriptive status string for this power supply.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "The type of this power supply.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "supports_cff": {
                                                "description": "Does this node support CFF power supplies.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "release": {
                                        "description": "OneFS release.",
                                        "type": "string"
                                    },
                                    "uptime": {
                                        "description": "Seconds this node has been online.",
                                        "type": "integer"
                                    },
                                    "version": {
                                        "description": "OneFS version.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more node settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Node information.",
            "properties": {
                "drives": {
                    "description": "List of the drives in this node.",
                    "items": {
                        "description": "Drive information.",
                        "properties": {
                            "baynum": {
                                "description": "Numerical representation of this drive's bay.",
                                "type": "integer"
                            },
                            "blocks": {
                                "description": "Number of blocks on this drive.",
                                "type": "integer"
                            },
                            "chassis": {
                                "description": "The chassis number which contains this drive.",
                                "type": "integer"
                            },
                            "devname": {
                                "description": "This drive's device name.",
                                "type": "string"
                            },
                            "firmware": {
                                "description": "Drive firmware information.",
                                "properties": {
                                    "current_firmware": {
                                        "description": "This drive's current firmware revision",
                                        "type": "string"
                                    },
                                    "desired_firmware": {
                                        "description": "This drive's desired firmware revision.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "handle": {
                                "description": "Drive_d's handle representation for this drive",
                                "type": "integer"
                            },
                            "interface_type": {
                                "description": "String representtation of this drive's interface type.",
                                "type": "string"
                            },
                            "lnum": {
                                "description": "This drive's logical drive number in IFS.",
                                "type": "integer"
                            },
                            "locnstr": {
                                "description": "String representation of this drive's physical location.",
                                "type": "string"
                            },
                            "logical_block_length": {
                                "description": "Size of a logical block on this drive.",
                                "type": "integer"
                            },
                            "media_type": {
                                "description": "String representation of this drive's media type.",
                                "type": "string"
                            },
                            "model": {
                                "description": "This drive's manufacturer and model.",
                                "type": "string"
                            },
                            "physical_block_length": {
                                "description": "Size of a physical block on this drive.",
                                "type": "integer"
                            },
                            "present": {
                                "description": "Indicates whether this drive is physically present in the node.",
                                "type": "boolean"
                            },
                            "purpose": {
                                "description": "This drive's purpose in the DRV state machine.",
                                "type": "string"
                            },
                            "purpose_description": {
                                "description": "Description of this drive's purpose.",
                                "type": "string"
                            },
                            "serial": {
                                "description": "Serial number for this drive.",
                                "type": "string"
                            },
                            "ui_state": {
                                "description": "This drive's state as presented to the UI.",
                                "type": "string"
                            },
                            "wwn": {
                                "description": "The drive's 'worldwide name' from its NAA identifiers.",
                                "type": "string"
                            },
                            "x_loc": {
                                "description": "This drive's x-axis grid location.",
                                "type": "integer"
                            },
                            "y_loc": {
                                "description": "This drive's y-axis grid location.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "state": {
                    "description": "Node state information (reported and modifiable).",
                    "properties": {
                        "readonly": {
                            "description": "Node readonly state.",
                            "properties": {},
                            "type": "object"
                        },
                        "servicelight": {
                            "description": "Node service light state.",
                            "properties": {
                                "enabled": {
                                    "description": "The node service light state (True = on).",
                                    "required": true,
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "smartfail": {
                            "description": "Node smartfail state.",
                            "properties": {
                                "smartfailed": {
                                    "description": "This node is smartfailed (soft_devs).",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/drives": {
        "GET_args": {
            "description": "List the drives on this node.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Information about this node's drives.",
                        "properties": {
                            "drives": {
                                "description": "List of the drives in this node.",
                                "items": {
                                    "description": "Drive information.",
                                    "properties": {
                                        "baynum": {
                                            "description": "Numerical representation of this drive's bay.",
                                            "type": "integer"
                                        },
                                        "blocks": {
                                            "description": "Number of blocks on this drive.",
                                            "type": "integer"
                                        },
                                        "chassis": {
                                            "description": "The chassis number which contains this drive.",
                                            "type": "integer"
                                        },
                                        "devname": {
                                            "description": "This drive's device name.",
                                            "type": "string"
                                        },
                                        "firmware": {
                                            "description": "Drive firmware information.",
                                            "properties": {
                                                "current_firmware": {
                                                    "description": "This drive's current firmware revision",
                                                    "type": "string"
                                                },
                                                "desired_firmware": {
                                                    "description": "This drive's desired firmware revision.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "handle": {
                                            "description": "Drive_d's handle representation for this drive",
                                            "type": "integer"
                                        },
                                        "interface_type": {
                                            "description": "String representtation of this drive's interface type.",
                                            "type": "string"
                                        },
                                        "lnum": {
                                            "description": "This drive's logical drive number in IFS.",
                                            "type": "integer"
                                        },
                                        "locnstr": {
                                            "description": "String representation of this drive's physical location.",
                                            "type": "string"
                                        },
                                        "logical_block_length": {
                                            "description": "Size of a logical block on this drive.",
                                            "type": "integer"
                                        },
                                        "media_type": {
                                            "description": "String representation of this drive's media type.",
                                            "type": "string"
                                        },
                                        "model": {
                                            "description": "This drive's manufacturer and model.",
                                            "type": "string"
                                        },
                                        "physical_block_length": {
                                            "description": "Size of a physical block on this drive.",
                                            "type": "integer"
                                        },
                                        "present": {
                                            "description": "Indicates whether this drive is physically present in the node.",
                                            "type": "boolean"
                                        },
                                        "purpose": {
                                            "description": "This drive's purpose in the DRV state machine.",
                                            "type": "string"
                                        },
                                        "purpose_description": {
                                            "description": "Description of this drive's purpose.",
                                            "type": "string"
                                        },
                                        "serial": {
                                            "description": "Serial number for this drive.",
                                            "type": "string"
                                        },
                                        "ui_state": {
                                            "description": "This drive's state as presented to the UI.",
                                            "type": "string"
                                        },
                                        "wwn": {
                                            "description": "The drive's 'worldwide name' from its NAA identifiers.",
                                            "type": "string"
                                        },
                                        "x_loc": {
                                            "description": "This drive's x-axis grid location.",
                                            "type": "integer"
                                        },
                                        "y_loc": {
                                            "description": "This drive's y-axis grid location.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/drives-purposelist": {
        "GET_args": {
            "description": "Lists the available purposes for drives in this node.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Information about this node's drive purposes.",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "purposes": {
                                "description": "List of the drive purposes available on this node.",
                                "items": {
                                    "description": "Purpose information.",
                                    "properties": {
                                        "purpose": {
                                            "description": "String representation of this purpose for API use.",
                                            "type": "string"
                                        },
                                        "purpose_description": {
                                            "description": "A description of this purpose.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>": {
        "GET_args": {
            "description": "Retrieve drive information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Information about this node's drives.",
                        "properties": {
                            "drives": {
                                "description": "List of the drives in this node.",
                                "items": {
                                    "description": "Drive information.",
                                    "properties": {
                                        "baynum": {
                                            "description": "Numerical representation of this drive's bay.",
                                            "type": "integer"
                                        },
                                        "blocks": {
                                            "description": "Number of blocks on this drive.",
                                            "type": "integer"
                                        },
                                        "chassis": {
                                            "description": "The chassis number which contains this drive.",
                                            "type": "integer"
                                        },
                                        "devname": {
                                            "description": "This drive's device name.",
                                            "type": "string"
                                        },
                                        "firmware": {
                                            "description": "Drive firmware information.",
                                            "properties": {
                                                "current_firmware": {
                                                    "description": "This drive's current firmware revision",
                                                    "type": "string"
                                                },
                                                "desired_firmware": {
                                                    "description": "This drive's desired firmware revision.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "handle": {
                                            "description": "Drive_d's handle representation for this drive",
                                            "type": "integer"
                                        },
                                        "interface_type": {
                                            "description": "String representtation of this drive's interface type.",
                                            "type": "string"
                                        },
                                        "lnum": {
                                            "description": "This drive's logical drive number in IFS.",
                                            "type": "integer"
                                        },
                                        "locnstr": {
                                            "description": "String representation of this drive's physical location.",
                                            "type": "string"
                                        },
                                        "logical_block_length": {
                                            "description": "Size of a logical block on this drive.",
                                            "type": "integer"
                                        },
                                        "media_type": {
                                            "description": "String representation of this drive's media type.",
                                            "type": "string"
                                        },
                                        "model": {
                                            "description": "This drive's manufacturer and model.",
                                            "type": "string"
                                        },
                                        "physical_block_length": {
                                            "description": "Size of a physical block on this drive.",
                                            "type": "integer"
                                        },
                                        "present": {
                                            "description": "Indicates whether this drive is physically present in the node.",
                                            "type": "boolean"
                                        },
                                        "purpose": {
                                            "description": "This drive's purpose in the DRV state machine.",
                                            "type": "string"
                                        },
                                        "purpose_description": {
                                            "description": "Description of this drive's purpose.",
                                            "type": "string"
                                        },
                                        "serial": {
                                            "description": "Serial number for this drive.",
                                            "type": "string"
                                        },
                                        "ui_state": {
                                            "description": "This drive's state as presented to the UI.",
                                            "type": "string"
                                        },
                                        "wwn": {
                                            "description": "The drive's 'worldwide name' from its NAA identifiers.",
                                            "type": "string"
                                        },
                                        "x_loc": {
                                            "description": "This drive's x-axis grid location.",
                                            "type": "integer"
                                        },
                                        "y_loc": {
                                            "description": "This drive's y-axis grid location.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/add": {
        "POST_args": {
            "description": "Add a drive to a node.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/firmware": {
        "GET_args": {
            "description": "Retrieve drive firmware information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Information about this node's drive firmware.",
                        "properties": {
                            "drives": {
                                "description": "List of the firmware revisions on the drives in this node.",
                                "items": {
                                    "description": "Drive firmware information.",
                                    "properties": {
                                        "baynum": {
                                            "description": "Numerical representation of this drive's bay.",
                                            "type": "integer"
                                        },
                                        "current_firmware": {
                                            "description": "This drive's current firmware revision",
                                            "type": "string"
                                        },
                                        "desired_firmware": {
                                            "description": "This drive's desired firmware revision.",
                                            "type": "string"
                                        },
                                        "devname": {
                                            "description": "This drive's device name.",
                                            "type": "string"
                                        },
                                        "lnum": {
                                            "description": "This drive's logical drive number in IFS.",
                                            "type": "integer"
                                        },
                                        "locnstr": {
                                            "description": "String representation of this drive's physical location.",
                                            "type": "string"
                                        },
                                        "model": {
                                            "description": "This drive's manufacturer and model.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/firmware/update": {
        "GET_args": {
            "description": "Retrieve firmware update information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Drive firmware update information.",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "status": {
                                "description": "Drive firmware update status information.",
                                "properties": {
                                    "failed": {
                                        "description": "The number of drives that did not successfully complete firmware updates update on the node.",
                                        "type": "integer"
                                    },
                                    "finish_time": {
                                        "description": "Time when drive firmware update finished on node.",
                                        "type": "string"
                                    },
                                    "remaining": {
                                        "description": "Number of drives remaining to be updated on node.",
                                        "type": "integer"
                                    },
                                    "start_time": {
                                        "description": "Time when drive firmware update started on node.",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Overall status of this nodes firmware updates.",
                                        "type": "string"
                                    },
                                    "updated": {
                                        "description": "The number of drives that completed firmware updates on the node.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Start a drive firmware update.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Drive firmware update information.",
            "properties": {
                "cluster_wide": {
                    "description": "Indicates whether this is a cluster wide drive firwmare update or not",
                    "required": true,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/format": {
        "POST_args": {
            "description": "Format a drive for use by OneFS.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Drive purpose information.",
            "properties": {
                "purpose": {
                    "description": "The purpose to which this drive should be formatted. If not specified, defaults to 'None', which will be automatically purposed based on node configuration and drive type.",
                    "required": false,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/purpose": {
        "POST_args": {
            "description": "Assign a drive to a specific use case.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Drive purpose information.",
            "properties": {
                "purpose": {
                    "description": "The purpose to which this drive should be assigned. This field is required for the 'purpose' action.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/smartfail": {
        "POST_args": {
            "description": "Remove a drive from use by OneFS.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/stopfail": {
        "POST_args": {
            "description": "Stop restriping from a smartfailing drive.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/suspend": {
        "POST_args": {
            "description": "Temporarily remove a drive from use by OneFS.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/hardware": {
        "GET_args": {
            "description": "Retrieve node hardware identity information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node hardware identifying information (static).",
                        "properties": {
                            "chassis": {
                                "description": "Name of this node's chassis.",
                                "type": "string"
                            },
                            "chassis_code": {
                                "description": "Chassis code of this node (1U, 2U, etc.).",
                                "type": "string"
                            },
                            "chassis_count": {
                                "description": "Number of chassis making up this node.",
                                "type": "string"
                            },
                            "class": {
                                "description": "Class of this node (storage, accelerator, etc.).",
                                "type": "string"
                            },
                            "configuration_id": {
                                "description": "Node configuration ID.",
                                "type": "string"
                            },
                            "cpu": {
                                "description": "Manufacturer and model of this node's CPU.",
                                "type": "string"
                            },
                            "disk_controller": {
                                "description": "Manufacturer and model of this node's disk controller.",
                                "type": "string"
                            },
                            "disk_expander": {
                                "description": "Manufacturer and model of this node's disk expander.",
                                "type": "string"
                            },
                            "family_code": {
                                "description": "Family code of this node (X, S, NL, etc.).",
                                "type": "string"
                            },
                            "flash_drive": {
                                "description": "Manufacturer, model, and device id of this node's flash drive.",
                                "type": "string"
                            },
                            "generation_code": {
                                "description": "Generation code of this node.",
                                "type": "string"
                            },
                            "hwgen": {
                                "description": "Isilon hardware generation name.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "imb_version": {
                                "description": "Version of this node's Isilon Management Board.",
                                "type": "string"
                            },
                            "infiniband": {
                                "description": "Infiniband card type.",
                                "type": "string"
                            },
                            "lcd_version": {
                                "description": "Version of the LCD panel.",
                                "type": "string"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "motherboard": {
                                "description": "Manufacturer and model of this node's motherboard.",
                                "type": "string"
                            },
                            "net_interfaces": {
                                "description": "Description of all this node's network interfaces.",
                                "type": "string"
                            },
                            "nvram": {
                                "description": "Manufacturer and model of this node's NVRAM board.",
                                "type": "string"
                            },
                            "powersupplies": {
                                "description": "Description strings for each power supply on this node.",
                                "items": {
                                    "description": "Manufacturer and firmware of this power supply.",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "processor": {
                                "description": "Number of processors and cores on this node.",
                                "type": "string"
                            },
                            "product": {
                                "description": "Isilon product name.",
                                "type": "string"
                            },
                            "ram": {
                                "description": "Size of RAM in bytes.",
                                "type": "integer"
                            },
                            "serial_number": {
                                "description": "Serial number of this node.",
                                "type": "string"
                            },
                            "series": {
                                "description": "Series of this node (X, I, NL, etc.).",
                                "type": "string"
                            },
                            "storage_class": {
                                "description": "Storage class of this node (storage or diskless).",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/hardware-fast": {
        "GET_args": {
            "description": "Quickly retrieve a subset of node hardware identity information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Fast subset of node hardware identifying information (static).",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "product": {
                                "description": "Isilon product name.",
                                "type": "string"
                            },
                            "serial_number": {
                                "description": "Serial number of this node.",
                                "type": "string"
                            },
                            "storage_class": {
                                "description": "Storage class of this node (storage or diskless).",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/partitions": {
        "GET_args": {
            "description": "Retrieve node partition information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node partition information.",
                        "properties": {
                            "count": {
                                "description": "Count of how many partitions are included.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "partitions": {
                                "description": "Partition information.",
                                "items": {
                                    "description": "Node partition information.",
                                    "properties": {
                                        "block_size": {
                                            "description": "The block size used for the reported partition information.",
                                            "type": "integer"
                                        },
                                        "capacity": {
                                            "description": "Total blocks on this file system partition.",
                                            "type": "integer"
                                        },
                                        "component_devices": {
                                            "description": "Comma separated list of devices used for this file system partition.",
                                            "type": "string"
                                        },
                                        "mount_point": {
                                            "description": "Directory on which this partition is mounted.",
                                            "type": "string"
                                        },
                                        "percent_used": {
                                            "description": "Used blocks on this file system partition, expressed as a percentage.",
                                            "type": "string"
                                        },
                                        "statfs": {
                                            "description": "System partition details as provided by statfs(2).",
                                            "properties": {
                                                "f_bavail": {
                                                    "description": "Free blocks available to non-superuser on this partition.",
                                                    "type": "integer"
                                                },
                                                "f_bfree": {
                                                    "description": "Free blocks on this partition.",
                                                    "type": "integer"
                                                },
                                                "f_blocks": {
                                                    "description": "Total data blocks on this partition.",
                                                    "type": "integer"
                                                },
                                                "f_bsize": {
                                                    "description": "Filesystem fragment size; block size in OneFS.",
                                                    "type": "integer"
                                                },
                                                "f_ffree": {
                                                    "description": "Free file nodes avail to non-superuser.",
                                                    "type": "integer"
                                                },
                                                "f_files": {
                                                    "description": "Total file nodes in filesystem.",
                                                    "type": "integer"
                                                },
                                                "f_flags": {
                                                    "description": "Mount exported flags.",
                                                    "type": "integer"
                                                },
                                                "f_fstypename": {
                                                    "description": "File system type name.",
                                                    "type": "string"
                                                },
                                                "f_iosize": {
                                                    "description": "Optimal transfer block size.",
                                                    "type": "integer"
                                                },
                                                "f_mntfromname": {
                                                    "description": "Names of devices this partition is mounted from.",
                                                    "type": "string"
                                                },
                                                "f_mntonname": {
                                                    "description": "Directory this partition is mounted to.",
                                                    "type": "string"
                                                },
                                                "f_namemax": {
                                                    "description": "Maximum filename length.",
                                                    "type": "integer"
                                                },
                                                "f_owner": {
                                                    "description": "UID of user that mounted the filesystem.",
                                                    "type": "integer"
                                                },
                                                "f_type": {
                                                    "description": "Type of filesystem.",
                                                    "type": "integer"
                                                },
                                                "f_version": {
                                                    "description": "statfs() structure version number.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "used": {
                                            "description": "Used blocks on this file system partition.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/reboot": {
        "POST_args": {
            "description": "Reboot the node specified by <LNN>.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/sensors": {
        "GET_args": {
            "description": "Retrieve node sensor information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node sensor information (hardware reported).",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "sensors": {
                                "description": "This node's sensor information.",
                                "items": {
                                    "description": "Node sensor information.",
                                    "properties": {
                                        "count": {
                                            "description": "The count of values in this sensor group.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of this sensor group.",
                                            "type": "string"
                                        },
                                        "values": {
                                            "description": "The list of specific sensor value info in this sensor group.",
                                            "items": {
                                                "description": "Specific sensor value info.",
                                                "properties": {
                                                    "desc": {
                                                        "description": "The descriptive name of this sensor.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "The identifier name of this sensor.",
                                                        "type": "string"
                                                    },
                                                    "units": {
                                                        "description": "The units of this sensor.",
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "description": "The value of this sensor.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/shutdown": {
        "POST_args": {
            "description": "Shutdown the node specified by <LNN>.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/cluster/nodes/<LNN>/state": {
        "GET_args": {
            "description": "Retrieve node state information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node state information (reported and modifiable).",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "readonly": {
                                "description": "Node readonly state.",
                                "properties": {
                                    "allowed": {
                                        "description": "The current read-only mode allowed status for the node.",
                                        "type": "boolean"
                                    },
                                    "enabled": {
                                        "description": "The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.",
                                        "type": "boolean"
                                    },
                                    "mode": {
                                        "description": "The current read-only mode status for the node.",
                                        "type": "boolean"
                                    },
                                    "status": {
                                        "description": "The current read-only mode status description for the node.",
                                        "type": "string"
                                    },
                                    "valid": {
                                        "description": "The read-only state values are valid (False = Error).",
                                        "type": "boolean"
                                    },
                                    "value": {
                                        "description": "The current read-only value (enumerated bitfield) for the node.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "servicelight": {
                                "description": "Node service light state.",
                                "properties": {
                                    "enabled": {
                                        "description": "The node service light state (True = on).",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "present": {
                                        "description": "This node has a service light.",
                                        "type": "boolean"
                                    },
                                    "supported": {
                                        "description": "This node supports a service light.",
                                        "type": "boolean"
                                    },
                                    "valid": {
                                        "description": "The node service light state is valid (False = Error).",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "smartfail": {
                                "description": "Node smartfail state.",
                                "properties": {
                                    "dead": {
                                        "description": "This node is dead (dead_devs).",
                                        "type": "boolean"
                                    },
                                    "down": {
                                        "description": "This node is down (down_devs).",
                                        "type": "boolean"
                                    },
                                    "in_cluster": {
                                        "description": "This node is in the cluster (all_devs).",
                                        "type": "boolean"
                                    },
                                    "readonly": {
                                        "description": "This node is readonly (ro_devs).",
                                        "type": "boolean"
                                    },
                                    "shutdown_readonly": {
                                        "description": "This node is shutdown readonly (down_devs).",
                                        "type": "boolean"
                                    },
                                    "smartfailed": {
                                        "description": "This node is smartfailed (soft_devs).",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/state/readonly": {
        "GET_args": {
            "description": "Retrieve node readonly state information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node readonly state.",
                        "properties": {
                            "allowed": {
                                "description": "The current read-only mode allowed status for the node.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "mode": {
                                "description": "The current read-only mode status for the node.",
                                "type": "boolean"
                            },
                            "status": {
                                "description": "The current read-only mode status description for the node.",
                                "type": "string"
                            },
                            "valid": {
                                "description": "The read-only state values are valid (False = Error).",
                                "type": "boolean"
                            },
                            "value": {
                                "description": "The current read-only value (enumerated bitfield) for the node.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more node readonly state settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Node readonly state.",
            "properties": {
                "allowed": {
                    "description": "The current read-only mode allowed status for the node.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.",
                    "type": "boolean"
                },
                "mode": {
                    "description": "The current read-only mode status for the node.",
                    "type": "boolean"
                },
                "status": {
                    "description": "The current read-only mode status description for the node.",
                    "type": "string"
                },
                "valid": {
                    "description": "The read-only state values are valid (False = Error).",
                    "type": "boolean"
                },
                "value": {
                    "description": "The current read-only value (enumerated bitfield) for the node.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/state/servicelight": {
        "GET_args": {
            "description": "Retrieve node service light state information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node service light state.",
                        "properties": {
                            "enabled": {
                                "description": "The node service light state (True = on).",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "present": {
                                "description": "This node has a service light.",
                                "type": "boolean"
                            },
                            "supported": {
                                "description": "This node supports a service light.",
                                "type": "boolean"
                            },
                            "valid": {
                                "description": "The node service light state is valid (False = Error).",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more node service light state settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Node service light state.",
            "properties": {
                "enabled": {
                    "description": "The node service light state (True = on).",
                    "type": "boolean"
                },
                "present": {
                    "description": "This node has a service light.",
                    "type": "boolean"
                },
                "supported": {
                    "description": "This node supports a service light.",
                    "type": "boolean"
                },
                "valid": {
                    "description": "The node service light state is valid (False = Error).",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/state/smartfail": {
        "GET_args": {
            "description": "Retrieve node smartfail state information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node smartfail state.",
                        "properties": {
                            "dead": {
                                "description": "This node is dead (dead_devs).",
                                "type": "boolean"
                            },
                            "down": {
                                "description": "This node is down (down_devs).",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "in_cluster": {
                                "description": "This node is in the cluster (all_devs).",
                                "type": "boolean"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "readonly": {
                                "description": "This node is readonly (ro_devs).",
                                "type": "boolean"
                            },
                            "shutdown_readonly": {
                                "description": "This node is shutdown readonly (down_devs).",
                                "type": "boolean"
                            },
                            "smartfailed": {
                                "description": "This node is smartfailed (soft_devs).",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify smartfail state of the node.  Only the 'smartfailed' body member has any effect on node smartfail state.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Node smartfail state.",
            "properties": {
                "dead": {
                    "description": "This node is dead (dead_devs).",
                    "type": "boolean"
                },
                "down": {
                    "description": "This node is down (down_devs).",
                    "type": "boolean"
                },
                "in_cluster": {
                    "description": "This node is in the cluster (all_devs).",
                    "type": "boolean"
                },
                "readonly": {
                    "description": "This node is readonly (ro_devs).",
                    "type": "boolean"
                },
                "shutdown_readonly": {
                    "description": "This node is shutdown readonly (down_devs).",
                    "type": "boolean"
                },
                "smartfailed": {
                    "description": "This node is smartfailed (soft_devs).",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/status": {
        "GET_args": {
            "description": "Retrieve node status information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Node status information (hardware reported).",
                        "properties": {
                            "batterystatus": {
                                "description": "Battery status information.",
                                "properties": {
                                    "last_test_time1": {
                                        "description": "The last battery test time for battery 1.",
                                        "type": "string"
                                    },
                                    "last_test_time2": {
                                        "description": "The last battery test time for battery 2.",
                                        "type": "string"
                                    },
                                    "next_test_time1": {
                                        "description": "The next checkup for battery 1.",
                                        "type": "string"
                                    },
                                    "next_test_time2": {
                                        "description": "The next checkup for battery 2.",
                                        "type": "string"
                                    },
                                    "present": {
                                        "description": "Node has battery status.",
                                        "type": "boolean"
                                    },
                                    "result1": {
                                        "description": "The result of the last battery test for battery 1.",
                                        "type": "string"
                                    },
                                    "result2": {
                                        "description": "The result of the last battery test for battery 2.",
                                        "type": "string"
                                    },
                                    "status1": {
                                        "description": "The status of battery 1.",
                                        "type": "string"
                                    },
                                    "status2": {
                                        "description": "The status of battery 2.",
                                        "type": "string"
                                    },
                                    "supported": {
                                        "description": "Node supports battery status.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "capacity": {
                                "description": "Storage capacity of this node.",
                                "items": {
                                    "description": "Node capacity information.",
                                    "properties": {
                                        "bytes": {
                                            "description": "Total device storage bytes.",
                                            "type": "integer"
                                        },
                                        "count": {
                                            "description": "Total device count.",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "Device type.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "cpu": {
                                "description": "CPU status information for this node.",
                                "properties": {
                                    "model": {
                                        "description": "Manufacturer model description of this CPU.",
                                        "type": "string"
                                    },
                                    "overtemp": {
                                        "description": "CPU overtemp state.",
                                        "type": "string"
                                    },
                                    "proc": {
                                        "description": "Type of processor and core of this CPU.",
                                        "type": "string"
                                    },
                                    "speed_limit": {
                                        "description": "CPU throttling (expressed as a percentage).",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "nvram": {
                                "description": "Node NVRAM information.",
                                "properties": {
                                    "batteries": {
                                        "description": "This node's NVRAM battery status information.",
                                        "items": {
                                            "description": "NVRAM battery status information.",
                                            "properties": {
                                                "color": {
                                                    "description": "The current status color of the NVRAM battery.",
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Identifying index for the NVRAM battery.",
                                                    "type": "integer"
                                                },
                                                "status": {
                                                    "description": "The current status message of the NVRAM battery.",
                                                    "type": "string"
                                                },
                                                "voltage": {
                                                    "description": "The current voltage of the NVRAM battery.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "battery_count": {
                                        "description": "This node's NVRAM battery count.",
                                        "type": "integer"
                                    },
                                    "charge_status": {
                                        "description": "This node's NVRAM battery charge status, as a color.",
                                        "type": "string"
                                    },
                                    "charge_status_number": {
                                        "description": "This node's NVRAM battery charge status, as a number.",
                                        "type": "integer"
                                    },
                                    "device": {
                                        "description": "This node's NVRAM device name with path.",
                                        "type": "string"
                                    },
                                    "present": {
                                        "description": "This node has NVRAM.",
                                        "type": "boolean"
                                    },
                                    "present_flash": {
                                        "description": "This node has NVRAM with flash storage.",
                                        "type": "boolean"
                                    },
                                    "present_size": {
                                        "description": "The size of the NVRAM, in bytes.",
                                        "type": "integer"
                                    },
                                    "present_type": {
                                        "description": "This node's NVRAM type.",
                                        "type": "string"
                                    },
                                    "ship_mode": {
                                        "description": "This node's current ship mode state for NVRAM batteries.",
                                        "type": "integer"
                                    },
                                    "supported": {
                                        "description": "This node supports NVRAM.",
                                        "type": "boolean"
                                    },
                                    "supported_flash": {
                                        "description": "This node supports NVRAM with flash storage.",
                                        "type": "boolean"
                                    },
                                    "supported_size": {
                                        "description": "The maximum size of the NVRAM, in bytes.",
                                        "type": "integer"
                                    },
                                    "supported_type": {
                                        "description": "This node's supported NVRAM type.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "powersupplies": {
                                "description": "Information about this node's power supplies.",
                                "properties": {
                                    "count": {
                                        "description": "Count of how many power supplies are supported.",
                                        "type": "integer"
                                    },
                                    "failures": {
                                        "description": "Count of how many power supplies have failed.",
                                        "type": "integer"
                                    },
                                    "has_cff": {
                                        "description": "Does this node have a CFF power supply.",
                                        "type": "boolean"
                                    },
                                    "status": {
                                        "description": "A descriptive status string for this node's power supplies.",
                                        "type": "string"
                                    },
                                    "supplies": {
                                        "description": "List of this node's power supplies.",
                                        "items": {
                                            "description": "Power supply information.",
                                            "properties": {
                                                "chassis": {
                                                    "description": "Which node chassis is this power supply in.",
                                                    "type": "integer"
                                                },
                                                "firmware": {
                                                    "description": "The current firmware revision of this power supply.",
                                                    "type": "string"
                                                },
                                                "good": {
                                                    "description": "Is this power supply in a failure state.",
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Identifying index for this power supply.",
                                                    "required": true,
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "description": "Complete identifying string for this power supply.",
                                                    "type": "string"
                                                },
                                                "status": {
                                                    "description": "A descriptive status string for this power supply.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "The type of this power supply.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "supports_cff": {
                                        "description": "Does this node support CFF power supplies.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "release": {
                                "description": "OneFS release.",
                                "type": "string"
                            },
                            "uptime": {
                                "description": "Seconds this node has been online.",
                                "type": "integer"
                            },
                            "version": {
                                "description": "OneFS version.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/nodes/<LNN>/status/batterystatus": {
        "GET_args": {
            "description": "Retrieve node battery status information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodes": {
                    "items": {
                        "description": "Battery status information.",
                        "properties": {
                            "id": {
                                "description": "Node ID (Device Number) of this node.",
                                "type": "integer"
                            },
                            "last_test_time1": {
                                "description": "The last battery test time for battery 1.",
                                "type": "string"
                            },
                            "last_test_time2": {
                                "description": "The last battery test time for battery 2.",
                                "type": "string"
                            },
                            "lnn": {
                                "description": "Logical Node Number (LNN) of this node.",
                                "type": "integer"
                            },
                            "next_test_time1": {
                                "description": "The next checkup for battery 1.",
                                "type": "string"
                            },
                            "next_test_time2": {
                                "description": "The next checkup for battery 2.",
                                "type": "string"
                            },
                            "present": {
                                "description": "Node has battery status.",
                                "type": "boolean"
                            },
                            "result1": {
                                "description": "The result of the last battery test for battery 1.",
                                "type": "string"
                            },
                            "result2": {
                                "description": "The result of the last battery test for battery 2.",
                                "type": "string"
                            },
                            "status1": {
                                "description": "The status of battery 1.",
                                "type": "string"
                            },
                            "status2": {
                                "description": "The status of battery 2.",
                                "type": "string"
                            },
                            "supported": {
                                "description": "Node supports battery status.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/time": {
        "GET_args": {
            "description": "Retrieve the current time as reported by each node.",
            "type": "object"
        },
        "GET_output_schema": {
            "errors": {
                "description": "A list of errors encountered by the individual nodes involved in this request, or an empty list if there were no errors.",
                "items": {
                    "properties": {
                        "code": {
                            "description": "The general meaning of the status code.",
                            "type": "string"
                        },
                        "lnn": {
                            "description": "Logical node number of the node reporting this error.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "message": {
                            "description": "More detailed description of the error.",
                            "type": "string"
                        },
                        "status": {
                            "description": "HTTP Status code returned by this node.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "nodes": {
                "description": "The responses from the individual nodes involved in this request.",
                "items": {
                    "properties": {
                        "error": {
                            "description": "Error message, if the HTTP status returned from this node was not 200.",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "description": "Node ID of the node reporting this information.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "lnn": {
                            "description": "Logical node number of the node reporting this information.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "status": {
                            "description": "Status of the HTTP response from this node if not 200.  If 200, this field does not appear.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "required": false,
                            "type": "integer"
                        },
                        "time": {
                            "description": "The current time on the cluster as a UNIX epoch (seconds since 1/1/1970), as reported by this node.",
                            "maximum": 9223372036854775807,
                            "minimum": -9223372036854775808,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "total": {
                "description": "The total number of nodes responding.",
                "type": "integer"
            }
        },
        "PUT_args": {
            "description": "Set cluster time.  Time will mostly be synchronized across nodes, but there may be slight drift.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "time": {
                    "description": "The current time on the cluster as a UNIX epoch (seconds since 1/1/1970), as reported by this node.",
                    "maximum": 4294967295,
                    "minimum": 0,
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/timezone": {
        "GET_args": {
            "description": "Get the cluster timezone.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The cluster timezone settings.",
            "settings": {
                "abbreviation": {
                    "description": "Timezone abbreviation.",
                    "type": "string"
                },
                "path": {
                    "description": "Timezone hierarchical name.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set a new timezone for the cluster.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "The cluster timezone settings.",
            "settings": {
                "path": {
                    "description": "Timezone hierarchical name.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/timezone/regions/<REGION*>": {
        "GET_args": {
            "description": "List timezone regions.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "dst_reset": {
                    "description": "This query arg is not needed in normal use cases.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "show_all": {
                    "description": "Show all timezones within the region specified in the URI.",
                    "type": "boolean"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "regions": {
                    "items": {
                        "description": "A geographical region that can contain timezones.",
                        "properties": {
                            "comments": {
                                "description": "Clarifying comments on the region or timezone.",
                                "type": "string"
                            },
                            "id": {
                                "description": "A unique identifier for the timezone region.",
                                "type": "string"
                            },
                            "region": {
                                "description": "The name of the region.",
                                "type": "string"
                            },
                            "timezone": {
                                "description": "The single timezone that this region contains.  This field will be null if the region contains more than one timezone.",
                                "type": [
                                    {
                                        "description": "A timezone.",
                                        "properties": {
                                            "abbreviation": {
                                                "description": "The abbreviation for this timezone.",
                                                "type": "string"
                                            },
                                            "path": {
                                                "description": "The timezone path.  This is the unique identifier for the timezone.",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "null"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/timezone/settings": {
        "GET_args": {
            "description": "Retrieve the cluster timezone.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "A timezone.",
                    "properties": {
                        "abbreviation": {
                            "description": "The abbreviation for this timezone.",
                            "type": "string"
                        },
                        "path": {
                            "description": "The timezone path.  This is the unique identifier for the timezone.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the cluster timezone.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A timezone.",
            "properties": {
                "abbreviation": {
                    "description": "The abbreviation for this timezone.",
                    "type": "string"
                },
                "path": {
                    "description": "The timezone path.  This is the unique identifier for the timezone.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/cluster/version": {
        "GET_args": {
            "description": "Retrieve the OneFS version as reported by each node.",
            "type": "object"
        },
        "GET_output_schema": {
            "errors": {
                "description": "A list of errors encountered by the individual nodes involved in this request, or an empty list if there were no errors.",
                "items": {
                    "properties": {
                        "code": {
                            "description": "The general meaning of the status code.",
                            "type": "string"
                        },
                        "lnn": {
                            "description": "Logical node number of the node reporting this error.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "message": {
                            "description": "More detailed description of the error.",
                            "type": "string"
                        },
                        "status": {
                            "description": "HTTP Status code returned by this node.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "nodes": {
                "description": "The responses from the individual nodes involved in this request.",
                "items": {
                    "properties": {
                        "build": {
                            "description": "OneFS build string.",
                            "required": true,
                            "type": "string"
                        },
                        "error": {
                            "description": "Error message, if the HTTP status returned from this node was not 200.",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "description": "Node ID of the node reporting this information.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "lnn": {
                            "description": "Logical node number of the node reporting this information.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "release": {
                            "description": "Kernel release number.",
                            "required": true,
                            "type": "string"
                        },
                        "revision": {
                            "description": "OneFS build number.",
                            "required": true,
                            "type": "string"
                        },
                        "status": {
                            "description": "Status of the HTTP response from this node if not 200.  If 200, this field does not appear.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "required": false,
                            "type": "integer"
                        },
                        "type": {
                            "description": "Kernel release type.",
                            "required": true,
                            "type": "string"
                        },
                        "version": {
                            "description": "Kernel full version information.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "total": {
                "description": "The total number of nodes responding.",
                "type": "integer"
            }
        }
    },
    "/3/event/alert-conditions": {
        "DELETE_args": {
            "description": "Bulk delete of alert conditions.",
            "properties": {
                "channel`": {
                    "description": "Delete only conditions for this channel",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all alert conditions.",
            "properties": {
                "channel_ids": {
                    "description": "Return only conditions for the specified channel:",
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "alert-conditions": {
                    "items": {
                        "description": "Specifies under what conditions and over which channel an alert should be sent",
                        "properties": {
                            "categories": {
                                "description": "Event Group categories to be alerted",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "channel_ids": {
                                "description": "Channels for alert",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "condition": {
                                "description": "Trigger condition for alert",
                                "enum": [
                                    "NEW",
                                    "NEW EVENTS",
                                    "ONGOING",
                                    "SEVERITY INCREASE",
                                    "SEVERITY DECREASE",
                                    "RESOLVED"
                                ],
                                "type": "string"
                            },
                            "eventgroup_ids": {
                                "description": "Event Group IDs to be alerted",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique identifier.",
                                "type": "string"
                            },
                            "interval": {
                                "description": "Required with ONGOING condition only, period in seconds between alerts of ongoing conditions",
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Required with NEW EVENTS condition only, limits the number of alerts sent as events are added",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Unique identifier.",
                                "type": "string"
                            },
                            "severities": {
                                "description": "Severities to be alerted",
                                "items": {
                                    "enum": [
                                        "emergency",
                                        "critical",
                                        "warning",
                                        "information"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "transient": {
                                "description": "Any eventgroup lasting less than this many seconds is deemed transient and will not generate alerts under this condition.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new alert condition.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies under what conditions and over which channel an alert should be sent",
            "properties": {
                "categories": {
                    "description": "Event Group categories to be alerted",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "channel_ids": {
                    "description": "Channels for alert",
                    "items": {
                        "type": "integer"
                    },
                    "required": true,
                    "type": "array"
                },
                "condition": {
                    "description": "Trigger condition for alert",
                    "enum": [
                        "NEW",
                        "NEW EVENTS",
                        "ONGOING",
                        "SEVERITY INCREASE",
                        "SEVERITY DECREASE",
                        "RESOLVED"
                    ],
                    "required": true,
                    "type": "string"
                },
                "eventgroup_ids": {
                    "description": "Event Group IDs to be alerted",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "interval": {
                    "description": "Required with ONGOING condition only, period in seconds between alerts of ongoing conditions",
                    "type": "integer"
                },
                "limit": {
                    "description": "Required with NEW EVENTS condition only, limits the number of alerts sent as events are added",
                    "type": "integer"
                },
                "name": {
                    "description": "Unique identifier.",
                    "required": true,
                    "type": "string"
                },
                "severities": {
                    "description": "Severities to be alerted",
                    "items": {
                        "enum": [
                            "emergency",
                            "critical",
                            "warning",
                            "information"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "transient": {
                    "description": "Any eventgroup lasting less than this many seconds is deemed transient and will not generate alerts under this condition.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/event/alert-conditions/<ID>": {
        "DELETE_args": {
            "description": "Delete the alert-condition.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the alert-condition.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "alert-conditions": {
                    "items": {
                        "description": "Specifies under what conditions and over which channel an alert should be sent",
                        "properties": {
                            "categories": {
                                "description": "Event Group categories to be alerted",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "channel_ids": {
                                "description": "Channels for alert",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "condition": {
                                "description": "Trigger condition for alert",
                                "enum": [
                                    "NEW",
                                    "NEW EVENTS",
                                    "ONGOING",
                                    "SEVERITY INCREASE",
                                    "SEVERITY DECREASE",
                                    "RESOLVED"
                                ],
                                "type": "string"
                            },
                            "eventgroup_ids": {
                                "description": "Event Group IDs to be alerted",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique identifier.",
                                "type": "string"
                            },
                            "interval": {
                                "description": "Required with ONGOING condition only, period in seconds between alerts of ongoing conditions",
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Required with NEW EVENTS condition only, limits the number of alerts sent as events are added",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Unique identifier.",
                                "type": "string"
                            },
                            "severities": {
                                "description": "Severities to be alerted",
                                "items": {
                                    "enum": [
                                        "emergency",
                                        "critical",
                                        "warning",
                                        "information"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "transient": {
                                "description": "Any eventgroup lasting less than this many seconds is deemed transient and will not generate alerts under this condition.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the alert-condition",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies under what conditions and over which channel an alert should be sent",
            "properties": {
                "categories": {
                    "description": "Event Group categories to be alerted",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "channel_ids": {
                    "description": "Channels for alert",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "condition": {
                    "description": "Trigger condition for alert",
                    "enum": [
                        "NEW",
                        "NEW EVENTS",
                        "ONGOING",
                        "SEVERITY INCREASE",
                        "SEVERITY DECREASE",
                        "RESOLVED"
                    ],
                    "type": "string"
                },
                "eventgroup_ids": {
                    "description": "Event Group IDs to be alerted",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "interval": {
                    "description": "Required with ONGOING condition only, period in seconds between alerts of ongoing conditions",
                    "type": "integer"
                },
                "limit": {
                    "description": "Required with NEW EVENTS condition only, limits the number of alerts sent as events are added",
                    "type": "integer"
                },
                "severities": {
                    "description": "Severities to be alerted",
                    "items": {
                        "enum": [
                            "emergency",
                            "critical",
                            "warning",
                            "information"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "transient": {
                    "description": "Any eventgroup lasting less than this many seconds is deemed transient and will not generate alerts under this condition.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/event/categories": {
        "GET_args": {
            "description": "List all eventgroup categories.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "categories": {
                    "items": {
                        "description": "High level categorisation of eventgroups",
                        "properties": {
                            "category_description": {
                                "description": "Description of category.",
                                "type": "string"
                            },
                            "category_name": {
                                "description": "Name of category.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Numeric identifier of eventgroup category.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/event/categories/<ID>": {
        "GET_args": {
            "description": "Retrieve the eventgroup category.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "categories": {
                    "items": {
                        "description": "High level categorisation of eventgroups",
                        "properties": {
                            "category_description": {
                                "description": "Description of category.",
                                "type": "string"
                            },
                            "category_name": {
                                "description": "Name of category.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Numeric identifier of eventgroup category.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/event/channels": {
        "GET_args": {
            "description": "List all channels.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "channels": {
                    "items": {
                        "description": "Named channel through which alerts can be delivered.",
                        "properties": {
                            "allowed_nodes": {
                                "description": "Nodes that can be masters for this channel",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "enabled": {
                                "description": "Channel is to be used or not",
                                "type": "boolean"
                            },
                            "excluded_nodes": {
                                "description": "Nodes that can be masters for this channel",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique identifier.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Channel name,  may not contain /, max length 254.",
                                "type": "string"
                            },
                            "parameters": {
                                "description": "A collection of parameters dependent on the channel type",
                                "type": [
                                    {
                                        "description": "Parameters to be used for an smtp channel",
                                        "properties": {
                                            "address": {
                                                "description": "Email addresses to send to.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "batch": {
                                                "description": "Batching criterion.",
                                                "enum": [
                                                    "NONE",
                                                    "ALL",
                                                    "CATEGORY",
                                                    "SEVERITY"
                                                ],
                                                "type": "string"
                                            },
                                            "batch_period": {
                                                "description": "Period over which batching is to be performed.",
                                                "type": "integer"
                                            },
                                            "custom_template": {
                                                "description": "Path to custom notification template.",
                                                "type": "string"
                                            },
                                            "send_as": {
                                                "description": "Email address to use as from.",
                                                "type": "string"
                                            },
                                            "smtp_host": {
                                                "description": "SMTP relay host.",
                                                "type": "string"
                                            },
                                            "smtp_password": {
                                                "description": "Password for SMTP authentication - only if smtp_use_auth true.",
                                                "type": "string"
                                            },
                                            "smtp_port": {
                                                "description": "SMTP relay port - optional defaults to 25.",
                                                "type": "integer"
                                            },
                                            "smtp_security": {
                                                "description": "Encryption protocol to use for SMTP.",
                                                "enum": [
                                                    "NONE",
                                                    "STARTTLS"
                                                ],
                                                "type": "string"
                                            },
                                            "smtp_use_auth": {
                                                "description": "Use SMTP authentication - optional defaulst to false.",
                                                "type": "boolean"
                                            },
                                            "smtp_username": {
                                                "description": "Username for SMTP authentication - only if smtp_use_auth true.",
                                                "type": "string"
                                            },
                                            "subject": {
                                                "description": "Subject for emails.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "description": "Parameters to be used for an snmp channel",
                                        "properties": {
                                            "community": {
                                                "description": "Optional defaults to 'public'.",
                                                "type": "string"
                                            },
                                            "host": {
                                                "description": "Destination for SNMP trap.",
                                                "type": "string"
                                            },
                                            "use_snmp_trap": {
                                                "description": "Use snmptrap instead of snmpinform.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "system": {
                                "description": "Channel is a pre-defined system channel",
                                "type": "boolean"
                            },
                            "type": {
                                "description": "The mechanism used by the channel",
                                "enum": [
                                    "connectemc",
                                    "smtp",
                                    "snmp"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new channel.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Named channel through which alerts can be delivered.",
            "properties": {
                "allowed_nodes": {
                    "description": "Nodes that can be masters for this channel",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "enabled": {
                    "description": "Channel is to be used or not",
                    "type": "boolean"
                },
                "excluded_nodes": {
                    "description": "Nodes that can be masters for this channel",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique identifier.",
                    "type": "integer"
                },
                "name": {
                    "description": "Channel name,  may not contain /, max length 254.",
                    "required": true,
                    "type": "string"
                },
                "parameters": {
                    "description": "A collection of parameters dependent on the channel type",
                    "type": [
                        {
                            "description": "Parameters to be used for an smtp channel",
                            "properties": {
                                "address": {
                                    "description": "Email addresses to send to.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "batch": {
                                    "description": "Batching criterion.",
                                    "enum": [
                                        "NONE",
                                        "ALL",
                                        "CATEGORY",
                                        "SEVERITY"
                                    ],
                                    "type": "string"
                                },
                                "batch_period": {
                                    "description": "Period over which batching is to be performed.",
                                    "type": "integer"
                                },
                                "custom_template": {
                                    "description": "Path to custom notification template.",
                                    "type": "string"
                                },
                                "send_as": {
                                    "description": "Email address to use as from.",
                                    "type": "string"
                                },
                                "smtp_host": {
                                    "description": "SMTP relay host.",
                                    "type": "string"
                                },
                                "smtp_password": {
                                    "description": "Password for SMTP authentication - only if smtp_use_auth true.",
                                    "type": "string"
                                },
                                "smtp_port": {
                                    "description": "SMTP relay port - optional defaults to 25.",
                                    "type": "integer"
                                },
                                "smtp_security": {
                                    "description": "Encryption protocol to use for SMTP.",
                                    "enum": [
                                        "NONE",
                                        "STARTTLS"
                                    ],
                                    "type": "string"
                                },
                                "smtp_use_auth": {
                                    "description": "Use SMTP authentication - optional defaulst to false.",
                                    "type": "boolean"
                                },
                                "smtp_username": {
                                    "description": "Username for SMTP authentication - only if smtp_use_auth true.",
                                    "type": "string"
                                },
                                "subject": {
                                    "description": "Subject for emails.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "description": "Parameters to be used for an snmp channel",
                            "properties": {
                                "community": {
                                    "description": "Optional defaults to 'public'.",
                                    "type": "string"
                                },
                                "host": {
                                    "description": "Destination for SNMP trap.",
                                    "type": "string"
                                },
                                "use_snmp_trap": {
                                    "description": "Use snmptrap instead of snmpinform.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "system": {
                    "description": "Channel is a pre-defined system channel",
                    "type": "boolean"
                },
                "type": {
                    "description": "The mechanism used by the channel",
                    "enum": [
                        "connectemc",
                        "smtp",
                        "snmp"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/event/channels/<ID>": {
        "DELETE_args": {
            "description": "Delete the alert-condition.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the alert-condition.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "alert-conditions": {
                    "items": {
                        "description": "Named channel through which alerts can be delivered.",
                        "properties": {
                            "allowed_nodes": {
                                "description": "Nodes that can be masters for this channel",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "enabled": {
                                "description": "Channel is to be used or not",
                                "type": "boolean"
                            },
                            "excluded_nodes": {
                                "description": "Nodes that can be masters for this channel",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique identifier.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Channel name,  may not contain /, max length 254.",
                                "type": "string"
                            },
                            "parameters": {
                                "description": "A collection of parameters dependent on the channel type",
                                "type": [
                                    {
                                        "description": "Parameters to be used for an smtp channel",
                                        "properties": {
                                            "address": {
                                                "description": "Email addresses to send to.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "batch": {
                                                "description": "Batching criterion.",
                                                "enum": [
                                                    "NONE",
                                                    "ALL",
                                                    "CATEGORY",
                                                    "SEVERITY"
                                                ],
                                                "type": "string"
                                            },
                                            "batch_period": {
                                                "description": "Period over which batching is to be performed.",
                                                "type": "integer"
                                            },
                                            "custom_template": {
                                                "description": "Path to custom notification template.",
                                                "type": "string"
                                            },
                                            "send_as": {
                                                "description": "Email address to use as from.",
                                                "type": "string"
                                            },
                                            "smtp_host": {
                                                "description": "SMTP relay host.",
                                                "type": "string"
                                            },
                                            "smtp_password": {
                                                "description": "Password for SMTP authentication - only if smtp_use_auth true.",
                                                "type": "string"
                                            },
                                            "smtp_port": {
                                                "description": "SMTP relay port - optional defaults to 25.",
                                                "type": "integer"
                                            },
                                            "smtp_security": {
                                                "description": "Encryption protocol to use for SMTP.",
                                                "enum": [
                                                    "NONE",
                                                    "STARTTLS"
                                                ],
                                                "type": "string"
                                            },
                                            "smtp_use_auth": {
                                                "description": "Use SMTP authentication - optional defaulst to false.",
                                                "type": "boolean"
                                            },
                                            "smtp_username": {
                                                "description": "Username for SMTP authentication - only if smtp_use_auth true.",
                                                "type": "string"
                                            },
                                            "subject": {
                                                "description": "Subject for emails.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "description": "Parameters to be used for an snmp channel",
                                        "properties": {
                                            "community": {
                                                "description": "Optional defaults to 'public'.",
                                                "type": "string"
                                            },
                                            "host": {
                                                "description": "Destination for SNMP trap.",
                                                "type": "string"
                                            },
                                            "use_snmp_trap": {
                                                "description": "Use snmptrap instead of snmpinform.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "system": {
                                "description": "Channel is a pre-defined system channel",
                                "type": "boolean"
                            },
                            "type": {
                                "description": "The mechanism used by the channel",
                                "enum": [
                                    "connectemc",
                                    "smtp",
                                    "snmp"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the alert-condition",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Named channel through which alerts can be delivered.",
            "properties": {
                "allowed_nodes": {
                    "description": "Nodes that can be masters for this channel",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "enabled": {
                    "description": "Channel is to be used or not",
                    "type": "boolean"
                },
                "excluded_nodes": {
                    "description": "Nodes that can be masters for this channel",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "parameters": {
                    "description": "A collection of parameters dependent on the channel type",
                    "type": [
                        {
                            "description": "Parameters to be used for an smtp channel",
                            "properties": {
                                "address": {
                                    "description": "Email addresses to send to.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "batch": {
                                    "description": "Batching criterion.",
                                    "enum": [
                                        "NONE",
                                        "ALL",
                                        "CATEGORY",
                                        "SEVERITY"
                                    ],
                                    "type": "string"
                                },
                                "batch_period": {
                                    "description": "Period over which batching is to be performed.",
                                    "type": "integer"
                                },
                                "custom_template": {
                                    "description": "Path to custom notification template.",
                                    "type": "string"
                                },
                                "send_as": {
                                    "description": "Email address to use as from.",
                                    "type": "string"
                                },
                                "smtp_host": {
                                    "description": "SMTP relay host.",
                                    "type": "string"
                                },
                                "smtp_password": {
                                    "description": "Password for SMTP authentication - only if smtp_use_auth true.",
                                    "type": "string"
                                },
                                "smtp_port": {
                                    "description": "SMTP relay port - optional defaults to 25.",
                                    "type": "integer"
                                },
                                "smtp_security": {
                                    "description": "Encryption protocol to use for SMTP.",
                                    "enum": [
                                        "NONE",
                                        "STARTTLS"
                                    ],
                                    "type": "string"
                                },
                                "smtp_use_auth": {
                                    "description": "Use SMTP authentication - optional defaulst to false.",
                                    "type": "boolean"
                                },
                                "smtp_username": {
                                    "description": "Username for SMTP authentication - only if smtp_use_auth true.",
                                    "type": "string"
                                },
                                "subject": {
                                    "description": "Subject for emails.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "description": "Parameters to be used for an snmp channel",
                            "properties": {
                                "community": {
                                    "description": "Optional defaults to 'public'.",
                                    "type": "string"
                                },
                                "host": {
                                    "description": "Destination for SNMP trap.",
                                    "type": "string"
                                },
                                "use_snmp_trap": {
                                    "description": "Use snmptrap instead of snmpinform.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "system": {
                    "description": "Channel is a pre-defined system channel",
                    "type": "boolean"
                },
                "type": {
                    "description": "The mechanism used by the channel",
                    "enum": [
                        "connectemc",
                        "smtp",
                        "snmp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventgroup-definitions": {
        "GET_args": {
            "description": "List all eventgroup definitions.",
            "properties": {
                "category": {
                    "description": "Return eventgroups in the specified category",
                    "type": "integer"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventgroup-definitions": {
                    "items": {
                        "description": "Description of a eventgroup that can occur and be detected.",
                        "properties": {
                            "category": {
                                "description": "ID of eventgroup category.",
                                "type": "integer"
                            },
                            "description": {
                                "description": "Human readable description - may contain value placeholders.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Identifier.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name for eventgroup.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventgroup-definitions/<ID>": {
        "GET_args": {
            "description": "Retrieve the eventgroup definition.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventgroup-definitions": {
                    "items": {
                        "description": "Description of a eventgroup that can occur and be detected.",
                        "properties": {
                            "category": {
                                "description": "ID of eventgroup category.",
                                "type": "integer"
                            },
                            "description": {
                                "description": "Human readable description - may contain value placeholders.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Identifier.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name for eventgroup.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventgroup-occurrences": {
        "GET_args": {
            "description": "List all eventgroup occurrences.",
            "properties": {
                "begin": {
                    "description": "events that are in progress after this time",
                    "type": "integer"
                },
                "cause": {
                    "description": "Filter for cause",
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "end": {
                    "description": "events that were in progress before this time",
                    "type": "integer"
                },
                "event_count": {
                    "description": "events for which event_count > this",
                    "type": "integer"
                },
                "fixer": {
                    "description": "Filter for eventgroup fixer",
                    "type": "string"
                },
                "ignore": {
                    "description": "Filter for ignored eventgroups",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resolved": {
                    "description": "Filter for resolved eventgroups",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventgroup-occurrences": {
                    "items": {
                        "description": "Record of a eventgroup occurrence.",
                        "properties": {
                            "causes": {
                                "description": "List of eventgroup IDs that may be causes of this occurrence.",
                                "items": {
                                    "type": {
                                        "description": "Event Group cause as name and description",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "array"
                            },
                            "channels": {
                                "description": "List of channels to which alerts are configured for this eventgroup",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "event_count": {
                                "description": "Number of events linked to this eventgroup.",
                                "type": "integer"
                            },
                            "eventgroup_instance": {
                                "description": "Unique identifier of eventgroup instance.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Same as eventgroup_instance.",
                                "type": "string"
                            },
                            "ignore": {
                                "description": "True if eventgroup is marked as 'ignore'.",
                                "type": "boolean"
                            },
                            "ignore_time": {
                                "description": "Time eventgroup was marked as 'ignore'.",
                                "type": "integer"
                            },
                            "last_event": {
                                "description": "Time the most recent event was added to this eventgroup.",
                                "type": "integer"
                            },
                            "resolve_time": {
                                "description": "When the eventgroup became resolved.",
                                "type": "integer"
                            },
                            "resolved": {
                                "description": "True if eventgroup is resolved.",
                                "type": "boolean"
                            },
                            "resolver": {
                                "description": "'USER' if the eventgroup was marked resolved via PAPI <event_instance> if eventgroup was marked resolved as a result of an event.",
                                "type": "string"
                            },
                            "sequence": {
                                "description": "XXX description needed.",
                                "type": "integer"
                            },
                            "severity": {
                                "description": "Event Group severity.",
                                "type": "string"
                            },
                            "specifier": {
                                "description": "A collection of parameters defined per eventgroup_id.",
                                "type": "object"
                            },
                            "time_noticed": {
                                "description": "Time of first event linked to this eventgroup.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify all eventgroup occurrences, resolve or ignore all",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Ignore flag for eventgroup.",
            "properties": {
                "ignore": {
                    "description": "True if eventgroup is to be ignored",
                    "type": "boolean"
                },
                "resolved": {
                    "description": "True if eventgroup is to be resolved",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventgroup-occurrences/<ID>": {
        "GET_args": {
            "description": "Retrieve individual eventgroup occurrence.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventgroup-occurrences": {
                    "items": {
                        "description": "Record of a eventgroup occurrence.",
                        "properties": {
                            "causes": {
                                "description": "List of eventgroup IDs that may be causes of this occurrence.",
                                "items": {
                                    "type": {
                                        "description": "Event Group cause as name and description",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "array"
                            },
                            "channels": {
                                "description": "List of channels to which alerts are configured for this eventgroup",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "event_count": {
                                "description": "Number of events linked to this eventgroup.",
                                "type": "integer"
                            },
                            "eventgroup_instance": {
                                "description": "Unique identifier of eventgroup instance.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Same as eventgroup_instance.",
                                "type": "string"
                            },
                            "ignore": {
                                "description": "True if eventgroup is marked as 'ignore'.",
                                "type": "boolean"
                            },
                            "ignore_time": {
                                "description": "Time eventgroup was marked as 'ignore'.",
                                "type": "integer"
                            },
                            "last_event": {
                                "description": "Time the most recent event was added to this eventgroup.",
                                "type": "integer"
                            },
                            "resolve_time": {
                                "description": "When the eventgroup became resolved.",
                                "type": "integer"
                            },
                            "resolved": {
                                "description": "True if eventgroup is resolved.",
                                "type": "boolean"
                            },
                            "resolver": {
                                "description": "'USER' if the eventgroup was marked resolved via PAPI <event_instance> if eventgroup was marked resolved as a result of an event.",
                                "type": "string"
                            },
                            "sequence": {
                                "description": "XXX description needed.",
                                "type": "integer"
                            },
                            "severity": {
                                "description": "Event Group severity.",
                                "type": "string"
                            },
                            "specifier": {
                                "description": "A collection of parameters defined per eventgroup_id.",
                                "type": "object"
                            },
                            "time_noticed": {
                                "description": "Time of first event linked to this eventgroup.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "modify eventgroup occurrence.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Ignore flag for eventgroup.",
            "properties": {
                "ignore": {
                    "description": "True if eventgroup is to be ignored",
                    "type": "boolean"
                },
                "resolved": {
                    "description": "True if eventgroup is to be resolved",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventlists": {
        "GET_args": {
            "description": "List all event occurrences grouped by eventgroup occurrence.",
            "properties": {
                "event_instance": {
                    "description": "Return only this event occurrence",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "severity": {
                    "description": "Minimum severity of returned events.",
                    "enum": [
                        "information",
                        "warning",
                        "critical",
                        "emergency"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventlists": {
                    "items": {
                        "description": "Events linked to a eventgroup occurrence.",
                        "properties": {
                            "event_count": {
                                "description": "Number of events linked to this eventgroup.",
                                "type": "integer"
                            },
                            "eventgroup_instance": {
                                "description": "Unique identifier of eventgroup instance.",
                                "type": "string"
                            },
                            "events": {
                                "description": "list of all events linked to this eventgroup in chronological order.",
                                "items": {
                                    "type": {
                                        "description": "Record of an event occurring on the cluster",
                                        "properties": {
                                            "devid": {
                                                "description": "The lnn of the node if it is still part of the cluster otherwise None.",
                                                "type": [
                                                    "integer",
                                                    "null"
                                                ]
                                            },
                                            "ended": {
                                                "description": "Time event was ended (eventgroup resolved)",
                                                "type": "number"
                                            },
                                            "event_id": {
                                                "description": "Integer identifier of the event type",
                                                "type": "integer"
                                            },
                                            "id": {
                                                "description": "Unique identifier of event occurrence.",
                                                "type": "string"
                                            },
                                            "message": {
                                                "description": "Human readable description",
                                                "type": "string"
                                            },
                                            "severity": {
                                                "description": "Severity of event occurrence.",
                                                "enum": [
                                                    "information",
                                                    "warning",
                                                    "critical",
                                                    "emergency",
                                                    "unknown"
                                                ],
                                                "type": "string"
                                            },
                                            "specifier": {
                                                "additionalProperties": true,
                                                "description": "A collection of parameters defined per event.",
                                                "type": "object"
                                            },
                                            "time": {
                                                "description": "Time event was detected as UNIX timestamp.",
                                                "type": "integer"
                                            },
                                            "value": {
                                                "description": "Value of measurement associated with this event.",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Same as eventgroup_instance.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/event/eventlists/<ID>": {
        "GET_args": {
            "description": "Retrieve the list of events for a eventgroup occureence.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "eventlist": {
                    "items": {
                        "description": "Events linked to a eventgroup occurrence.",
                        "properties": {
                            "event_count": {
                                "description": "Number of events linked to this eventgroup.",
                                "type": "integer"
                            },
                            "eventgroup_instance": {
                                "description": "Unique identifier of eventgroup instance.",
                                "type": "string"
                            },
                            "events": {
                                "description": "list of all events linked to this eventgroup in chronological order.",
                                "items": {
                                    "type": {
                                        "description": "Record of an event occurring on the cluster",
                                        "properties": {
                                            "devid": {
                                                "description": "The lnn of the node if it is still part of the cluster otherwise None.",
                                                "type": [
                                                    "integer",
                                                    "null"
                                                ]
                                            },
                                            "ended": {
                                                "description": "Time event was ended (eventgroup resolved)",
                                                "type": "number"
                                            },
                                            "event_id": {
                                                "description": "Integer identifier of the event type",
                                                "type": "integer"
                                            },
                                            "id": {
                                                "description": "Unique identifier of event occurrence.",
                                                "type": "string"
                                            },
                                            "message": {
                                                "description": "Human readable description",
                                                "type": "string"
                                            },
                                            "severity": {
                                                "description": "Severity of event occurrence.",
                                                "enum": [
                                                    "information",
                                                    "warning",
                                                    "critical",
                                                    "emergency",
                                                    "unknown"
                                                ],
                                                "type": "string"
                                            },
                                            "specifier": {
                                                "additionalProperties": true,
                                                "description": "A collection of parameters defined per event.",
                                                "type": "object"
                                            },
                                            "time": {
                                                "description": "Time event was detected as UNIX timestamp.",
                                                "type": "integer"
                                            },
                                            "value": {
                                                "description": "Value of measurement associated with this event.",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Same as eventgroup_instance.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/event/events": {
        "POST_args": {
            "description": "Create a test event.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Test Event Specifier",
            "properties": {
                "message": {
                    "description": "Message for test event",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/event/settings": {
        "GET_args": {
            "description": "Retrieve the settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Settings for CELOG system",
            "properties": {
                "heartbeat_interval": {
                    "description": "Interval between heartbeat events. \"daily\", \"weekly\", or \"monthly\".",
                    "type": "string"
                },
                "maintenance": {
                    "description": "Maintenance period",
                    "type": [
                        {
                            "description": "Specifies start and duration of maintenance period during which no alerts will be sent for new eventgroups.",
                            "properties": {
                                "duration": {
                                    "description": "Duration of maintenance period in seconds.",
                                    "type": "integer"
                                },
                                "start": {
                                    "description": "Start of maintenance period.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "null"
                    ]
                },
                "retention_days": {
                    "description": "Retention period in days",
                    "type": "integer"
                },
                "storage_limit": {
                    "description": "Storage limit in megabytes per terabyte of available storage",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Update settings",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Settings for CELOG system",
            "properties": {
                "heartbeat_interval": {
                    "description": "Interval between heartbeat events. \"daily\", \"weekly\", or \"monthly\".",
                    "type": "string"
                },
                "maintenance": {
                    "description": "Maintenance period",
                    "type": [
                        {
                            "description": "Specifies start and duration of maintenance period during which no alerts will be sent for new eventgroups.",
                            "properties": {
                                "duration": {
                                    "description": "Duration of maintenance period in seconds.",
                                    "type": "integer"
                                },
                                "start": {
                                    "description": "Start of maintenance period.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "null"
                    ]
                },
                "retention_days": {
                    "description": "Retention period in days",
                    "type": "integer"
                },
                "storage_limit": {
                    "description": "Storage limit in megabytes per terabyte of available storage",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/file-filter/settings": {
        "GET_args": {
            "description": "View File Filtering settings of an access zone",
            "properties": {
                "zone": {
                    "description": "Specifies the access zones in which these settings apply.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "file_filter_extensions": {
                    "description": "List of file extensions to be filtered.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "file_filter_type": {
                    "description": "Specifies if filter list is for deny or allow. Default is deny.",
                    "enum": [
                        "deny",
                        "allow"
                    ],
                    "type": "string"
                },
                "file_filtering_enabled": {
                    "description": "Indicates whether file filtering is enabled on this zone.",
                    "type": "boolean"
                }
            },
            "required": true,
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more File Filtering settings for an access zone",
            "properties": {
                "zone": {
                    "description": "Specifies the access zones in which these settings apply.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "file_filter_extensions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "List of file extensions to be filtered.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "file_filter_type": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if filter list is for deny or allow. Default is deny.",
                            "enum": [
                                "deny",
                                "allow"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "file_filtering_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Indicates whether file filtering is enabled on this zone.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "required": true,
            "type": "object"
        }
    },
    "/3/fsa/results": {
        "GET_args": {
            "description": "List all results.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "results": {
                    "items": {
                        "properties": {
                            "begin_time": {
                                "description": "Unix Epoch time of start of results collection job.",
                                "required": true,
                                "type": "integer"
                            },
                            "content_path": {
                                "description": "Path to results database.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "delete_link": {
                                "description": "Resource to call with DELETE to remove results..",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "end_time": {
                                "description": "Unix Epoch time of end of results collection job.",
                                "required": true,
                                "type": "integer"
                            },
                            "fsa_state": {
                                "description": "State of the result set.",
                                "enum": [
                                    "unknown",
                                    "work",
                                    "reduce",
                                    "publish"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system generated result set ID.",
                                "required": true,
                                "type": "integer"
                            },
                            "job_state": {
                                "description": "State information about the FSA Job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "pinned": {
                                "description": "True if the result is pinned to prevent automatic removal.",
                                "required": true,
                                "type": "boolean"
                            },
                            "properties_link": {
                                "description": "Resource to call to get result properties.",
                                "required": true,
                                "type": "string"
                            },
                            "size": {
                                "description": "Size of the result set database in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "version": {
                                "description": "FSA version used to create result set.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>": {
        "DELETE_args": {
            "description": "Delete the result set.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve result set information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "results": {
                    "items": {
                        "properties": {
                            "begin_time": {
                                "description": "Unix Epoch time of start of results collection job.",
                                "required": true,
                                "type": "integer"
                            },
                            "content_path": {
                                "description": "Path to results database.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "delete_link": {
                                "description": "Resource to call with DELETE to remove results..",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "end_time": {
                                "description": "Unix Epoch time of end of results collection job.",
                                "required": true,
                                "type": "integer"
                            },
                            "fsa_state": {
                                "description": "State of the result set.",
                                "enum": [
                                    "unknown",
                                    "work",
                                    "reduce",
                                    "publish"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "The system generated result set ID.",
                                "required": true,
                                "type": "integer"
                            },
                            "job_state": {
                                "description": "State information about the FSA Job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "pinned": {
                                "description": "True if the result is pinned to prevent automatic removal.",
                                "required": true,
                                "type": "boolean"
                            },
                            "properties_link": {
                                "description": "Resource to call to get result properties.",
                                "required": true,
                                "type": "string"
                            },
                            "size": {
                                "description": "Size of the result set database in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "version": {
                                "description": "FSA version used to create result set.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify result set. Only the pinned property can be changed at this time.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "pinned": {
                    "description": "True if the result is pinned to prevent automatic removal.",
                    "required": true,
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/directories": {
        "GET_args": {
            "description": "This resource retrieves directory information. ID in the resource path is the result set ID.",
            "properties": {
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Limit the number of reported subdirectories.",
                    "type": "integer"
                },
                "path": {
                    "description": "Primary directory path to report usage information, which may be specified instead of a LIN.",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "attribute_count": {
                    "description": "User attribute count.",
                    "required": true,
                    "type": "integer"
                },
                "dir_depth": {
                    "description": "Directory depth.",
                    "required": true,
                    "type": "integer"
                },
                "dir_usage": {
                    "description": "Disk usage for current directory.",
                    "properties": {
                        "ads_cnt": {
                            "description": "Number of alternate data streams.",
                            "required": true,
                            "type": "integer"
                        },
                        "dir_cnt": {
                            "description": "Number of directories.",
                            "required": true,
                            "type": "integer"
                        },
                        "file_cnt": {
                            "description": "Number of files.",
                            "required": true,
                            "type": "integer"
                        },
                        "lin": {
                            "description": "Logical inode number.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum": {
                            "description": "Logical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum_overflow": {
                            "description": "Logical size sum of overflow in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "name": {
                            "description": "Name of directory.",
                            "required": true,
                            "type": "string"
                        },
                        "other_cnt": {
                            "description": "Other count.",
                            "required": true,
                            "type": "integer"
                        },
                        "parent": {
                            "description": "Parent directory inode.",
                            "required": true,
                            "type": "integer"
                        },
                        "phys_size_sum": {
                            "description": "Physical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "path_parts": {
                    "description": "Directory path information from root to current directory.",
                    "required": true,
                    "type": "array"
                },
                "total_usage": {
                    "description": "Disk usage from root.",
                    "properties": {
                        "ads_cnt": {
                            "description": "Number of alternate data streams.",
                            "required": true,
                            "type": "integer"
                        },
                        "dir_cnt": {
                            "description": "Number of directories.",
                            "required": true,
                            "type": "integer"
                        },
                        "file_cnt": {
                            "description": "Number of files.",
                            "required": true,
                            "type": "integer"
                        },
                        "lin": {
                            "description": "Logical inode number.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum": {
                            "description": "Logical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum_overflow": {
                            "description": "Logical size sum of overflow in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "name": {
                            "description": "Name of directory.",
                            "required": true,
                            "type": "string"
                        },
                        "other_cnt": {
                            "description": "Other count.",
                            "required": true,
                            "type": "integer"
                        },
                        "parent": {
                            "description": "Parent directory inode.",
                            "required": true,
                            "type": "integer"
                        },
                        "phys_size_sum": {
                            "description": "Physical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "usage_data": {
                    "description": "Disk usage for all of immediate children of the current directory.",
                    "items": {
                        "properties": {
                            "ads_cnt": {
                                "description": "Number of alternate data streams.",
                                "required": true,
                                "type": "integer"
                            },
                            "dir_cnt": {
                                "description": "Number of directories.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_cnt": {
                                "description": "Number of files.",
                                "required": true,
                                "type": "integer"
                            },
                            "has_subdirs": {
                                "description": "Defines if directory has subdirectories.",
                                "required": true,
                                "type": "boolean"
                            },
                            "lin": {
                                "description": "Logical inode number.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size_sum": {
                                "description": "Logical size directory in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size_sum_overflow": {
                                "description": "Logical size sum of overflow in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "Name of directory.",
                                "required": true,
                                "type": "string"
                            },
                            "other_cnt": {
                                "description": "Other count.",
                                "required": true,
                                "type": "integer"
                            },
                            "parent": {
                                "description": "Parent directory inode.",
                                "required": true,
                                "type": "integer"
                            },
                            "phys_size_sum": {
                                "description": "Physical size directory in bytes.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/directories/<LIN>": {
        "GET_args": {
            "description": "This resource retrieves directory information. ID in the resource path is the result set ID.",
            "properties": {
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Limit the number of reported subdirectories.",
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "attribute_count": {
                    "description": "User attribute count.",
                    "required": true,
                    "type": "integer"
                },
                "dir_depth": {
                    "description": "Directory depth.",
                    "required": true,
                    "type": "integer"
                },
                "dir_usage": {
                    "description": "Disk usage for current directory.",
                    "properties": {
                        "ads_cnt": {
                            "description": "Number of alternate data streams.",
                            "required": true,
                            "type": "integer"
                        },
                        "dir_cnt": {
                            "description": "Number of directories.",
                            "required": true,
                            "type": "integer"
                        },
                        "file_cnt": {
                            "description": "Number of files.",
                            "required": true,
                            "type": "integer"
                        },
                        "lin": {
                            "description": "Logical inode number.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum": {
                            "description": "Logical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum_overflow": {
                            "description": "Logical size sum of overflow in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "name": {
                            "description": "Name of directory.",
                            "required": true,
                            "type": "string"
                        },
                        "other_cnt": {
                            "description": "Other count.",
                            "required": true,
                            "type": "integer"
                        },
                        "parent": {
                            "description": "Parent directory inode.",
                            "required": true,
                            "type": "integer"
                        },
                        "phys_size_sum": {
                            "description": "Physical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "path_parts": {
                    "description": "Directory path information from root to current directory.",
                    "required": true,
                    "type": "array"
                },
                "total_usage": {
                    "description": "Disk usage from root.",
                    "properties": {
                        "ads_cnt": {
                            "description": "Number of alternate data streams.",
                            "required": true,
                            "type": "integer"
                        },
                        "dir_cnt": {
                            "description": "Number of directories.",
                            "required": true,
                            "type": "integer"
                        },
                        "file_cnt": {
                            "description": "Number of files.",
                            "required": true,
                            "type": "integer"
                        },
                        "lin": {
                            "description": "Logical inode number.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum": {
                            "description": "Logical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "log_size_sum_overflow": {
                            "description": "Logical size sum of overflow in bytes.",
                            "required": true,
                            "type": "integer"
                        },
                        "name": {
                            "description": "Name of directory.",
                            "required": true,
                            "type": "string"
                        },
                        "other_cnt": {
                            "description": "Other count.",
                            "required": true,
                            "type": "integer"
                        },
                        "parent": {
                            "description": "Parent directory inode.",
                            "required": true,
                            "type": "integer"
                        },
                        "phys_size_sum": {
                            "description": "Physical size directory in bytes.",
                            "required": true,
                            "type": "integer"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                "usage_data": {
                    "description": "Disk usage for all of immediate children of the current directory.",
                    "items": {
                        "properties": {
                            "ads_cnt": {
                                "description": "Number of alternate data streams.",
                                "required": true,
                                "type": "integer"
                            },
                            "dir_cnt": {
                                "description": "Number of directories.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_cnt": {
                                "description": "Number of files.",
                                "required": true,
                                "type": "integer"
                            },
                            "has_subdirs": {
                                "description": "Defines if directory has subdirectories.",
                                "required": true,
                                "type": "boolean"
                            },
                            "lin": {
                                "description": "Logical inode number.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size_sum": {
                                "description": "Logical size directory in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size_sum_overflow": {
                                "description": "Logical size sum of overflow in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "Name of directory.",
                                "required": true,
                                "type": "string"
                            },
                            "other_cnt": {
                                "description": "Other count.",
                                "required": true,
                                "type": "integer"
                            },
                            "parent": {
                                "description": "Parent directory inode.",
                                "required": true,
                                "type": "integer"
                            },
                            "phys_size_sum": {
                                "description": "Physical size directory in bytes.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/histogram": {
        "GET_args": {
            "description": "This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "atime_enabled": {
                    "description": "Access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "attribute_count": {
                    "description": "User attribute count.",
                    "required": true,
                    "type": "integer"
                },
                "begin_time": {
                    "description": "Unix Epoch time of start of results collection job.",
                    "required": true,
                    "type": "integer"
                },
                "histogram": {
                    "description": "Histogram data of specified file count parameter.",
                    "items": {
                        "properties": {
                            "bucket": {
                                "description": "Bucket for holding file counts within a range.",
                                "required": true,
                                "type": "integer"
                            },
                            "value": {
                                "description": "Number of files within the bucket.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/histogram/<STAT>": {
        "GET_args": {
            "description": "This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.",
            "properties": {
                "atime_filter": {
                    "description": "Filter according to file accessed time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid atime filter values may be found by performing a histogram breakout by atime and viewing the resulting key values.",
                    "type": "integer"
                },
                "attribute_filter": {
                    "description": "Filter according to the name of a file user attribute.",
                    "type": "string"
                },
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "ctime_filter": {
                    "description": "Filter according to file modified time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid ctime filter values may be found by performing a histogram breakout by ctime and viewing the resulting key values.",
                    "type": "integer"
                },
                "directory_filter": {
                    "description": "Filter according to a specific directory, which includes all of its subdirectories.",
                    "type": "string"
                },
                "disk_pool_filter": {
                    "description": "Filter according to the name of a disk pool, which is a set of drives that represent an independent failure domain.",
                    "type": "string"
                },
                "log_size_filter": {
                    "description": "Filter according to file logical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by logical size. The list of valid log_size filter values may be found by performing a histogram breakout by log_size and viewing the resulting key values.",
                    "type": "integer"
                },
                "node_pool_filter": {
                    "description": "Filter according to the name of a node pool, which is a set of disk pools that belong to nodes of the same equivalence class.",
                    "type": "string"
                },
                "path_ext_filter": {
                    "description": "Filter according to the name of a single file extension.",
                    "type": "string"
                },
                "phys_size_filter": {
                    "description": "Filter according to file physical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by physical size. The list of valid phys_size filter values may be found by performing a histogram breakout by phys_size and viewing the resulting key values.",
                    "type": "integer"
                },
                "tier_filter": {
                    "description": "Filter according to the name of a storage tier, which is a user-created set of node pools.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "atime_enabled": {
                    "description": "Access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "attribute_count": {
                    "description": "User attribute count.",
                    "required": true,
                    "type": "integer"
                },
                "begin_time": {
                    "description": "Unix Epoch time of start of results collection job.",
                    "required": true,
                    "type": "integer"
                },
                "histogram": {
                    "description": "Histogram data of specified file count parameter.",
                    "items": {
                        "properties": {
                            "bucket": {
                                "description": "Bucket for holding file counts within a range.",
                                "required": true,
                                "type": "integer"
                            },
                            "value": {
                                "description": "Number of files within the bucket.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/histogram/<STAT>/by": {
        "GET_args": {
            "description": "This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "begin_time": {
                    "description": "Unix Epoch time of start of results collection job.",
                    "required": true,
                    "type": "integer"
                },
                "breakouts": {
                    "description": "Histogram breakout data according to breakout parameter.",
                    "items": {
                        "properties": {
                            "data": {
                                "description": "List of bucket, file count pairs.",
                                "properties": {
                                    "bucket": {
                                        "description": "Stat histogram bucket.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "value": {
                                        "description": "Number of files in bucket.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "required": true,
                                "type": "array"
                            },
                            "key": {
                                "description": "Breakout key by which results are filtered.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "result_length": {
                    "description": "Total length of the result list.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/histogram/<STAT>/by/<BREAKOUT>": {
        "GET_args": {
            "description": "This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.",
            "properties": {
                "atime_filter": {
                    "description": "Filter according to file accessed time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid atime filter values may be found by performing a histogram breakout by atime and viewing the resulting key values.",
                    "type": "integer"
                },
                "attribute_filter": {
                    "description": "Filter according to the name of a file user attribute.",
                    "type": "string"
                },
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "ctime_filter": {
                    "description": "Filter according to file modified time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid ctime filter values may be found by performing a histogram breakout by ctime and viewing the resulting key values.",
                    "type": "integer"
                },
                "directory_filter": {
                    "description": "Filter according to a specific directory, which includes all of its subdirectories.",
                    "type": "string"
                },
                "disk_pool_filter": {
                    "description": "Filter according to the name of a disk pool, which is a set of drives that represent an independent failure domain.",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit the number of breakout results.",
                    "type": "integer"
                },
                "log_size_filter": {
                    "description": "Filter according to file logical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by logical size. The list of valid log_size filter values may be found by performing a histogram breakout by log_size and viewing the resulting key values.",
                    "type": "integer"
                },
                "node_pool_filter": {
                    "description": "Filter according to the name of a node pool, which is a set of disk pools that belong to nodes of the same equivalence class.",
                    "type": "string"
                },
                "path_ext_filter": {
                    "description": "Filter according to the name of a single file extension.",
                    "type": "string"
                },
                "phys_size_filter": {
                    "description": "Filter according to file physical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by physical size. The list of valid phys_size filter values may be found by performing a histogram breakout by phys_size and viewing the resulting key values.",
                    "type": "integer"
                },
                "tier_filter": {
                    "description": "Filter according to the name of a storage tier, which is a user-created set of node pools.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "begin_time": {
                    "description": "Unix Epoch time of start of results collection job.",
                    "required": true,
                    "type": "integer"
                },
                "breakouts": {
                    "description": "Histogram breakout data according to breakout parameter.",
                    "items": {
                        "properties": {
                            "data": {
                                "description": "List of bucket, file count pairs.",
                                "properties": {
                                    "bucket": {
                                        "description": "Stat histogram bucket.",
                                        "required": true,
                                        "type": "integer"
                                    },
                                    "value": {
                                        "description": "Number of files in bucket.",
                                        "required": true,
                                        "type": "integer"
                                    }
                                },
                                "required": true,
                                "type": "array"
                            },
                            "key": {
                                "description": "Breakout key by which results are filtered.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "result_length": {
                    "description": "Total length of the result list.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/top-dirs": {
        "GET_args": {
            "description": "This resource retrieves the top directories. ID in the resource path is the result set ID.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "change": {
                    "description": "Change in directory ranking from result set comparison.",
                    "required": false,
                    "type": "integer"
                },
                "dir_atime_enabled": {
                    "description": "Directory access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "dirs": {
                    "description": "Directory listing.",
                    "items": {
                        "properties": {
                            "atime": {
                                "description": "Directory access time",
                                "required": true,
                                "type": "integer"
                            },
                            "btime": {
                                "description": "Directory creation begin time.",
                                "required": true,
                                "type": "integer"
                            },
                            "ctime": {
                                "description": "Unix inode change time.",
                                "required": true,
                                "type": "integer"
                            },
                            "path": {
                                "description": "Relative directory path under /ifs/.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "top_n_max": {
                    "description": "Limit on number of top results.",
                    "required": true,
                    "type": "integer"
                },
                "total_count": {
                    "description": "Total count of directory results.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/top-dirs/<STAT>": {
        "GET_args": {
            "description": "This resource retrieves the top directories. ID in the resource path is the result set ID.",
            "properties": {
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Number of results from start index. Default value of 1000.",
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "start": {
                    "description": "Starting index for results. Default value of 0.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "change": {
                    "description": "Change in directory ranking from result set comparison.",
                    "required": false,
                    "type": "integer"
                },
                "dir_atime_enabled": {
                    "description": "Directory access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "dirs": {
                    "description": "Directory listing.",
                    "items": {
                        "properties": {
                            "atime": {
                                "description": "Directory access time",
                                "required": true,
                                "type": "integer"
                            },
                            "btime": {
                                "description": "Directory creation begin time.",
                                "required": true,
                                "type": "integer"
                            },
                            "ctime": {
                                "description": "Unix inode change time.",
                                "required": true,
                                "type": "integer"
                            },
                            "path": {
                                "description": "Relative directory path under /ifs/.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "top_n_max": {
                    "description": "Limit on number of top results.",
                    "required": true,
                    "type": "integer"
                },
                "total_count": {
                    "description": "Total count of directory results.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/top-files": {
        "GET_args": {
            "description": "This resource retrieves the top files. ID in the resource path is the result set ID.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "atime_enabled": {
                    "description": "Access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "change": {
                    "description": "Change in file ranking from result set comparison.",
                    "required": false,
                    "type": "integer"
                },
                "dir_atime_enabled": {
                    "description": "Directory access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "files": {
                    "description": "Files listing.",
                    "items": {
                        "properties": {
                            "atime": {
                                "description": "File access time.",
                                "required": true,
                                "type": "integer"
                            },
                            "btime": {
                                "description": "File creation begin time.",
                                "required": true,
                                "type": "integer"
                            },
                            "ctime": {
                                "description": "Unix inode change time.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size": {
                                "description": "Logical file size in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "path": {
                                "description": "Relative file path under /ifs/.",
                                "required": true,
                                "type": "string"
                            },
                            "phys_size": {
                                "description": "Physical file size in bytes.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "top_n_max": {
                    "description": "Limit on number of top results.",
                    "required": true,
                    "type": "integer"
                },
                "total_count": {
                    "description": "Total count of file results.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/fsa/results/<ID>/top-files/<STAT>": {
        "GET_args": {
            "description": "This resource retrieves the top files. ID in the resource path is the result set ID.",
            "properties": {
                "comp_report": {
                    "description": "Result set identifier for comparison of database results.",
                    "type": "integer"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Number of results from start index. Default value of 1000.",
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "start": {
                    "description": "Starting index for results. Default value of 0.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "atime_enabled": {
                    "description": "Access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "change": {
                    "description": "Change in file ranking from result set comparison.",
                    "required": false,
                    "type": "integer"
                },
                "dir_atime_enabled": {
                    "description": "Directory access time enabled.",
                    "required": true,
                    "type": "boolean"
                },
                "files": {
                    "description": "Files listing.",
                    "items": {
                        "properties": {
                            "atime": {
                                "description": "File access time.",
                                "required": true,
                                "type": "integer"
                            },
                            "btime": {
                                "description": "File creation begin time.",
                                "required": true,
                                "type": "integer"
                            },
                            "ctime": {
                                "description": "Unix inode change time.",
                                "required": true,
                                "type": "integer"
                            },
                            "log_size": {
                                "description": "Logical file size in bytes.",
                                "required": true,
                                "type": "integer"
                            },
                            "path": {
                                "description": "Relative file path under /ifs/.",
                                "required": true,
                                "type": "string"
                            },
                            "phys_size": {
                                "description": "Physical file size in bytes.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "top_n_max": {
                    "description": "Limit on number of top results.",
                    "required": true,
                    "type": "integer"
                },
                "total_count": {
                    "description": "Total count of file results.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/hardening/apply": {
        "POST_args": {
            "description": "Apply hardening on the cluster.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Apply hardening on the cluster.",
            "properties": {
                "profile": {
                    "description": "Hardening profile.",
                    "type": "string"
                },
                "report": {
                    "description": "Option to only generate and display a report on current cluster configuration with respect to the expected configuation required to apply hardening. If his option is set to true, hardening is not applied after the report is displayed. By default, this option is false.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "message": {
                    "description": "Message text indicating if hardening apply operation started successfully or failed to start.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/hardening/resolve": {
        "POST_args": {
            "description": "Resolve issues related to hardening, found in current cluster configuration.",
            "properties": {
                "accept": {
                    "description": "If true, execution proceeds to resolve all issues. If false, executrion aborts. This is a required argument.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Resolve Issues found on the cluster.",
            "properties": {
                "profile": {
                    "description": "Hardening profile.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "message": {
                    "description": "Message text indicating if operation to resolve issues started successfully or failed to start.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/hardening/revert": {
        "POST_args": {
            "description": "Revert hardening on the cluster.",
            "properties": {
                "force": {
                    "description": "If specified, revert operation continues even in case of a failure. Default is false in which case revert stops at the first failure.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "message": {
                    "description": "Message text indicating if hardening revert operation started successfully or failed or start.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/hardening/state": {
        "GET_args": {
            "description": "Get the state of the current hardening operation, if one is happening.  Note that this is different from the /status resource, which returns the overall hardening status of the cluster.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "state": {
                    "description": "The state of hardening operation on the cluster.",
                    "properties": {
                        "issues_file": {
                            "description": "Full path name of issues file. This file contains all issues found when the cluster configuration is checked against expected configuration.",
                            "type": "string"
                        },
                        "message": {
                            "description": "This contains more information and details about the operation state.",
                            "type": "string"
                        },
                        "state": {
                            "description": "The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.",
                            "enum": [
                                "Disabled",
                                "Checking_Before_Apply",
                                "Issues_Found_Before_Apply",
                                "Applying",
                                "Enabled",
                                "Checking_Before_Revert",
                                "Issues_Found_Before_Revert",
                                "Reverting",
                                "Failed",
                                "Resolving",
                                "Issues_Resolved",
                                "No_Issues_Found",
                                "Resolved_failed",
                                "Issues_Found_In_Report",
                                "No_Issues_Found_In_Report"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/3/hardening/status": {
        "GET_args": {
            "description": "Get a message indicating whether or not the cluster is hardened. Note that this is different from the /state resource, which returns the state of a specific hardening operation (apply or revert).",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "status": {
                    "description": "Hardening Status of the cluster.",
                    "properties": {
                        "status_text": {
                            "description": "Status text containing cluster-level and nodewise hardening status. Also includes hardening profile if hardening is enabled on at least one node.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "/3/hardware/fcports": {
        "GET_args": {
            "description": "Get list of fibre-channel ports",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get list of fc ports.",
            "properties": {
                "fcports": {
                    "properties": {
                        "id": {
                            "description": "Unique display id.",
                            "type": "string"
                        },
                        "port": {
                            "description": "Port ID",
                            "type": "string"
                        },
                        "rate": {
                            "enum": [
                                "auto",
                                "1",
                                "2",
                                "4",
                                "8"
                            ],
                            "type": "string"
                        },
                        "state": {
                            "description": "State of the port",
                            "enum": [
                                "enable",
                                "disable"
                            ],
                            "type": "string"
                        },
                        "topology": {
                            "enum": [
                                "auto",
                                "ptp",
                                "loop"
                            ],
                            "type": "string"
                        },
                        "wwnn": {
                            "description": "World wide node name of the port",
                            "type": "string"
                        },
                        "wwpn": {
                            "description": "World wide port name of the port",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of fibre-channel ports.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/hardware/fcports/<port>": {
        "GET_args": {
            "description": "Get one fibre-channel port",
            "properties": {
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "id": {
                    "description": "The unique display id",
                    "type": "string"
                },
                "port": {
                    "description": "Port ID",
                    "type": "string"
                },
                "rate": {
                    "enum": [
                        "auto",
                        "1",
                        "2",
                        "4",
                        "8"
                    ],
                    "type": "string"
                },
                "state": {
                    "description": "State of the port",
                    "enum": [
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "topology": {
                    "enum": [
                        "auto",
                        "ptp",
                        "loop"
                    ],
                    "type": "string"
                },
                "wwnn": {
                    "description": "World wide node name of the port",
                    "type": "string"
                },
                "wwpn": {
                    "description": "World wide port name of the port",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Change wwnn, wwpn, state, topology, or rate of a FC port",
            "properties": {
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "id": {
                    "description": "The unique display id",
                    "type": "string"
                },
                "rate": {
                    "enum": [
                        "auto",
                        "1",
                        "2",
                        "4",
                        "8"
                    ],
                    "type": "string"
                },
                "state": {
                    "description": "State of the port",
                    "enum": [
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "topology": {
                    "enum": [
                        "auto",
                        "ptp",
                        "loop"
                    ],
                    "type": "string"
                },
                "wwnn": {
                    "description": "World wide node name of the port",
                    "type": "string"
                },
                "wwpn": {
                    "description": "World wide port name of the port",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/hardware/tape/<name*>": {
        "DELETE_args": {
            "description": "Tape/Changer devices remove",
            "type": "object"
        },
        "POST_args": {
            "description": "Tape/Changer devices rescan",
            "properties": {
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                },
                "port": {
                    "description": "Scan only specified port.",
                    "type": "integer"
                },
                "reconcile": {
                    "description": "Remove entries for devices or paths that have become inaccessible.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "The method input is empty",
            "properties": {},
            "type": "object"
        },
        "POST_output_schema": {
            "description": "The method output is empty",
            "properties": {},
            "type": "object"
        },
        "PUT_args": {
            "description": "Tape/Changer device modify",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "name": {
                    "description": "The name of the device",
                    "type": "string"
                },
                "state": {
                    "description": "Set the device state to close",
                    "enum": [
                        "closed"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/hardware/tapes": {
        "GET_args": {
            "description": "Get list Tape and Changer devices",
            "properties": {
                "activepath": {
                    "description": "List devices with only active paths.",
                    "type": "string"
                },
                "devname": {
                    "description": "List only the named device.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "node": {
                    "description": "List only devices on the specified node.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "type": {
                    "description": "Restrict to list on tape or mc device.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get list Tape and Changer devices",
            "properties": {
                "devices": {
                    "media_changers": {
                        "properties": {
                            "id": {
                                "description": "The unique display id.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the device",
                                "type": "string"
                            },
                            "opencount": {
                                "description": "Number of open",
                                "type": "integer"
                            },
                            "paths": {
                                "description": "Accessible paths of the device",
                                "properties": {
                                    "LUN": {
                                        "description": "Logic unit number of the device on the path",
                                        "type": "integer"
                                    },
                                    "devname": {
                                        "description": "Device driver file name",
                                        "type": "string"
                                    },
                                    "opencount": {
                                        "description": "Number of open",
                                        "type": "integer"
                                    },
                                    "passname": {
                                        "description": "Pass through device driver file name",
                                        "type": "string"
                                    },
                                    "path": {
                                        "description": "Path of the device",
                                        "type": "string"
                                    },
                                    "portid": {
                                        "description": "Port ID on the path",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "path state",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "type": "string"
                                    },
                                    "wwpn": {
                                        "description": "World wide port name",
                                        "type": "string"
                                    }
                                },
                                "type": "array"
                            },
                            "product": {
                                "description": "Product information string including vendor, model, and revision",
                                "type": "string"
                            },
                            "serial": {
                                "description": "Serial number of the device",
                                "type": "string"
                            },
                            "state": {
                                "description": "Device state",
                                "enum": [
                                    "read/write",
                                    "write only",
                                    "read only",
                                    "raw",
                                    "closed"
                                ],
                                "type": "string"
                            },
                            "wwnn": {
                                "description": "World wide node name of the port",
                                "type": "string"
                            }
                        },
                        "type": "array"
                    },
                    "tapes": {
                        "properties": {
                            "id": {
                                "description": "The unique display id.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the device",
                                "type": "string"
                            },
                            "opencount": {
                                "description": "Number of open",
                                "type": "integer"
                            },
                            "paths": {
                                "description": "Accessible paths of the device",
                                "properties": {
                                    "LUN": {
                                        "description": "Logic unit number of the device on the path",
                                        "type": "integer"
                                    },
                                    "devname": {
                                        "description": "Device driver file name",
                                        "type": "string"
                                    },
                                    "opencount": {
                                        "description": "Number of open",
                                        "type": "integer"
                                    },
                                    "passname": {
                                        "description": "Pass through device driver file name",
                                        "type": "string"
                                    },
                                    "path": {
                                        "description": "Path of the device",
                                        "type": "string"
                                    },
                                    "portid": {
                                        "description": "Port ID on the path",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "path state",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "type": "string"
                                    },
                                    "wwpn": {
                                        "description": "World wide port name",
                                        "type": "string"
                                    }
                                },
                                "type": "array"
                            },
                            "product": {
                                "description": "Product information string including vendor, model, and revision",
                                "type": "string"
                            },
                            "serial": {
                                "description": "Serial number of the device",
                                "type": "string"
                            },
                            "state": {
                                "description": "Device state",
                                "enum": [
                                    "read/write",
                                    "write only",
                                    "read only",
                                    "raw",
                                    "closed"
                                ],
                                "type": "string"
                            },
                            "wwnn": {
                                "description": "World wide node name of the port",
                                "type": "string"
                            }
                        },
                        "type": "array"
                    }
                },
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of devices",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/job/events": {
        "GET_args": {
            "description": "List job events.",
            "properties": {
                "begin": {
                    "description": "Restrict the query to events at or after the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "end": {
                    "description": "Restrict the query to events before the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "job_id": {
                    "description": "Restrict the query to the given job ID.",
                    "type": "integer"
                },
                "job_type": {
                    "description": "Restrict the query to the given job type.",
                    "type": "string"
                },
                "key": {
                    "description": "Restrict the query to the given key name.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "state": {
                    "description": "Restrict the query to events containing the given state.",
                    "enum": [
                        "running",
                        "paused_user",
                        "paused_system",
                        "paused_policy",
                        "paused_priority",
                        "cancelled_user",
                        "cancelled_system",
                        "failed",
                        "succeeded",
                        "unknown"
                    ],
                    "type": "string"
                },
                "timeout_ms": {
                    "description": "Query timeout in milliseconds. The default is 10000 ms.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "events": {
                    "items": {
                        "properties": {
                            "flags": {
                                "description": "Event flags.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Job event ID.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "Job ID.",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "job_type": {
                                "description": "Job Type.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Event key name.",
                                "required": true,
                                "type": "string"
                            },
                            "phase": {
                                "description": "Job phase number at time of event.",
                                "required": true,
                                "type": "integer"
                            },
                            "time": {
                                "description": "Time of event in Unix epoch seconds.",
                                "required": true,
                                "type": "integer"
                            },
                            "value": {
                                "description": "Event value.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/job/jobs": {
        "GET_args": {
            "description": "List running and paused jobs.",
            "properties": {
                "batch": {
                    "description": "If true, other arguments are ignored, and the query will return all results, unsorted, as quickly as possible.",
                    "type": "boolean"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "Limit the results to jobs in the specified state.",
                    "enum": [
                        "running",
                        "paused_user",
                        "paused_system",
                        "paused_policy",
                        "paused_priority"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "properties": {
                            "control_state": {
                                "description": "State to which the job is transitioning; if control_state is identical to state, the job's state is stable.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": false,
                                "type": "string"
                            },
                            "create_time": {
                                "description": "The time the job was queued, in seconds since the epoch.",
                                "required": true,
                                "type": "integer"
                            },
                            "current_phase": {
                                "description": "The current phase of the job.",
                                "type": "integer"
                            },
                            "description": {
                                "description": "A text representation of the job.",
                                "type": "string"
                            },
                            "end_time": {
                                "description": "The time the job ended, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "The ID of the job.",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "impact": {
                                "description": "The current impact of the job.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High",
                                    "Paused"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "participants": {
                                "description": "The set of devids working on the job.",
                                "items": {
                                    "required": true,
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "paths": {
                                "description": "Paths for which the job was queued.",
                                "items": {
                                    "required": true,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "policy": {
                                "description": "Current impact policy of the job.",
                                "required": true,
                                "type": "string"
                            },
                            "priority": {
                                "description": "Current priority of the job; lower numbers preempt higher numbers.",
                                "maximum": 10,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "progress": {
                                "description": "A text representation of the job's progress.",
                                "type": "string"
                            },
                            "retries_remaining": {
                                "description": "The number of retries remaining if the job fails.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_time": {
                                "description": "The number of seconds the job has executed.",
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "state": {
                                "description": "Current state of the job.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "total_phases": {
                                "description": "The total number of phases of the job type.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "The job type.",
                                "required": true,
                                "type": "string"
                            },
                            "waiting_on": {
                                "description": "The ID of a job for which this job is waiting.",
                                "type": "integer"
                            },
                            "waiting_reason": {
                                "description": "The reason the job is waiting.",
                                "enum": [
                                    "blocked_by_priority"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Queue a new instance of a job type.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "allow_dup": {
                    "description": "Whether or not to queue the job if one of the same type is already running or queued.",
                    "type": "boolean"
                },
                "avscan_params": {
                    "description": "Parameters required for the AVScan job.",
                    "type": [
                        {
                            "properties": {
                                "force_run": {
                                    "description": "Force files to be scanned, even if excluded by the policy.",
                                    "type": "boolean"
                                },
                                "policy": {
                                    "description": "The antivirus scan policy to run.",
                                    "minLength": 1,
                                    "required": true,
                                    "type": "string"
                                },
                                "report_id": {
                                    "description": "An optional report id for the scan.",
                                    "maxLength": 15,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "update": {
                                    "description": "Update the last run time for the policy.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "changelistcreate_params": {
                    "description": "Parameters required for the ChangelistCreate job.",
                    "type": [
                        {
                            "properties": {
                                "newer_snapid": {
                                    "description": "Newer snapshot ID.",
                                    "minimum": 1,
                                    "required": true,
                                    "type": "integer"
                                },
                                "older_snapid": {
                                    "description": "Older snapshot ID.",
                                    "minimum": 1,
                                    "required": true,
                                    "type": "integer"
                                },
                                "retain_repstate": {
                                    "description": "Whether to retain the replication record after a changelist is created. Retaining a replication record allows a changelist to be recreated later.",
                                    "required": false,
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "domainmark_params": {
                    "description": "Parameters required for the DomainMark job.",
                    "type": [
                        {
                            "properties": {
                                "delete": {
                                    "description": "Whether this is a delete operation.",
                                    "required": false,
                                    "type": "boolean"
                                },
                                "root": {
                                    "description": "Base IFS path to associate with the domain.",
                                    "required": true,
                                    "type": "string"
                                },
                                "type": {
                                    "description": "The type of domain.",
                                    "enum": [
                                        "SnapRevert",
                                        "SyncIQ",
                                        "Worm"
                                    ],
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "paths": {
                    "description": "For jobs which take paths, the IFS paths to pass to the job.",
                    "items": {
                        "required": true,
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "policy": {
                    "description": "Impact policy of this job instance.",
                    "type": "string"
                },
                "prepair_params": {
                    "description": "Parameters required for the PermissionRepair job.",
                    "type": [
                        {
                            "properties": {
                                "mapping_type": {
                                    "description": "Type of permissions; not accepted with mode=clone or mode=inherit.",
                                    "enum": [
                                        "global",
                                        "sid",
                                        "unix",
                                        "native"
                                    ],
                                    "type": "string"
                                },
                                "mode": {
                                    "description": "Type of PermissionRepair operation.",
                                    "enum": [
                                        "clone",
                                        "inherit",
                                        "convert"
                                    ],
                                    "required": true,
                                    "type": "string"
                                },
                                "template": {
                                    "description": "IFS file or directory to use as a template; required with mode=clone and mode=inherit, not accepted with mode=convert.",
                                    "type": "string"
                                },
                                "zone": {
                                    "description": "Authentication zone; not accepted with mode=clone or mode=inherit.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "priority": {
                    "description": "Priority of this job instance; lower numbers preempt higher numbers.",
                    "maximum": 10,
                    "minimum": 1,
                    "type": "integer"
                },
                "smartpoolstree_params": {
                    "description": "Optional parameters for the SmartPoolsTree job.",
                    "type": [
                        {
                            "properties": {
                                "directory_only": {
                                    "description": "Skip processing of regular files.",
                                    "required": false,
                                    "type": "boolean"
                                },
                                "nop": {
                                    "description": "Calculate what would be done (dry run).",
                                    "required": false,
                                    "type": "boolean"
                                },
                                "policy_only": {
                                    "description": "Apply policies but skip restriping.",
                                    "required": false,
                                    "type": "boolean"
                                },
                                "recurse": {
                                    "description": "Process children, recursively.",
                                    "required": false,
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "snaprevert_params": {
                    "description": "Parameters required for the SnapRevert job.",
                    "type": [
                        {
                            "properties": {
                                "snapid": {
                                    "description": "Snapshot to revert.",
                                    "minimum": 1,
                                    "required": true,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "type": {
                    "description": "Job type to queue.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The ID of the job.",
                    "minimum": 1,
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/job/recent": {
        "GET_args": {
            "description": "List recently completed jobs.",
            "properties": {
                "limit": {
                    "description": "Max number of recent jobs to return. The default is 8, the max is 100.",
                    "type": "integer"
                },
                "timeout_ms": {
                    "description": "Query timeout in milliseconds. The default is 10000 ms.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "recent_jobs": {
                    "items": {
                        "properties": {
                            "control_state": {
                                "description": "State to which the job is transitioning; if control_state is identical to state, the job's state is stable.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": false,
                                "type": "string"
                            },
                            "create_time": {
                                "description": "The time the job was queued, in seconds since the epoch.",
                                "required": true,
                                "type": "integer"
                            },
                            "current_phase": {
                                "description": "The current phase of the job.",
                                "type": "integer"
                            },
                            "description": {
                                "description": "A text representation of the job.",
                                "type": "string"
                            },
                            "end_time": {
                                "description": "The time the job ended, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "The ID of the job.",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "impact": {
                                "description": "The current impact of the job.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High",
                                    "Paused"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "participants": {
                                "description": "The set of devids working on the job.",
                                "items": {
                                    "required": true,
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "paths": {
                                "description": "Paths for which the job was queued.",
                                "items": {
                                    "required": true,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "policy": {
                                "description": "Current impact policy of the job.",
                                "required": true,
                                "type": "string"
                            },
                            "priority": {
                                "description": "Current priority of the job; lower numbers preempt higher numbers.",
                                "maximum": 10,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "progress": {
                                "description": "A text representation of the job's progress.",
                                "type": "string"
                            },
                            "retries_remaining": {
                                "description": "The number of retries remaining if the job fails.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_time": {
                                "description": "The number of seconds the job has executed.",
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started, in seconds since the Epoch.",
                                "type": "integer"
                            },
                            "state": {
                                "description": "Current state of the job.",
                                "enum": [
                                    "running",
                                    "paused_user",
                                    "paused_system",
                                    "paused_policy",
                                    "paused_priority",
                                    "cancelled_user",
                                    "cancelled_system",
                                    "failed",
                                    "succeeded",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "total_phases": {
                                "description": "The total number of phases of the job type.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "The job type.",
                                "required": true,
                                "type": "string"
                            },
                            "waiting_on": {
                                "description": "The ID of a job for which this job is waiting.",
                                "type": "integer"
                            },
                            "waiting_reason": {
                                "description": "The reason the job is waiting.",
                                "enum": [
                                    "blocked_by_priority"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/job/reports": {
        "GET_args": {
            "description": "List job reports.",
            "properties": {
                "begin": {
                    "description": "Restrict the query to reports at or after the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "end": {
                    "description": "Restrict the query to reports before the given time, in seconds since the Epoch.",
                    "type": "integer"
                },
                "job_id": {
                    "description": "Restrict the query to the given job ID.",
                    "type": "integer"
                },
                "job_type": {
                    "description": "Restrict the query to the given job type.",
                    "type": "string"
                },
                "key": {
                    "description": "Restrict the query to the given report key.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "timeout_ms": {
                    "description": "Query timeout in milliseconds. The default is 10000 ms.",
                    "type": "integer"
                },
                "verbose": {
                    "description": "Display more detailed information, including job engine framework statistics.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "reports": {
                    "items": {
                        "properties": {
                            "flags": {
                                "description": "Event flags.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Job event ID.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "Job ID.",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "job_type": {
                                "description": "Job Type.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Event key name.",
                                "required": true,
                                "type": "string"
                            },
                            "phase": {
                                "description": "Job phase number at time of event.",
                                "required": true,
                                "type": "integer"
                            },
                            "time": {
                                "description": "Time of event in Unix epoch seconds.",
                                "required": true,
                                "type": "integer"
                            },
                            "value": {
                                "description": "Event value.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/local/cluster/time": {
        "GET_args": {
            "description": "Get the current time on the local node.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "time": {
                    "description": "The current time on the cluster as a UNIX epoch (seconds since 1/1/1970), as reported by this node.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/dnscache": {
        "GET_args": {
            "description": "View network dns cache settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "items": {
                        "properties": {
                            "cache_entry_limit": {
                                "description": "DNS cache entry limit",
                                "maximum": 1048576,
                                "minimum": 1024,
                                "required": true,
                                "type": "integer"
                            },
                            "cluster_timeout": {
                                "description": "Timeout value for calls made to other nodes in the cluster",
                                "maximum": 30,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "dns_timeout": {
                                "description": "Timeout value for calls made to the dns resolvers",
                                "maximum": 30,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "eager_refresh": {
                                "description": "Lead time to refresh cache entries nearing expiration",
                                "maximum": 60,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "testping_delta": {
                                "description": "Deltas for checking cbind cluster health",
                                "maximum": 60,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_max_noerror": {
                                "description": "Upper bound on ttl for cache hits",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_max_nxdomain": {
                                "description": "Upper bound on ttl for nxdomain",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_max_other": {
                                "description": "Upper bound on ttl for non-nxdomain failures",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_max_servfail": {
                                "description": "Upper bound on ttl for server failures",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_min_noerror": {
                                "description": "Lower bound on ttl for cache hits",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_min_nxdomain": {
                                "description": "Lower bound on ttl for nxdomain",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_min_other": {
                                "description": "Lower bound on ttl for non-nxdomain failures",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "ttl_min_servfail": {
                                "description": "Lower bound on ttl for server failures",
                                "maximum": 3600,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify network dns cache settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "cache_entry_limit": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "DNS cache entry limit",
                            "maximum": 1048576,
                            "minimum": 1024,
                            "type": "integer"
                        }
                    ]
                },
                "cluster_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Timeout value for calls made to other nodes in the cluster",
                            "maximum": 30,
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                },
                "dns_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Timeout value for calls made to the dns resolvers",
                            "maximum": 30,
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                },
                "eager_refresh": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Lead time to refresh cache entries nearing expiration",
                            "maximum": 60,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "testping_delta": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Deltas for checking cbind cluster health",
                            "maximum": 60,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_max_noerror": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Upper bound on ttl for cache hits",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_max_nxdomain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Upper bound on ttl for nxdomain",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_max_other": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Upper bound on ttl for non-nxdomain failures",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_max_servfail": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Upper bound on ttl for server failures",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_min_noerror": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Lower bound on ttl for cache hits",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_min_nxdomain": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Lower bound on ttl for nxdomain",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_min_other": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Lower bound on ttl for non-nxdomain failures",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ttl_min_servfail": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Lower bound on ttl for server failures",
                            "maximum": 3600,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/network/dnscache/flush": {
        "POST_args": {
            "description": "Flush the DNSCache.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/network/external": {
        "GET_args": {
            "description": "View external network settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "items": {
                        "properties": {
                            "default_groupnet": {
                                "description": "Default client-side DNS settings for non-multitenancy aware programs",
                                "required": true,
                                "type": "string"
                            },
                            "sbr": {
                                "description": "Enable or disable Source Based Routing (Defaults to false)",
                                "required": true,
                                "type": "boolean"
                            },
                            "sc_rebalance_delay": {
                                "description": "Delay in seconds for IP rebalance.",
                                "maximum": 10,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "tcp_ports": {
                                "description": "List of client TCP ports.",
                                "items": {
                                    "maximum": 65535,
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify external network settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "sbr": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enable or disable Source Based Routing (Defaults to false)",
                            "type": "boolean"
                        }
                    ]
                },
                "sc_rebalance_delay": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Delay in seconds for IP rebalance.",
                            "maximum": 10,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "tcp_ports": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "List of client TCP ports.",
                            "items": {
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets": {
        "GET_args": {
            "description": "Get a list of groupnets.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "groupnets": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "A description of the groupnet.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "dns_cache_enabled": {
                                "description": "DNS caching is enabled or disabled.",
                                "type": "boolean"
                            },
                            "dns_options": {
                                "description": "List of DNS resolver options.",
                                "items": {
                                    "enum": [
                                        "rotate"
                                    ],
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "dns_search": {
                                "description": "List of DNS search suffixes.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 6,
                                "type": "array"
                            },
                            "dns_servers": {
                                "description": "List of Domain Name Server IP addresses.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 3,
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique Interface ID.",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the groupnet.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "server_side_dns_search": {
                                "description": "Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.",
                                "type": "boolean"
                            },
                            "subnets": {
                                "description": "Name of the subnets in the groupnet.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new groupnet.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "description": {
                    "description": "A description of the groupnet.",
                    "maxLength": 128,
                    "type": "string"
                },
                "dns_cache_enabled": {
                    "description": "DNS caching is enabled or disabled.",
                    "type": "boolean"
                },
                "dns_options": {
                    "description": "List of DNS resolver options.",
                    "items": {
                        "enum": [
                            "rotate"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "dns_search": {
                    "description": "List of DNS search suffixes.",
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 6,
                    "type": "array"
                },
                "dns_servers": {
                    "description": "List of Domain Name Server IP addresses.",
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 3,
                    "type": "array"
                },
                "name": {
                    "description": "The name of the groupnet.",
                    "maxLength": 32,
                    "required": true,
                    "type": "string"
                },
                "server_side_dns_search": {
                    "description": "Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>": {
        "DELETE_args": {
            "description": "Delete a network groupnet.",
            "type": "object"
        },
        "GET_args": {
            "description": "View a network groupnet.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "groupnets": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "A description of the groupnet.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "dns_cache_enabled": {
                                "description": "DNS caching is enabled or disabled.",
                                "type": "boolean"
                            },
                            "dns_options": {
                                "description": "List of DNS resolver options.",
                                "items": {
                                    "enum": [
                                        "rotate"
                                    ],
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "dns_search": {
                                "description": "List of DNS search suffixes.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 6,
                                "type": "array"
                            },
                            "dns_servers": {
                                "description": "List of Domain Name Server IP addresses.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 3,
                                "type": "array"
                            },
                            "id": {
                                "description": "Unique Interface ID.",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the groupnet.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "server_side_dns_search": {
                                "description": "Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.",
                                "type": "boolean"
                            },
                            "subnets": {
                                "description": "Name of the subnets in the groupnet.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a network groupnet.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "description": {
                    "description": "A description of the groupnet.",
                    "maxLength": 128,
                    "type": "string"
                },
                "dns_cache_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "DNS caching is enabled or disabled.",
                            "type": "boolean"
                        }
                    ]
                },
                "dns_options": {
                    "description": "List of DNS resolver options.",
                    "items": {
                        "enum": [
                            "rotate"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "dns_search": {
                    "description": "List of DNS search suffixes.",
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 6,
                    "type": "array"
                },
                "dns_servers": {
                    "description": "List of Domain Name Server IP addresses.",
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 3,
                    "type": "array"
                },
                "name": {
                    "description": "The name of the groupnet.",
                    "maxLength": 32,
                    "type": "string"
                },
                "server_side_dns_search": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets": {
        "GET_args": {
            "description": "Get a list of subnets.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subnets": {
                    "items": {
                        "properties": {
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "type": "string"
                            },
                            "base_addr": {
                                "description": "The base IP address.",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the subnet.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "dsr_addrs": {
                                "description": "List of Direct Server Return addresses.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "gateway": {
                                "description": "Gateway IP address.",
                                "type": "string"
                            },
                            "gateway_priority": {
                                "description": "Gateway priority.",
                                "maximum": 2147483647,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this subnet belongs to.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Subnet ID.",
                                "type": "string"
                            },
                            "mtu": {
                                "description": "MTU of the subnet.",
                                "maximum": 9000,
                                "minimum": 576,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the subnet.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "pools": {
                                "description": "Name of the pools in the subnet.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "prefixlen": {
                                "description": "Subnet Prefix Length.",
                                "maximum": 128,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "sc_service_addr": {
                                "description": "The address that SmartConnect listens for DNS requests.",
                                "type": "string"
                            },
                            "vlan_enabled": {
                                "description": "VLAN tagging enabled or disabled.",
                                "type": "boolean"
                            },
                            "vlan_id": {
                                "description": "VLAN ID for all interfaces in the subnet.",
                                "maximum": 4094,
                                "minimum": 2,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new subnet.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "addr_family": {
                    "description": "IP address format.",
                    "enum": [
                        "ipv4",
                        "ipv6"
                    ],
                    "required": true,
                    "type": "string"
                },
                "description": {
                    "description": "A description of the subnet.",
                    "maxLength": 128,
                    "type": "string"
                },
                "dsr_addrs": {
                    "description": "List of Direct Server Return addresses.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gateway": {
                    "description": "Gateway IP address.",
                    "type": "string"
                },
                "gateway_priority": {
                    "description": "Gateway priority.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "mtu": {
                    "description": "MTU of the subnet.",
                    "maximum": 9000,
                    "minimum": 576,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the subnet.",
                    "maxLength": 32,
                    "required": true,
                    "type": "string"
                },
                "prefixlen": {
                    "description": "Subnet Prefix Length.",
                    "maximum": 128,
                    "minimum": 1,
                    "required": true,
                    "type": "integer"
                },
                "sc_service_addr": {
                    "description": "The address that SmartConnect listens for DNS requests.",
                    "type": "string"
                },
                "vlan_enabled": {
                    "description": "VLAN tagging enabled or disabled.",
                    "type": "boolean"
                },
                "vlan_id": {
                    "description": "VLAN ID for all interfaces in the subnet.",
                    "maximum": 4094,
                    "minimum": 2,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>": {
        "DELETE_args": {
            "description": "Delete a network subnet..",
            "properties": {
                "force": {
                    "description": "force deleting this subnet even if pools in other subnets rely on this subnet's SC VIP.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "View a network subnet.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "subnets": {
                    "items": {
                        "properties": {
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "type": "string"
                            },
                            "base_addr": {
                                "description": "The base IP address.",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the subnet.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "dsr_addrs": {
                                "description": "List of Direct Server Return addresses.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "gateway": {
                                "description": "Gateway IP address.",
                                "type": "string"
                            },
                            "gateway_priority": {
                                "description": "Gateway priority.",
                                "maximum": 2147483647,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this subnet belongs to.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Subnet ID.",
                                "type": "string"
                            },
                            "mtu": {
                                "description": "MTU of the subnet.",
                                "maximum": 9000,
                                "minimum": 576,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the subnet.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "pools": {
                                "description": "Name of the pools in the subnet.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "prefixlen": {
                                "description": "Subnet Prefix Length.",
                                "maximum": 128,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "sc_service_addr": {
                                "description": "The address that SmartConnect listens for DNS requests.",
                                "type": "string"
                            },
                            "vlan_enabled": {
                                "description": "VLAN tagging enabled or disabled.",
                                "type": "boolean"
                            },
                            "vlan_id": {
                                "description": "VLAN ID for all interfaces in the subnet.",
                                "maximum": 4094,
                                "minimum": 2,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a network subnet.",
            "properties": {
                "force": {
                    "description": "force modifying this subnet even if it causes an MTU conflict.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "description": {
                    "description": "A description of the subnet.",
                    "maxLength": 128,
                    "type": "string"
                },
                "dsr_addrs": {
                    "description": "List of Direct Server Return addresses.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gateway": {
                    "description": "Gateway IP address.",
                    "type": "string"
                },
                "gateway_priority": {
                    "description": "Gateway priority.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "mtu": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "MTU of the subnet.",
                            "maximum": 9000,
                            "minimum": 576,
                            "type": "integer"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the subnet.",
                    "maxLength": 32,
                    "type": "string"
                },
                "prefixlen": {
                    "description": "Subnet Prefix Length.",
                    "maximum": 128,
                    "minimum": 1,
                    "type": "integer"
                },
                "sc_service_addr": {
                    "description": "The address that SmartConnect listens for DNS requests.",
                    "type": "string"
                },
                "vlan_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "VLAN tagging enabled or disabled.",
                            "type": "boolean"
                        }
                    ]
                },
                "vlan_id": {
                    "description": "VLAN ID for all interfaces in the subnet.",
                    "maximum": 4094,
                    "minimum": 2,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools": {
        "GET_args": {
            "description": "Get a list of network pools.",
            "properties": {
                "access_zone": {
                    "description": "If specified, only pools with this zone name will be returned.",
                    "type": "string"
                },
                "alloc_method": {
                    "description": "If specified, only pools with this allocation type will be returned.",
                    "enum": [
                        "static",
                        "dynamic"
                    ],
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pools": {
                    "items": {
                        "properties": {
                            "access_zone": {
                                "description": "Name of a valid access zone to map IP address pool to the zone.",
                                "minLength": 1,
                                "required": true,
                                "type": "string"
                            },
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "aggregation_mode": {
                                "description": "OneFS supports the following NIC aggregation modes.",
                                "enum": [
                                    "roundrobin",
                                    "failover",
                                    "lacp",
                                    "fec"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "alloc_method": {
                                "description": "Specifies how IP address allocation is done among pool members.",
                                "enum": [
                                    "dynamic",
                                    "static"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the pool.",
                                "maxLength": 128,
                                "required": true,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this pool belongs to.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Pool ID.",
                                "required": true,
                                "type": "string"
                            },
                            "ifaces": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "iface": {
                                            "description": "A string that defines an interface name.",
                                            "type": "string"
                                        },
                                        "lnn": {
                                            "description": "Logical Node Number.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.",
                                "maxLength": 32,
                                "required": true,
                                "type": "string"
                            },
                            "ranges": {
                                "description": "List of IP address ranges in this pool.",
                                "items": {
                                    "properties": {
                                        "high": {
                                            "description": "High IP",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "low": {
                                            "description": "Low IP",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "rebalance_policy": {
                                "description": "Rebalance policy..",
                                "enum": [
                                    "auto",
                                    "manual"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "rules": {
                                "description": "Names of the rules in this pool.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_auto_unsuspend_delay": {
                                "description": "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.",
                                "maximum": 86400,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "sc_connect_policy": {
                                "description": "SmartConnect client connection balancing policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "sc_dns_zone": {
                                "description": "SmartConnect zone name for the pool.",
                                "required": true,
                                "type": "string"
                            },
                            "sc_dns_zone_aliases": {
                                "description": "List of SmartConnect zone aliases (DNS names) to the pool.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_failover_policy": {
                                "description": "SmartConnect IP failover policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "sc_subnet": {
                                "description": "Name of SmartConnect service subnet for this pool.",
                                "required": true,
                                "type": "string"
                            },
                            "sc_suspended_nodes": {
                                "description": "List of LNNs showing currently suspended nodes in SmartConnect.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_ttl": {
                                "description": "Time to live value for SmartConnect DNS query responses in seconds.",
                                "maximum": 2147483647,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "static_routes": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "gateway": {
                                            "description": "Address of the gateway in the format: yyy.yyy.yyy.yyy",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "prefixlen": {
                                            "description": "Prefix length in the format: nn.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "subnet": {
                                            "description": "Network address in the format: xxx.xxx.xxx.xxx",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "subnet": {
                                "description": "The name of the subnet.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new pool.",
            "properties": {
                "force": {
                    "description": "Force creating this pool even if it causes an MTU conflict.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "access_zone": {
                    "description": "Name of a valid access zone to map IP address pool to the zone.",
                    "minLength": 1,
                    "type": "string"
                },
                "aggregation_mode": {
                    "description": "OneFS supports the following NIC aggregation modes.",
                    "enum": [
                        "roundrobin",
                        "failover",
                        "lacp",
                        "fec"
                    ],
                    "type": "string"
                },
                "alloc_method": {
                    "description": "Specifies how IP address allocation is done among pool members.",
                    "enum": [
                        "dynamic",
                        "static"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "A description of the pool.",
                    "maxLength": 128,
                    "type": "string"
                },
                "ifaces": {
                    "description": "List of interface members in this pool.",
                    "items": {
                        "properties": {
                            "iface": {
                                "description": "A string that defines an interface name.",
                                "type": "string"
                            },
                            "lnn": {
                                "description": "Logical Node Number.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.",
                    "maxLength": 32,
                    "required": true,
                    "type": "string"
                },
                "ranges": {
                    "description": "List of IP address ranges in this pool.",
                    "items": {
                        "properties": {
                            "high": {
                                "description": "High IP",
                                "required": true,
                                "type": "string"
                            },
                            "low": {
                                "description": "Low IP",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "rebalance_policy": {
                    "description": "Rebalance policy..",
                    "enum": [
                        "auto",
                        "manual"
                    ],
                    "type": "string"
                },
                "sc_auto_unsuspend_delay": {
                    "description": "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.",
                    "maximum": 86400,
                    "minimum": 0,
                    "type": "integer"
                },
                "sc_connect_policy": {
                    "description": "SmartConnect client connection balancing policy.",
                    "enum": [
                        "round_robin",
                        "conn_count",
                        "throughput",
                        "cpu_usage"
                    ],
                    "type": "string"
                },
                "sc_dns_zone": {
                    "description": "SmartConnect zone name for the pool.",
                    "type": "string"
                },
                "sc_dns_zone_aliases": {
                    "description": "List of SmartConnect zone aliases (DNS names) to the pool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sc_failover_policy": {
                    "description": "SmartConnect IP failover policy.",
                    "enum": [
                        "round_robin",
                        "conn_count",
                        "throughput",
                        "cpu_usage"
                    ],
                    "type": "string"
                },
                "sc_subnet": {
                    "description": "Name of SmartConnect service subnet for this pool.",
                    "type": "string"
                },
                "sc_ttl": {
                    "description": "Time to live value for SmartConnect DNS query responses in seconds.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "static_routes": {
                    "description": "List of interface members in this pool.",
                    "items": {
                        "properties": {
                            "gateway": {
                                "description": "Address of the gateway in the format: yyy.yyy.yyy.yyy",
                                "required": true,
                                "type": "string"
                            },
                            "prefixlen": {
                                "description": "Prefix length in the format: nn.",
                                "required": true,
                                "type": "integer"
                            },
                            "subnet": {
                                "description": "Network address in the format: xxx.xxx.xxx.xxx",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>": {
        "DELETE_args": {
            "description": "Delete a network pool.",
            "type": "object"
        },
        "GET_args": {
            "description": "View a single network pool.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pools": {
                    "items": {
                        "properties": {
                            "access_zone": {
                                "description": "Name of a valid access zone to map IP address pool to the zone.",
                                "minLength": 1,
                                "required": true,
                                "type": "string"
                            },
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "aggregation_mode": {
                                "description": "OneFS supports the following NIC aggregation modes.",
                                "enum": [
                                    "roundrobin",
                                    "failover",
                                    "lacp",
                                    "fec"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "alloc_method": {
                                "description": "Specifies how IP address allocation is done among pool members.",
                                "enum": [
                                    "dynamic",
                                    "static"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the pool.",
                                "maxLength": 128,
                                "required": true,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this pool belongs to.",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Pool ID.",
                                "required": true,
                                "type": "string"
                            },
                            "ifaces": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "iface": {
                                            "description": "A string that defines an interface name.",
                                            "type": "string"
                                        },
                                        "lnn": {
                                            "description": "Logical Node Number.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.",
                                "maxLength": 32,
                                "required": true,
                                "type": "string"
                            },
                            "ranges": {
                                "description": "List of IP address ranges in this pool.",
                                "items": {
                                    "properties": {
                                        "high": {
                                            "description": "High IP",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "low": {
                                            "description": "Low IP",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "rebalance_policy": {
                                "description": "Rebalance policy..",
                                "enum": [
                                    "auto",
                                    "manual"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "rules": {
                                "description": "Names of the rules in this pool.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_auto_unsuspend_delay": {
                                "description": "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.",
                                "maximum": 86400,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "sc_connect_policy": {
                                "description": "SmartConnect client connection balancing policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "sc_dns_zone": {
                                "description": "SmartConnect zone name for the pool.",
                                "required": true,
                                "type": "string"
                            },
                            "sc_dns_zone_aliases": {
                                "description": "List of SmartConnect zone aliases (DNS names) to the pool.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_failover_policy": {
                                "description": "SmartConnect IP failover policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "sc_subnet": {
                                "description": "Name of SmartConnect service subnet for this pool.",
                                "required": true,
                                "type": "string"
                            },
                            "sc_suspended_nodes": {
                                "description": "List of LNNs showing currently suspended nodes in SmartConnect.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "sc_ttl": {
                                "description": "Time to live value for SmartConnect DNS query responses in seconds.",
                                "maximum": 2147483647,
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "static_routes": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "gateway": {
                                            "description": "Address of the gateway in the format: yyy.yyy.yyy.yyy",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "prefixlen": {
                                            "description": "Prefix length in the format: nn.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "subnet": {
                                            "description": "Network address in the format: xxx.xxx.xxx.xxx",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "subnet": {
                                "description": "The name of the subnet.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a network pool.",
            "properties": {
                "force": {
                    "description": "force creating this pool even if it causes an MTU conflict.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "access_zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Name of a valid access zone to map IP address pool to the zone.",
                            "minLength": 1,
                            "type": "string"
                        }
                    ]
                },
                "aggregation_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "OneFS supports the following NIC aggregation modes.",
                            "enum": [
                                "roundrobin",
                                "failover",
                                "lacp",
                                "fec"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "alloc_method": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies how IP address allocation is done among pool members.",
                            "enum": [
                                "dynamic",
                                "static"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "description": {
                    "description": "A description of the pool.",
                    "maxLength": 128,
                    "type": "string"
                },
                "ifaces": {
                    "description": "List of interface members in this pool.",
                    "items": {
                        "properties": {
                            "iface": {
                                "description": "A string that defines an interface name.",
                                "type": "string"
                            },
                            "lnn": {
                                "description": "Logical Node Number.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.",
                    "maxLength": 32,
                    "type": "string"
                },
                "ranges": {
                    "description": "List of IP address ranges in this pool.",
                    "items": {
                        "properties": {
                            "high": {
                                "description": "High IP",
                                "required": true,
                                "type": "string"
                            },
                            "low": {
                                "description": "Low IP",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "rebalance_policy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Rebalance policy..",
                            "enum": [
                                "auto",
                                "manual"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "sc_auto_unsuspend_delay": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.",
                            "maximum": 86400,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "sc_connect_policy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "SmartConnect client connection balancing policy.",
                            "enum": [
                                "round_robin",
                                "conn_count",
                                "throughput",
                                "cpu_usage"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "sc_dns_zone": {
                    "description": "SmartConnect zone name for the pool.",
                    "type": "string"
                },
                "sc_dns_zone_aliases": {
                    "description": "List of SmartConnect zone aliases (DNS names) to the pool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sc_failover_policy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "SmartConnect IP failover policy.",
                            "enum": [
                                "round_robin",
                                "conn_count",
                                "throughput",
                                "cpu_usage"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "sc_subnet": {
                    "description": "Name of SmartConnect service subnet for this pool.",
                    "type": "string"
                },
                "sc_ttl": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Time to live value for SmartConnect DNS query responses in seconds.",
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "static_routes": {
                    "description": "List of interface members in this pool.",
                    "items": {
                        "properties": {
                            "gateway": {
                                "description": "Address of the gateway in the format: yyy.yyy.yyy.yyy",
                                "required": true,
                                "type": "string"
                            },
                            "prefixlen": {
                                "description": "Prefix length in the format: nn.",
                                "required": true,
                                "type": "integer"
                            },
                            "subnet": {
                                "description": "Network address in the format: xxx.xxx.xxx.xxx",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/interfaces": {
        "GET_args": {
            "description": "Get a list of interfaces.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "lnns": {
                    "description": "Get a list of interfaces for the specified lnn.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "interface": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "Unique interface ID.",
                                "required": true,
                                "type": "string"
                            },
                            "ip_addrs": {
                                "description": "List of IP addresses",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "lnn": {
                                "description": "Logical Node Number",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the interface.",
                                "required": true,
                                "type": "string"
                            },
                            "nic_name": {
                                "description": "NIC name",
                                "required": true,
                                "type": "string"
                            },
                            "owners": {
                                "description": "List of owners (membership)",
                                "items": {
                                    "properties": {
                                        "groupnet": {
                                            "type": "string"
                                        },
                                        "pool": {
                                            "type": "string"
                                        },
                                        "subnet": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "status": {
                                "description": "Status of the interface",
                                "enum": [
                                    "up",
                                    "no_carrier",
                                    "active",
                                    "inactive"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "Interface type.  The '*gige' types stand for 'gigabit ethernet'.  'gige' itself is occasionally also referred to in other places as 'ext' for 'external'.  'ib' and 'ib_qdr' are internal Infiniband interface types.  'vlan' and 'vmxnet3' are virtual interface types that appear on virtual nodes.  'loopback' is an interface for failover addresses and should only appear if failover is configured.",
                                "enum": [
                                    "any",
                                    "gige",
                                    "fastgige",
                                    "10gige",
                                    "40gige",
                                    "ib",
                                    "ib_qdr",
                                    "aggregated",
                                    "vlan",
                                    "vmxnet3",
                                    "loopback"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rebalance-ips": {
        "POST_args": {
            "description": "Rebalance IP addresses in specified pool.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rules": {
        "GET_args": {
            "description": "Get a list of network rules.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "rules": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description for the provisioning rule.",
                                "maxLength": 128,
                                "required": true,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this rule belongs to",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique rule ID.",
                                "required": true,
                                "type": "string"
                            },
                            "iface": {
                                "description": "Interface name the provisioning rule applies to.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the provisioning rule.",
                                "maxLength": 32,
                                "required": true,
                                "type": "string"
                            },
                            "node_type": {
                                "description": "Node type the provisioning rule applies to.",
                                "enum": [
                                    "any",
                                    "storage",
                                    "accelerator",
                                    "storage-i",
                                    "accelerator-i",
                                    "backup-accelerator"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "pool": {
                                "description": "Name of the pool this rule belongs to.",
                                "required": true,
                                "type": "string"
                            },
                            "subnet": {
                                "description": "Name of the subnet this rule belongs to.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new rule.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "description": {
                    "description": "Description for the provisioning rule.",
                    "maxLength": 128,
                    "type": "string"
                },
                "iface": {
                    "description": "Interface name the provisioning rule applies to.",
                    "required": true,
                    "type": "string"
                },
                "name": {
                    "description": "Name of the provisioning rule.",
                    "maxLength": 32,
                    "required": true,
                    "type": "string"
                },
                "node_type": {
                    "description": "Node type the provisioning rule applies to.",
                    "enum": [
                        "any",
                        "storage",
                        "accelerator",
                        "storage-i",
                        "accelerator-i",
                        "backup-accelerator"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rules/<NAME>": {
        "DELETE_args": {
            "description": "Delete a network rule.",
            "type": "object"
        },
        "GET_args": {
            "description": "View a single network rule.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "rules": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description for the provisioning rule.",
                                "maxLength": 128,
                                "required": true,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this rule belongs to",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique rule ID.",
                                "required": true,
                                "type": "string"
                            },
                            "iface": {
                                "description": "Interface name the provisioning rule applies to.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the provisioning rule.",
                                "maxLength": 32,
                                "required": true,
                                "type": "string"
                            },
                            "node_type": {
                                "description": "Node type the provisioning rule applies to.",
                                "enum": [
                                    "any",
                                    "storage",
                                    "accelerator",
                                    "storage-i",
                                    "accelerator-i",
                                    "backup-accelerator"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "pool": {
                                "description": "Name of the pool this rule belongs to.",
                                "required": true,
                                "type": "string"
                            },
                            "subnet": {
                                "description": "Name of the subnet this rule belongs to.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a network rule.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "description": {
                    "description": "Description for the provisioning rule.",
                    "maxLength": 128,
                    "type": "string"
                },
                "iface": {
                    "description": "Interface name the provisioning rule applies to.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the provisioning rule.",
                    "maxLength": 32,
                    "type": "string"
                },
                "node_type": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Node type the provisioning rule applies to.",
                            "enum": [
                                "any",
                                "storage",
                                "accelerator",
                                "storage-i",
                                "accelerator-i",
                                "backup-accelerator"
                            ],
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/sc-resume-nodes": {
        "POST_args": {
            "description": "Resume suspended nodes.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "lnn": {
                    "description": "Logical node numbers of the nodes suspended/resumed.",
                    "items": {
                        "type": "integer"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/sc-suspend-nodes": {
        "POST_args": {
            "description": "Suspend nodes.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "lnn": {
                    "description": "Logical node numbers of the nodes suspended/resumed.",
                    "items": {
                        "type": "integer"
                    },
                    "required": true,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/network/interfaces": {
        "GET_args": {
            "description": "Get a list of interfaces.",
            "properties": {
                "alloc_method": {
                    "description": "Filter addresses and owners by pool address allocation method.",
                    "enum": [
                        "dynamic",
                        "static"
                    ],
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "lnns": {
                    "description": "Get a list of interfaces for the specified lnn.",
                    "type": "string"
                },
                "network": {
                    "description": "Show interfaces associated with external and/or internal networks. Default is 'external'",
                    "enum": [
                        "all",
                        "external",
                        "internal"
                    ],
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "interface": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "Unique interface ID.",
                                "required": true,
                                "type": "string"
                            },
                            "ip_addrs": {
                                "description": "List of IP addresses",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "lnn": {
                                "description": "Logical Node Number",
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the interface.",
                                "required": true,
                                "type": "string"
                            },
                            "nic_name": {
                                "description": "NIC name",
                                "required": true,
                                "type": "string"
                            },
                            "owners": {
                                "description": "List of owners (membership)",
                                "items": {
                                    "properties": {
                                        "groupnet": {
                                            "type": "string"
                                        },
                                        "pool": {
                                            "type": "string"
                                        },
                                        "subnet": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "status": {
                                "description": "Status of the interface",
                                "enum": [
                                    "up",
                                    "no_carrier",
                                    "active",
                                    "inactive"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "type": {
                                "description": "Interface type.  The '*gige' types stand for 'gigabit ethernet'.  'gige' itself is occasionally also referred to in other places as 'ext' for 'external'.  'ib' and 'ib_qdr' are internal Infiniband interface types.  'vlan' and 'vmxnet3' are virtual interface types that appear on virtual nodes.  'loopback' is an interface for failover addresses and should only appear if failover is configured.",
                                "enum": [
                                    "any",
                                    "gige",
                                    "fastgige",
                                    "10gige",
                                    "40gige",
                                    "ib",
                                    "ib_qdr",
                                    "aggregated",
                                    "vlan",
                                    "vmxnet3",
                                    "loopback"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/pools": {
        "GET_args": {
            "description": "Get a list of flexnet pools.",
            "properties": {
                "access_zone": {
                    "description": "If specified, only pools with this zone name will be returned.",
                    "type": "string"
                },
                "alloc_method": {
                    "description": "If specified, only pools with this allocation type will be returned.",
                    "enum": [
                        "static",
                        "dynamic"
                    ],
                    "type": "string"
                },
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "groupnet": {
                    "description": "If specified, only pools for this groupnet will be returned.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "subnet": {
                    "description": "If specified, only pools for this subnet will be returned.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "pools": {
                    "items": {
                        "properties": {
                            "access_zone": {
                                "description": "Name of a valid access zone to map IP address pool to the zone.",
                                "minLength": 1,
                                "type": "string"
                            },
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "type": "string"
                            },
                            "aggregation_mode": {
                                "description": "OneFS supports the following NIC aggregation modes.",
                                "enum": [
                                    "roundrobin",
                                    "failover",
                                    "lacp",
                                    "fec"
                                ],
                                "type": "string"
                            },
                            "alloc_method": {
                                "description": "Specifies how IP address allocation is done among pool members.",
                                "enum": [
                                    "dynamic",
                                    "static"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the pool.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this pool belongs to.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Pool ID.",
                                "type": "string"
                            },
                            "ifaces": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "iface": {
                                            "description": "A string that defines an interface name.",
                                            "type": "string"
                                        },
                                        "lnn": {
                                            "description": "Logical Node Number.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "ranges": {
                                "description": "List of IP address ranges in this pool.",
                                "items": {
                                    "properties": {
                                        "high": {
                                            "description": "High IP",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "low": {
                                            "description": "Low IP",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "rebalance_policy": {
                                "description": "Rebalance policy..",
                                "enum": [
                                    "auto",
                                    "manual"
                                ],
                                "type": "string"
                            },
                            "rules": {
                                "description": "Names of the rules in this pool.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "sc_auto_unsuspend_delay": {
                                "description": "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.",
                                "maximum": 86400,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "sc_connect_policy": {
                                "description": "SmartConnect client connection balancing policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "type": "string"
                            },
                            "sc_dns_zone": {
                                "description": "SmartConnect zone name for the pool.",
                                "type": "string"
                            },
                            "sc_dns_zone_aliases": {
                                "description": "List of SmartConnect zone aliases (DNS names) to the pool.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "sc_failover_policy": {
                                "description": "SmartConnect IP failover policy.",
                                "enum": [
                                    "round_robin",
                                    "conn_count",
                                    "throughput",
                                    "cpu_usage"
                                ],
                                "type": "string"
                            },
                            "sc_subnet": {
                                "description": "Name of SmartConnect service subnet for this pool.",
                                "type": "string"
                            },
                            "sc_suspended_nodes": {
                                "description": "List of LNNs showing currently suspended nodes in SmartConnect.",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "sc_ttl": {
                                "description": "Time to live value for SmartConnect DNS query responses in seconds.",
                                "maximum": 2147483647,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "static_routes": {
                                "description": "List of interface members in this pool.",
                                "items": {
                                    "properties": {
                                        "gateway": {
                                            "description": "Address of the gateway in the format: yyy.yyy.yyy.yyy",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "prefixlen": {
                                            "description": "Prefix length in the format: nn.",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "subnet": {
                                            "description": "Network address in the format: xxx.xxx.xxx.xxx",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "subnet": {
                                "description": "The name of the subnet.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/rules": {
        "GET_args": {
            "description": "Get a list of network rules.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "groupnet": {
                    "description": "Name of the groupnet to list rules from.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "pool": {
                    "description": "Name of the pool to list rules from.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "subnet": {
                    "description": "Name of the subnet to list rules from.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "rules": {
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description for the provisioning rule.",
                                "maxLength": 128,
                                "required": true,
                                "type": "string"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this rule belongs to",
                                "required": true,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique rule ID.",
                                "required": true,
                                "type": "string"
                            },
                            "iface": {
                                "description": "Interface name the provisioning rule applies to.",
                                "required": true,
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the provisioning rule.",
                                "maxLength": 32,
                                "required": true,
                                "type": "string"
                            },
                            "node_type": {
                                "description": "Node type the provisioning rule applies to.",
                                "enum": [
                                    "any",
                                    "storage",
                                    "accelerator",
                                    "storage-i",
                                    "accelerator-i",
                                    "backup-accelerator"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "pool": {
                                "description": "Name of the pool this rule belongs to.",
                                "required": true,
                                "type": "string"
                            },
                            "subnet": {
                                "description": "Name of the subnet this rule belongs to.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/network/sc-rebalance-all": {
        "POST_args": {
            "description": "Rebalance IP addresses in all pools.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/network/subnets": {
        "GET_args": {
            "description": "Get a list of subnets.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "groupnet": {
                    "description": "If specified, only subnets for this groupnet will be returned.",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subnets": {
                    "items": {
                        "properties": {
                            "addr_family": {
                                "description": "IP address format.",
                                "enum": [
                                    "ipv4",
                                    "ipv6"
                                ],
                                "type": "string"
                            },
                            "base_addr": {
                                "description": "The base IP address.",
                                "type": "string"
                            },
                            "description": {
                                "description": "A description of the subnet.",
                                "maxLength": 128,
                                "type": "string"
                            },
                            "dsr_addrs": {
                                "description": "List of Direct Server Return addresses.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "gateway": {
                                "description": "Gateway IP address.",
                                "type": "string"
                            },
                            "gateway_priority": {
                                "description": "Gateway priority.",
                                "maximum": 2147483647,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "groupnet": {
                                "description": "Name of the groupnet this subnet belongs to.",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique Subnet ID.",
                                "type": "string"
                            },
                            "mtu": {
                                "description": "MTU of the subnet.",
                                "maximum": 9000,
                                "minimum": 576,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The name of the subnet.",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "pools": {
                                "description": "Name of the pools in the subnet.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "prefixlen": {
                                "description": "Subnet Prefix Length.",
                                "maximum": 128,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "sc_service_addr": {
                                "description": "The address that SmartConnect listens for DNS requests.",
                                "type": "string"
                            },
                            "vlan_enabled": {
                                "description": "VLAN tagging enabled or disabled.",
                                "type": "boolean"
                            },
                            "vlan_id": {
                                "description": "VLAN ID for all interfaces in the subnet.",
                                "maximum": 4094,
                                "minimum": 2,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ftp/settings": {
        "GET_args": {
            "description": "Retrieve the FTP settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "FTP settings.",
                    "properties": {
                        "accept_timeout": {
                            "description": "The timeout, in seconds, for a remote client to establish a PASV style data connection.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        },
                        "allow_anon_access": {
                            "description": "Controls whether anonymous logins are permitted or not.",
                            "type": "boolean"
                        },
                        "allow_anon_upload": {
                            "description": "Controls whether anonymous users will be permitted to upload files.",
                            "type": "boolean"
                        },
                        "allow_dirlists": {
                            "description": "If set to false, all directory list commands will return a permission denied error.",
                            "type": "boolean"
                        },
                        "allow_downloads": {
                            "description": "If set to false, all downloads requests will return a permission denied error.",
                            "type": "boolean"
                        },
                        "allow_local_access": {
                            "description": "Controls whether local logins are permitted or not.",
                            "type": "boolean"
                        },
                        "allow_writes": {
                            "description": "This controls whether any FTP commands which change the filesystem are allowed or not.",
                            "type": "boolean"
                        },
                        "always_chdir_homedir": {
                            "description": "This controls whether FTP will always initially change directories to the home directory of the user, regardless of whether it is chroot-ing.",
                            "type": "boolean"
                        },
                        "anon_chown_username": {
                            "description": "This is the name of the user who is given ownership of anonymously uploaded files.",
                            "type": "string"
                        },
                        "anon_password_list": {
                            "description": "A list of passwords for anonymous users.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "anon_root_path": {
                            "description": "This option represents a directory in /ifs which vsftpd will try to change into after an anonymous login.",
                            "type": "string"
                        },
                        "anon_umask": {
                            "description": "The value that the umask for file creation is set to for anonymous users.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "ascii_mode": {
                            "description": "Controls whether ascii mode data transfers are honored for various types of requests.",
                            "enum": [
                                "off",
                                "upload",
                                "download",
                                "both"
                            ],
                            "type": "string"
                        },
                        "chroot_exception_list": {
                            "description": "A list of users that are not chrooted when logging in.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "chroot_local_mode": {
                            "description": "If set to 'all', all local users will be (by default) placed in a chroot() jail in their home directory after login. If set to 'all-with-exceptions', all local users except those listed in the chroot exception list (isi ftp chroot-exception-list) will be placed in a chroot() jail in their home directory after login. If set to 'none', no local users will be chrooted by default. If set to 'none-with-exceptions', only the local users listed in the chroot exception list (isi ftp chroot-exception-list) will be place in a chroot() jail in their home directory after login.",
                            "enum": [
                                "all",
                                "none",
                                "all-with-exceptions",
                                "none-with-exceptions"
                            ],
                            "type": "string"
                        },
                        "connect_timeout": {
                            "description": "The timeout, in seconds, for a remote client to respond to our PORT style data connection.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        },
                        "data_timeout": {
                            "description": "The timeout, in seconds, which is roughly the maximum time we permit data transfers to stall for with no progress. If the timeout triggers, the remote client is kicked off.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        },
                        "denied_user_list": {
                            "description": "A list of uses that will be denied access.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "dirlist_localtime": {
                            "description": "If enabled, display directory listings with the time in your local time zone. The default is to display GMT. The times returned by the MDTM FTP command are also affected by this option.",
                            "type": "boolean"
                        },
                        "dirlist_names": {
                            "description": "When set to 'hide',  all user and group information in directory listings will be displayed as 'ftp'. When set to 'textual', textual names are shown in the user and group fields of directory listings. When set to 'numeric', numeric IDs are show in the user and group fields of directory listings.",
                            "enum": [
                                "numeric",
                                "textual",
                                "hide"
                            ],
                            "type": "string"
                        },
                        "file_create_perm": {
                            "description": "The permissions with which uploaded files are created. Umasks are applied on top of this value.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "limit_anon_passwords": {
                            "description": "This field determines whether the anon_password_list is used.",
                            "type": "boolean"
                        },
                        "local_root_path": {
                            "description": "This option represents a directory in /ifs which vsftpd will try to change into after a local login.",
                            "type": "string"
                        },
                        "local_umask": {
                            "description": "The value that the umask for file creation is set to for local users.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "server_to_server": {
                            "description": "If enabled, allow server-to-server (FXP) transfers.",
                            "type": "boolean"
                        },
                        "service": {
                            "description": "This field controls whether the FTP daemon is running.",
                            "type": "boolean"
                        },
                        "session_support": {
                            "description": "If enabled, maintain login sessions for each user through Pluggable Authentication Modules (PAM). Disabling this option prevents the ability to do automatic home directory creation if that functionality were otherwise available.",
                            "type": "boolean"
                        },
                        "session_timeout": {
                            "description": "The timeout, in seconds, which is roughly the maximum time we permit data transfers to stall for with no progress. If the timeout triggers, the remote client is kicked off.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        },
                        "user_config_dir": {
                            "description": "Specifies the directory where per-user config overrides can be found.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the FTP settings. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "FTP settings.",
            "properties": {
                "accept_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The timeout, in seconds, for a remote client to establish a PASV style data connection.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        }
                    ]
                },
                "allow_anon_access": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Controls whether anonymous logins are permitted or not.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_anon_upload": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Controls whether anonymous users will be permitted to upload files.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_dirlists": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If set to false, all directory list commands will return a permission denied error.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_downloads": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If set to false, all downloads requests will return a permission denied error.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_local_access": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Controls whether local logins are permitted or not.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_writes": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This controls whether any FTP commands which change the filesystem are allowed or not.",
                            "type": "boolean"
                        }
                    ]
                },
                "always_chdir_homedir": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This controls whether FTP will always initially change directories to the home directory of the user, regardless of whether it is chroot-ing.",
                            "type": "boolean"
                        }
                    ]
                },
                "anon_chown_username": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This is the name of the user who is given ownership of anonymously uploaded files.",
                            "type": "string"
                        }
                    ]
                },
                "anon_password_list": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "A list of passwords for anonymous users.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "anon_root_path": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This option represents a directory in /ifs which vsftpd will try to change into after an anonymous login.",
                            "type": "string"
                        }
                    ]
                },
                "anon_umask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The value that the umask for file creation is set to for anonymous users.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "ascii_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Controls whether ascii mode data transfers are honored for various types of requests.",
                            "enum": [
                                "off",
                                "upload",
                                "download",
                                "both"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "chroot_exception_list": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "A list of users that are not chrooted when logging in.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "chroot_local_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If set to 'all', all local users will be (by default) placed in a chroot() jail in their home directory after login. If set to 'all-with-exceptions', all local users except those listed in the chroot exception list (isi ftp chroot-exception-list) will be placed in a chroot() jail in their home directory after login. If set to 'none', no local users will be chrooted by default. If set to 'none-with-exceptions', only the local users listed in the chroot exception list (isi ftp chroot-exception-list) will be place in a chroot() jail in their home directory after login.",
                            "enum": [
                                "all",
                                "none",
                                "all-with-exceptions",
                                "none-with-exceptions"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "connect_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The timeout, in seconds, for a remote client to respond to our PORT style data connection.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        }
                    ]
                },
                "data_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The timeout, in seconds, which is roughly the maximum time we permit data transfers to stall for with no progress. If the timeout triggers, the remote client is kicked off.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        }
                    ]
                },
                "denied_user_list": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "A list of uses that will be denied access.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "dirlist_localtime": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If enabled, display directory listings with the time in your local time zone. The default is to display GMT. The times returned by the MDTM FTP command are also affected by this option.",
                            "type": "boolean"
                        }
                    ]
                },
                "dirlist_names": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "When set to 'hide',  all user and group information in directory listings will be displayed as 'ftp'. When set to 'textual', textual names are shown in the user and group fields of directory listings. When set to 'numeric', numeric IDs are show in the user and group fields of directory listings.",
                            "enum": [
                                "numeric",
                                "textual",
                                "hide"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "file_create_perm": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The permissions with which uploaded files are created. Umasks are applied on top of this value.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "limit_anon_passwords": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This field determines whether the anon_password_list is used.",
                            "type": "boolean"
                        }
                    ]
                },
                "local_root_path": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "This option represents a directory in /ifs which vsftpd will try to change into after a local login.",
                            "type": "string"
                        }
                    ]
                },
                "local_umask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The value that the umask for file creation is set to for local users.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "server_to_server": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If enabled, allow server-to-server (FXP) transfers.",
                            "type": "boolean"
                        }
                    ]
                },
                "service": {
                    "description": "This field controls whether the FTP daemon is running.",
                    "type": "boolean"
                },
                "session_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "If enabled, maintain login sessions for each user through Pluggable Authentication Modules (PAM). Disabling this option prevents the ability to do automatic home directory creation if that functionality were otherwise available.",
                            "type": "boolean"
                        }
                    ]
                },
                "session_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "The timeout, in seconds, which is roughly the maximum time we permit data transfers to stall for with no progress. If the timeout triggers, the remote client is kicked off.",
                            "maximum": 600,
                            "minimum": 30,
                            "type": "integer"
                        }
                    ]
                },
                "user_config_dir": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the directory where per-user config overrides can be found.",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/hdfs/log-level": {
        "GET_args": {
            "description": "Retrieve the HDFS service log-level.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "level": {
                    "description": "Setup the HDFS service log level for this node",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace",
                        "default"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the HDFS service log-level.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "level": {
                    "description": "Setup the HDFS service log level for this node",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace",
                        "default"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/hdfs/settings": {
        "GET_args": {
            "description": "Retrieve HDFS properties.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "This is schema that contains HDFS protocol properties.",
                    "properties": {
                        "ambari_namenode": {
                            "description": "NameNode of Ambari server",
                            "type": "string"
                        },
                        "ambari_server": {
                            "description": "Ambari server",
                            "type": "string"
                        },
                        "authentication_mode": {
                            "description": "Type of authentication for HDFS protocol.",
                            "enum": [
                                "all",
                                "simple_only",
                                "kerberos_only"
                            ],
                            "type": "string"
                        },
                        "default_block_size": {
                            "description": "Block size (size=2**value) reported by HDFS server.",
                            "type": "integer"
                        },
                        "default_checksum_type": {
                            "description": "Checksum type reported by HDFS server.",
                            "enum": [
                                "none",
                                "crc32",
                                "crc32c"
                            ],
                            "type": "string"
                        },
                        "odp_version": {
                            "description": "ODP stack repository version number",
                            "type": "string"
                        },
                        "root_directory": {
                            "description": "HDFS root directory",
                            "type": "string"
                        },
                        "service": {
                            "description": "Enable or disable the HDFS service.",
                            "type": "boolean"
                        },
                        "webhdfs_enabled": {
                            "description": "Enable or disable WebHDFS",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify HDFS properties.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains HDFS settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "This is schema that contains HDFS protocol properties.",
            "properties": {
                "ambari_namenode": {
                    "description": "NameNode of Ambari server",
                    "type": "string"
                },
                "ambari_server": {
                    "description": "Ambari server",
                    "type": "string"
                },
                "authentication_mode": {
                    "description": "Type of authentication for HDFS protocol.",
                    "enum": [
                        "all",
                        "simple_only",
                        "kerberos_only"
                    ],
                    "type": "string"
                },
                "default_block_size": {
                    "description": "Block size (size=2**value) reported by HDFS server.",
                    "type": "integer"
                },
                "default_checksum_type": {
                    "description": "Checksum type reported by HDFS server.",
                    "enum": [
                        "none",
                        "crc32",
                        "crc32c"
                    ],
                    "type": "string"
                },
                "odp_version": {
                    "description": "ODP stack repository version number",
                    "type": "string"
                },
                "root_directory": {
                    "description": "HDFS root directory",
                    "type": "string"
                },
                "service": {
                    "description": "Enable or disable the HDFS service.",
                    "type": "boolean"
                },
                "webhdfs_enabled": {
                    "description": "Enable or disable WebHDFS",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/http/settings": {
        "GET_args": {
            "description": "Retrieve HTTP properties.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "This is schema that contains HTTP protocol properties.",
                    "properties": {
                        "access_control": {
                            "description": "Enable Access Control Authentication",
                            "type": "boolean"
                        },
                        "basic_authentication": {
                            "description": "Enable Basic Authentication",
                            "type": "boolean"
                        },
                        "dav": {
                            "description": "Enable DAV specification",
                            "type": "boolean"
                        },
                        "enable_access_log": {
                            "description": "Enable HTTP access logging",
                            "type": "boolean"
                        },
                        "integrated_authentication": {
                            "description": "Enable Integrated Authentication",
                            "type": "boolean"
                        },
                        "server_root": {
                            "description": "Document root directory. Must be within /ifs.",
                            "type": "string"
                        },
                        "service": {
                            "description": "Enable/disable the HTTP service or redirect to WebUI.",
                            "enum": [
                                "enabled",
                                "disabled",
                                "redirect"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify HTTP properties.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "This is schema that contains HTTP protocol properties.",
            "properties": {
                "access_control": {
                    "description": "Enable Access Control Authentication",
                    "type": "boolean"
                },
                "basic_authentication": {
                    "description": "Enable Basic Authentication",
                    "type": "boolean"
                },
                "dav": {
                    "description": "Enable DAV specification",
                    "type": "boolean"
                },
                "enable_access_log": {
                    "description": "Enable HTTP access logging",
                    "type": "boolean"
                },
                "integrated_authentication": {
                    "description": "Enable Integrated Authentication",
                    "type": "boolean"
                },
                "server_root": {
                    "description": "Document root directory. Must be within /ifs.",
                    "type": "string"
                },
                "service": {
                    "description": "Enable/disable the HTTP service or redirect to WebUI.",
                    "enum": [
                        "enabled",
                        "disabled",
                        "redirect"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/backup": {
        "GET_args": {
            "description": "Get List of NDMP Backup Contexts.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get NDMP Context List",
            "properties": {
                "contexts": {
                    "properties": {
                        "context_id": {
                            "description": "Context ID",
                            "type": "string"
                        },
                        "id": {
                            "description": "Unique display id.",
                            "type": "string"
                        },
                        "path": {
                            "description": "The directory of the backup. This is not applicable to restore contexts.",
                            "type": "string"
                        },
                        "snapid": {
                            "description": "Snapshot ID reserved for the context. This is not applicable to restore contexts.",
                            "type": "integer"
                        },
                        "start_time": {
                            "description": "Context creation time",
                            "type": "time"
                        },
                        "status": {
                            "description": "Whether the context is active.",
                            "type": "string"
                        },
                        "total_sessions": {
                            "description": "The number of sessions in the context",
                            "type": "integer"
                        },
                        "type": {
                            "description": "Type of context; It can be bre, backup, and restore",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of ndmp contexts.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/backup/<id>": {
        "DELETE_args": {
            "description": "Delete a backup context",
            "type": "object"
        },
        "GET_args": {
            "description": "View a NDMP backup context",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "View a NDMP Context",
            "properties": {
                "context_expiration_time": {
                    "description": "Context expiration time",
                    "type": "time"
                },
                "context_id": {
                    "description": "Context ID",
                    "type": "string"
                },
                "id": {
                    "description": "Unique display id.",
                    "type": "string"
                },
                "path": {
                    "description": "The directory of the backup. This is not applicable to restore contexts.",
                    "type": "string"
                },
                "sessions": {
                    "properties": {
                        "bre_context_id": {
                            "description": "bre context id; This is not applicable to restore sessions.",
                            "type": "string"
                        },
                        "session_id": {
                            "description": "Session ID",
                            "type": "string"
                        },
                        "start_time": {
                            "description": "Session creation time",
                            "type": "time"
                        },
                        "status": {
                            "description": "The status of the session",
                            "type": "string"
                        },
                        "stream_id": {
                            "description": "Stream ID",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "snapid": {
                    "description": "Snapshot ID reserved for the context. This is not applicable to restore contexts.",
                    "type": "integer"
                },
                "start_time": {
                    "description": "Context creation time",
                    "type": "time"
                },
                "status": {
                    "description": "Whether the context is active.",
                    "type": "string"
                },
                "total_sessions": {
                    "description": "The number of sessions in the context",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of context; It can be bre, backup, and restore",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/bre": {
        "GET_args": {
            "description": "Get list of NDMP BRE Contexts.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "contexts": {
                    "items": {
                        "description": "List IDs of all BRE contexts on the cluster",
                        "properties": {
                            "bre_context_id": {
                                "description": "Unique ID of NDMP BRE context",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique display id.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/bre/<id>": {
        "DELETE_args": {
            "description": "Delete a NDMP BRE context",
            "type": "object"
        },
        "GET_args": {
            "description": "View a NDMP BRE context",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "View a NDMP restartable backup Context",
            "properties": {
                "backup type": {
                    "description": "Backup type",
                    "type": "string"
                },
                "bkp_context_id": {
                    "description": "Backup Context ID",
                    "type": "string"
                },
                "bre_context_id": {
                    "description": "Unique ID of NDMP BRE context",
                    "type": "string"
                },
                "create_time": {
                    "description": "Context creation time",
                    "type": "time"
                },
                "env_variables": {
                    "description": "List of environment variables for restartable backup",
                    "properties": {
                        "name": {
                            "description": "Environment variable name",
                            "type": "string"
                        },
                        "value": {
                            "description": "Environment variable value",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique display id.",
                    "type": "string"
                },
                "results": {
                    "description": "Backup result",
                    "type": "integer"
                },
                "snap_name": {
                    "description": "Snapshot name of backup",
                    "type": "string"
                },
                "status": {
                    "description": "Context status bits",
                    "type": "integer"
                },
                "stream_id": {
                    "description": "Backup Stream ID",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/restore": {
        "GET_args": {
            "description": "Get List of NDMP Restore Contexts.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get NDMP Context List",
            "properties": {
                "contexts": {
                    "properties": {
                        "context_id": {
                            "description": "Context ID",
                            "type": "string"
                        },
                        "id": {
                            "description": "Unique display id.",
                            "type": "string"
                        },
                        "path": {
                            "description": "The directory of the backup. This is not applicable to restore contexts.",
                            "type": "string"
                        },
                        "snapid": {
                            "description": "Snapshot ID reserved for the context. This is not applicable to restore contexts.",
                            "type": "integer"
                        },
                        "start_time": {
                            "description": "Context creation time",
                            "type": "time"
                        },
                        "status": {
                            "description": "Whether the context is active.",
                            "type": "string"
                        },
                        "total_sessions": {
                            "description": "The number of sessions in the context",
                            "type": "integer"
                        },
                        "type": {
                            "description": "Type of context; It can be bre, backup, and restore",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of ndmp contexts.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/contexts/restore/<id>": {
        "DELETE_args": {
            "description": "Delete a restore context",
            "type": "object"
        },
        "GET_args": {
            "description": "View a NDMP restore context",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "View a NDMP Context",
            "properties": {
                "context_expiration_time": {
                    "description": "Context expiration time",
                    "type": "time"
                },
                "context_id": {
                    "description": "Context ID",
                    "type": "string"
                },
                "id": {
                    "description": "Unique display id.",
                    "type": "string"
                },
                "path": {
                    "description": "The directory of the backup. This is not applicable to restore contexts.",
                    "type": "string"
                },
                "sessions": {
                    "properties": {
                        "bre_context_id": {
                            "description": "bre context id; This is not applicable to restore sessions.",
                            "type": "string"
                        },
                        "session_id": {
                            "description": "Session ID",
                            "type": "string"
                        },
                        "start_time": {
                            "description": "Session creation time",
                            "type": "time"
                        },
                        "status": {
                            "description": "The status of the session",
                            "type": "string"
                        },
                        "stream_id": {
                            "description": "Stream ID",
                            "type": "string"
                        }
                    },
                    "type": "array"
                },
                "snapid": {
                    "description": "Snapshot ID reserved for the context. This is not applicable to restore contexts.",
                    "type": "integer"
                },
                "start_time": {
                    "description": "Context creation time",
                    "type": "time"
                },
                "status": {
                    "description": "Whether the context is active.",
                    "type": "string"
                },
                "total_sessions": {
                    "description": "The number of sessions in the context",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of context; It can be bre, backup, and restore",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/diagnostics": {
        "GET_args": {
            "description": "List ndmp diagnostics settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "diagnostics": {
                    "properties": {
                        "diag_level": {
                            "description": "Diagnostics level for ndmp.",
                            "type": "integer"
                        },
                        "protocol_version": {
                            "description": "The version of the ndmp protocol.",
                            "type": "integer"
                        },
                        "trace_level": {
                            "description": "Trace level for ndmp.",
                            "enum": [
                                "none",
                                "standard",
                                "include-file-history",
                                "log-file-history"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify ndmp diagnostics settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "diag_level": {
                    "description": "Diagnostics level for ndmp.",
                    "type": "integer"
                },
                "protocol_version": {
                    "description": "The version of the ndmp protocol.",
                    "type": "integer"
                },
                "trace_level": {
                    "description": "Trace level for ndmp.",
                    "enum": [
                        "none",
                        "standard",
                        "include-file-history",
                        "log-file-history"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/dumpdates/<path*>": {
        "DELETE_args": {
            "description": "Delete dumpdates entries of a specified path.",
            "properties": {
                "level": {
                    "description": "Level is an input from 0 to 10.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List of dumpdates entries.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "level": {
                    "description": "Filter by dumpdate level.",
                    "type": "integer"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "path": {
                    "description": "Filter by file path.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get list of dumpdates entries.",
            "properties": {
                "dumpdates": {
                    "properties": {
                        "date": {
                            "description": "The backup time since epoch.",
                            "type": "integer"
                        },
                        "id": {
                            "description": "The unique display id.",
                            "type": "string"
                        },
                        "level": {
                            "description": "The level of the backup.",
                            "type": "integer 0 - 10"
                        },
                        "path": {
                            "description": "The path spedificed by NDMP environment variable FILESYSTEM.",
                            "type": "string"
                        },
                        "snapid": {
                            "description": "The snapshot ID used for a faster incremental backup. 0 means a regular backup.",
                            "type": "integer"
                        }
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of dumpdates entries.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/logs": {
        "GET_args": {
            "description": "Get NDMP logs",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get NDMP logs.",
            "properties": {
                "logs": {
                    "description": "NDMP logs",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/sessions": {
        "GET_args": {
            "description": "List all ndmp sessions.",
            "properties": {
                "consolidate": {
                    "description": "Combine sessions in the same context.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "node": {
                    "description": "Only return sessions of the node.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "session": {
                    "description": "Only return the specified session.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sessions": {
                    "items": {
                        "description": "Describes various attributes of a backup session",
                        "properties": {
                            "data_bytes_transferred": {
                                "description": "Bytes transferred to/from the filesystem",
                                "required": true,
                                "type": "integer"
                            },
                            "data_state": {
                                "description": "State of the NDMP Data Service",
                                "enum": [
                                    "IDLE",
                                    "LISTEN",
                                    "ACTIVE",
                                    "CONNECTED",
                                    "HALTED",
                                    "INVALID"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "dest_path": {
                                "description": "The path being recovered to",
                                "required": true,
                                "type": "string"
                            },
                            "dma_ip_addr": {
                                "description": "IP address of the DMA",
                                "required": true,
                                "type": "string"
                            },
                            "elapsed_time": {
                                "description": "Number of seconds elapsed since the backup was started",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "Unique display ID.",
                                "required": true,
                                "type": "string"
                            },
                            "mover_bytes_transferred": {
                                "description": "Bytes transferred to/from tape or remote writer",
                                "required": true,
                                "type": "integer"
                            },
                            "mover_state": {
                                "description": "State of the NDMP Mover Service",
                                "enum": [
                                    "IDLE",
                                    "LISTEN",
                                    "ACTIVE",
                                    "PAUSED",
                                    "HALTED",
                                    "INVALID"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "operation": {
                                "description": "The type of backup session",
                                "enum": [
                                    "None",
                                    "Backup",
                                    "Recover",
                                    "Recover file history"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "remote_ip_addr": {
                                "description": "IP address of the remote NDMP participant",
                                "required": true,
                                "type": "string"
                            },
                            "scsi_device": {
                                "description": "Name of the media changer device used if any",
                                "required": true,
                                "type": "string"
                            },
                            "session": {
                                "description": "Session ID in form <lnn>.<pid>.",
                                "required": true,
                                "type": "string"
                            },
                            "source_path": {
                                "description": "The path being backed up",
                                "required": true,
                                "type": "string"
                            },
                            "start_time": {
                                "description": "Time backup was started in seconds since epoch",
                                "required": true,
                                "type": "integer"
                            },
                            "tape_device": {
                                "description": "Name of the tape device used if any",
                                "required": true,
                                "type": "string"
                            },
                            "tape_open_mode": {
                                "description": "Describes the mode in which the tape is opened",
                                "enum": [
                                    "Read",
                                    "Read/Write",
                                    "Raw",
                                    "Invalid"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "throughput": {
                                "description": "The throughput in MB/s",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/sessions/<session>": {
        "DELETE_args": {
            "description": "Delete the ndmp session.",
            "properties": {
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the ndmp session.",
            "properties": {
                "lnn": {
                    "description": "Logical node number.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "View probe info of a NDMP session",
            "properties": {
                "sessions": {
                    "properties": {
                        "id": {
                            "description": "Unique display id.",
                            "type": "string"
                        },
                        "probe_info": {
                            "description": "Text information from probing the session",
                            "type": "string"
                        },
                        "session": {
                            "description": "session ID",
                            "type": "string"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/settings/dmas": {
        "GET_args": {
            "description": "List of supported dma vendors.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "dmavendors": {
                    "properties": {
                        "dmavendor": {
                            "description": "NDMP dma vendor.",
                            "type": "string"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/settings/global": {
        "GET_args": {
            "description": "List global ndmp settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "global": {
                    "properties": {
                        "bre_max_num_contexts": {
                            "description": "Maximum number of BRE contexts.",
                            "type": "integer"
                        },
                        "dma": {
                            "description": "A unique identifier for the dma vendor.",
                            "enum": [
                                "generic",
                                "atempo",
                                "bakbone",
                                "commvault",
                                "emc",
                                "symantec",
                                "tivoli",
                                "symantec-netbackup",
                                "symantec-backupexec"
                            ],
                            "type": "string"
                        },
                        "msb_context_retention_duration": {
                            "description": "Multi-Stream Backup context retention duration.",
                            "type": "integer"
                        },
                        "msr_context_retention_duration": {
                            "description": "Multi-Stream Restore context retention duration.",
                            "type": "integer"
                        },
                        "port": {
                            "description": "The port to listen on.",
                            "type": "integer"
                        },
                        "service": {
                            "description": "Property to enable/diable the NDMP service.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "bre_max_num_contexts": {
                    "description": "Maximum number of BRE contexts.",
                    "type": "integer"
                },
                "dma": {
                    "description": "A unique identifier for the dma vendor.",
                    "enum": [
                        "generic",
                        "atempo",
                        "bakbone",
                        "commvault",
                        "emc",
                        "symantec",
                        "tivoli",
                        "symantec-netbackup",
                        "symantec-backupexec"
                    ],
                    "type": "string"
                },
                "msb_context_retention_duration": {
                    "description": "Multi-Stream Backup context retention duration.",
                    "type": "integer"
                },
                "msr_context_retention_duration": {
                    "description": "Multi-Stream Restore context retention duration.",
                    "type": "integer"
                },
                "port": {
                    "description": "The port to listen on.",
                    "type": "integer"
                },
                "service": {
                    "description": "Property to enable/diable the NDMP service.",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/settings/variables/<path*>": {
        "DELETE_args": {
            "description": "Delete preferred environment variable entries",
            "properties": {
                "name": {
                    "description": "Name of the variable to delete.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List of preferred environment variables.",
            "properties": {
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "path": {
                    "description": "Return variables of the path.",
                    "type": "string"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Get list of preferred environment variable.",
            "properties": {
                "resume": {
                    "description": "Resume string returned by previous query.",
                    "type": "string"
                },
                "total": {
                    "description": "The number of backup paths.",
                    "type": "integer"
                },
                "variables": {
                    "properties": {
                        "id": {
                            "description": "The unique display id",
                            "type": "string"
                        },
                        "path": {
                            "description": "Return variables of the backup path.",
                            "type": "string"
                        },
                        "path_variables": {
                            "properties": {
                                "name": {
                                    "description": "The name of environment variable.",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "The value of environment variable.",
                                    "type": "string"
                                }
                            },
                            "type": "array"
                        }
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a preferred NDMP environment variable.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "name": {
                    "description": "The name of environment variable.",
                    "required": true,
                    "type": "string"
                },
                "path": {
                    "description": "The backup path.",
                    "required": true,
                    "type": "string"
                },
                "value": {
                    "description": "The value of environment variable.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "PUT_args": {
            "description": "Modify or create a NDMP preferred environment variable.",
            "properties": {
                "name": {
                    "description": "Name of the variable to modify.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "value": {
                    "description": "The value of environment variable.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ndmp/users": {
        "GET_args": {
            "description": "List all ndmp administrators.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                },
                "users": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "Unique display ID.",
                                "type": "string"
                            },
                            "name": {
                                "description": "A unique user name for NDMP administrator.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Created a new user.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "name": {
                    "description": "A unique user name for NDMP administrator.",
                    "required": true,
                    "type": "string"
                },
                "password": {
                    "description": "The password for the NDMP administrator.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/protocols/ndmp/users/<name>": {
        "DELETE_args": {
            "description": "Delete the user.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the user.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "id": {
                    "description": "Unique display ID.",
                    "type": "string"
                },
                "name": {
                    "description": "A unique user name for NDMP administrator.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the user",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "password": {
                    "description": "The password for the NDMP administrator.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/log-level": {
        "GET_args": {
            "description": "Get the current NFS service logging level.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "level": {
                    "description": "Valid NFS logging levels",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set the current NFS service logging level.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "level": {
                    "description": "Valid NFS logging levels",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/netgroup": {
        "GET_args": {
            "description": "Get the current NFS netgroup cache settings.",
            "properties": {
                "host": {
                    "description": "Host to retrieve netgroup cache settings from.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "settings": {
                "description": "NFS netgroup cache settings.",
                "properties": {
                    "bgwrite": {
                        "description": "To-disk backup interval for the netgroup cache.",
                        "type": "integer"
                    },
                    "expiration": {
                        "description": "Time between updates of netgroups in the cache.",
                        "type": "integer"
                    },
                    "lifetime": {
                        "description": "Length of time an un-accessed netgroup remains in the cache.",
                        "type": "integer"
                    },
                    "retry": {
                        "description": "Retry interval for netgroup updates if the remote provider is unresponsive.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the current NFS netgroup settings.",
            "properties": {
                "host": {
                    "description": "Host to retrieve netgroup cache settings for.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "settings": {
                "description": "NFS netgroup cache settings.",
                "properties": {
                    "bgwrite": {
                        "description": "To-disk backup interval for the netgroup cache.",
                        "type": "integer"
                    },
                    "expiration": {
                        "description": "Time between updates of netgroups in the cache.",
                        "type": "integer"
                    },
                    "lifetime": {
                        "description": "Length of time an un-accessed netgroup remains in the cache.",
                        "type": "integer"
                    },
                    "retry": {
                        "description": "Retry interval for netgroup updates if the remote provider is unresponsive.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/netgroup/check": {
        "POST_args": {
            "description": "Update the NFS netgroups in the cache.",
            "properties": {
                "host": {
                    "description": "IP address of node to update. If unspecified, the local nodes cache is updated.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/protocols/nfs/netgroup/flush": {
        "POST_args": {
            "description": "Flush the NFS netgroups in the cache.",
            "properties": {
                "host": {
                    "description": "IP address of node to flush. If unspecified, all nodes on the cluster are flushed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/protocols/nfs/nlm/sessions": {
        "GET_args": {
            "description": "List all NSM clients (optionally filtered by either zone or IP)",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "ip": {
                    "description": "An IP address for which NSM has client records",
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "zone": {
                    "description": "Represents an extant auth zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "clients": {
                    "items": {
                        "description": "Describes host/callback information for a NSM monitor entry",
                        "properties": {
                            "delegates": {
                                "items": {
                                    "type": "int"
                                },
                                "type": "array"
                            },
                            "host_type": {
                                "description": "The sort of host that this entry represents",
                                "enum": [
                                    "client",
                                    "server",
                                    "reverse",
                                    "expired"
                                ],
                                "type": "string"
                            },
                            "hostname": {
                                "description": "The host being monitored",
                                "type": "string"
                            },
                            "is_active": {
                                "description": "Whether or not the client is actively being monitored",
                                "type": "boolean"
                            },
                            "last_modified": {
                                "description": "Unix time in seconds that the client was last modified (monitored or unmonitored)",
                                "type": "int"
                            },
                            "node_ip": {
                                "description": "An IP address for which NSM has client records",
                                "type": "string"
                            },
                            "notify_attempts_remaining": {
                                "description": "Number of times we will attempt to notify this client before giving up",
                                "type": "int"
                            },
                            "notify_error": {
                                "description": "Last error recieved attempting to notify this client",
                                "type": "string"
                            },
                            "notify_last_attempt": {
                                "description": "Unix time in seconds when we last attempted to notify this clients",
                                "type": "int"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/nlm/sessions-check": {
        "POST_args": {
            "description": "Perform an active scan for lost NFSv3 locks.",
            "properties": {
                "cluster_ip": {
                    "description": "An IP address for which NSM has client records",
                    "type": "string"
                },
                "zone": {
                    "description": "Represents an extant auth zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "properties": {
                "count": {
                    "description": "Number of lock-loss events detected",
                    "required": true,
                    "type": "int"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/nlm/sessions/<ID>": {
        "DELETE_args": {
            "description": "Delete all lock state for this host.",
            "properties": {
                "cluster_ip": {
                    "description": "An IP address for which NSM has client records",
                    "type": "string"
                },
                "refresh": {
                    "description": "if set to true, the client will be given a chance to reclaim its locks before they are destroyed",
                    "type": "boolean"
                },
                "zone": {
                    "description": "Represents an extant auth zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve all lock state for a single client.",
            "properties": {
                "cluster_ip": {
                    "description": "An IP address for which NSM has client records",
                    "type": "string"
                },
                "zone": {
                    "description": "Represents an extant auth zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "sessions": {
                    "items": {
                        "description": "Describes host/callback information for a NSM monitor entry",
                        "properties": {
                            "delegates": {
                                "items": {
                                    "type": "int"
                                },
                                "type": "array"
                            },
                            "host_type": {
                                "description": "The sort of host that this entry represents",
                                "enum": [
                                    "client",
                                    "server",
                                    "reverse",
                                    "expired"
                                ],
                                "type": "string"
                            },
                            "hostname": {
                                "description": "The host being monitored",
                                "type": "string"
                            },
                            "is_active": {
                                "description": "Whether or not the client is actively being monitored",
                                "type": "boolean"
                            },
                            "last_modified": {
                                "description": "Unix time in seconds that the client was last modified (monitored or unmonitored)",
                                "type": "int"
                            },
                            "node_ip": {
                                "description": "An IP address for which NSM has client records",
                                "type": "string"
                            },
                            "notify_attempts_remaining": {
                                "description": "Number of times we will attempt to notify this client before giving up",
                                "type": "int"
                            },
                            "notify_error": {
                                "description": "Last error recieved attempting to notify this client",
                                "type": "string"
                            },
                            "notify_last_attempt": {
                                "description": "Unix time in seconds when we last attempted to notify this clients",
                                "type": "int"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/nfs/reload": {
        "POST_args": {
            "description": "Reload default NFS export configuration.",
            "properties": {
                "zone": {
                    "description": "Access zone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        },
        "POST_output_schema": {
            "description": "Null or any empty JSON object.",
            "properties": {},
            "type": [
                "null",
                "object"
            ]
        }
    },
    "/3/protocols/nfs/settings/global": {
        "GET_args": {
            "description": "Retrieve the NFS configuration.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Specifies the global NFS configuration settings.",
                    "properties": {
                        "nfsv3_enabled": {
                            "description": "True if NFSv3 is enabled.",
                            "type": "boolean"
                        },
                        "nfsv4_enabled": {
                            "description": "True if NFSv4 is enabled.",
                            "type": "boolean"
                        },
                        "rpc_maxthreads": {
                            "description": "Specifies the maximum number of threads in the nfsd thread pool.",
                            "type": "integer"
                        },
                        "rpc_minthreads": {
                            "description": "Specifies the minimum number of threads in the nfsd thread pool.",
                            "type": "integer"
                        },
                        "service": {
                            "description": "True if the NFS service is enabled. When set to false, the NFS service is disabled.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies the global NFS configuration settings.",
            "properties": {
                "nfsv3_enabled": {
                    "description": "True if NFSv3 is enabled.",
                    "type": "boolean"
                },
                "nfsv4_enabled": {
                    "description": "True if NFSv4 is enabled.",
                    "type": "boolean"
                },
                "rpc_maxthreads": {
                    "description": "Specifies the maximum number of threads in the nfsd thread pool.",
                    "type": "integer"
                },
                "rpc_minthreads": {
                    "description": "Specifies the minimum number of threads in the nfsd thread pool.",
                    "type": "integer"
                },
                "service": {
                    "description": "True if the NFS service is enabled. When set to false, the NFS service is disabled.",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ntp/servers": {
        "DELETE_args": {
            "description": "Delete all NTP server entries.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all NTP servers.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "servers": {
                    "items": {
                        "description": "NTP server.",
                        "properties": {
                            "id": {
                                "description": "Field ID.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Key value from key_file that maps to this server.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "name": {
                                "description": "NTP server name.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create an NTP server entry.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "NTP server.",
            "properties": {
                "key": {
                    "description": "Key value from key_file that maps to this server.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "name": {
                    "description": "NTP server name.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ntp/servers/<SERVER>": {
        "DELETE_args": {
            "description": "Delete an NTP server entry.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve one NTP server.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "servers": {
                    "items": {
                        "description": "NTP server.",
                        "properties": {
                            "id": {
                                "description": "Field ID.",
                                "required": true,
                                "type": "string"
                            },
                            "key": {
                                "description": "Key value from key_file that maps to this server.",
                                "required": true,
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "name": {
                                "description": "NTP server name.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the key value for an NTP server.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "NTP server.",
            "properties": {
                "key": {
                    "description": "Key value from key_file that maps to this server.",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/ntp/settings": {
        "GET_args": {
            "description": "Retrieve the NTP settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "NTP settings.",
                    "properties": {
                        "chimers": {
                            "description": "Number of nodes that will contact the NTP servers.",
                            "minimum": 1,
                            "type": "integer"
                        },
                        "excluded": {
                            "description": "Node number (LNN) for nodes excluded from chimer duty.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "key_file": {
                            "description": "Path to NTP key file within /ifs.",
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the NTP settings. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "NTP settings.",
            "properties": {
                "chimers": {
                    "description": "Number of nodes that will contact the NTP servers.",
                    "minimum": 1,
                    "type": "integer"
                },
                "excluded": {
                    "description": "Node number (LNN) for nodes excluded from chimer duty.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "key_file": {
                    "description": "Path to NTP key file within /ifs.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/smb/log-level": {
        "GET_args": {
            "description": "Get the current SMB logging level.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "level": {
                    "description": "Valid SMB logging levels",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Set the current SMB logging level.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "level": {
                    "description": "Valid SMB logging levels",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/smb/log-level/filters": {
        "DELETE_args": {
            "description": "Delete existing SMB log filters.",
            "properties": {
                "level": {
                    "description": "Only return results with a given level.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Get the current SMB log filters.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "level": {
                    "description": "Only return results with a given level.",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "filters": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "Unique ID of the log filter.",
                                "type": "integer"
                            },
                            "ip_addrs": {
                                "description": "Array of client IP addresses to filter against.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "level": {
                                "description": "Logging level of the filter.",
                                "enum": [
                                    "always",
                                    "error",
                                    "warning",
                                    "info",
                                    "verbose",
                                    "debug",
                                    "trace"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ops": {
                                "description": "Array of SMB operations to filter against.",
                                "items": {
                                    "description": "Valid SMB operations to log",
                                    "enum": [
                                        "read",
                                        "write",
                                        "session-setup",
                                        "logoff",
                                        "flush",
                                        "notify",
                                        "tree-connect",
                                        "tree-disconnect",
                                        "create",
                                        "delete",
                                        "oplock",
                                        "locking",
                                        "set-info",
                                        "query",
                                        "close",
                                        "create-directory",
                                        "delete-directory"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Add an SMB log filter.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "ip_addrs": {
                    "description": "Array of client IP addresses to filter against.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "level": {
                    "description": "Logging level of the filter.",
                    "enum": [
                        "always",
                        "error",
                        "warning",
                        "info",
                        "verbose",
                        "debug",
                        "trace"
                    ],
                    "required": true,
                    "type": "string"
                },
                "ops": {
                    "description": "Array of SMB operations to filter against.",
                    "items": {
                        "description": "Valid SMB operations to log",
                        "enum": [
                            "read",
                            "write",
                            "session-setup",
                            "logoff",
                            "flush",
                            "notify",
                            "tree-connect",
                            "tree-disconnect",
                            "create",
                            "delete",
                            "oplock",
                            "locking",
                            "set-info",
                            "query",
                            "close",
                            "create-directory",
                            "delete-directory"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "Unique ID of the log filter.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/smb/log-level/filters/<ID>": {
        "DELETE_args": {
            "description": "Delete log filter.",
            "type": "object"
        },
        "GET_args": {
            "description": "View log filter.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "filters": {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "Unique ID of the log filter.",
                                "type": "integer"
                            },
                            "ip_addrs": {
                                "description": "Array of client IP addresses to filter against.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "level": {
                                "description": "Logging level of the filter.",
                                "enum": [
                                    "always",
                                    "error",
                                    "warning",
                                    "info",
                                    "verbose",
                                    "debug",
                                    "trace"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ops": {
                                "description": "Array of SMB operations to filter against.",
                                "items": {
                                    "description": "Valid SMB operations to log",
                                    "enum": [
                                        "read",
                                        "write",
                                        "session-setup",
                                        "logoff",
                                        "flush",
                                        "notify",
                                        "tree-connect",
                                        "tree-disconnect",
                                        "create",
                                        "delete",
                                        "oplock",
                                        "locking",
                                        "set-info",
                                        "query",
                                        "close",
                                        "create-directory",
                                        "delete-directory"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/smb/settings/global": {
        "GET_args": {
            "description": "List all settings.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "access_based_share_enum": {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        },
                        "audit_fileshare": {
                            "description": "Specify level of file share audit events to log.",
                            "enum": [
                                "all",
                                "success",
                                "failure",
                                "none"
                            ],
                            "type": "string"
                        },
                        "audit_global_sacl": {
                            "description": "Specifies a list of permissions to audit.",
                            "items": {
                                "description": "Specifies properties for a SACL Access Control Entry.",
                                "properties": {
                                    "flags": {
                                        "description": "Determines if audit is performed on success or failure.",
                                        "enum": [
                                            "successful",
                                            "failed"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "permission": {
                                        "description": "Specifies the array of filesystem rights that are governed.",
                                        "items": {
                                            "description": "Specifies filesystem access permissions.",
                                            "enum": [
                                                "generic_all",
                                                "generic_read",
                                                "generic_write",
                                                "generic_exec",
                                                "std_delete",
                                                "std_read_dac",
                                                "std_write_dac",
                                                "std_write_owner",
                                                "std_synchronize",
                                                "std_required",
                                                "list",
                                                "add_file",
                                                "add_subdir",
                                                "delete_child",
                                                "traverse",
                                                "dir_read_attr",
                                                "dir_write_attr",
                                                "dir_read_ext_attr",
                                                "dir_write_ext_attr",
                                                "dir_gen_read",
                                                "dir_gen_write",
                                                "dir_gen_execute",
                                                "dir_gen_all",
                                                "file_read",
                                                "file_write",
                                                "append",
                                                "execute",
                                                "delete_child",
                                                "file_read_attr",
                                                "file_write_attr",
                                                "file_read_ext_attr",
                                                "file_write_ext_attr",
                                                "file_gen_read",
                                                "file_gen_write",
                                                "file_gen_execute",
                                                "file_gen_all",
                                                "modify",
                                                "object_inherit",
                                                "container_inherit",
                                                "no_prop_inherit",
                                                "inherit_only",
                                                "inherited_ace"
                                            ],
                                            "type": "string"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "audit_logon": {
                            "description": "Specify the level of logon audit events to log.",
                            "enum": [
                                "all",
                                "success",
                                "failure",
                                "none"
                            ],
                            "type": "string"
                        },
                        "dot_snap_accessible_child": {
                            "description": "Allow access to .snapshot directories in share subdirectories.",
                            "type": "boolean"
                        },
                        "dot_snap_accessible_root": {
                            "description": "Allow access to the .snapshot directory in the root of the share.",
                            "type": "boolean"
                        },
                        "dot_snap_visible_child": {
                            "description": "Show .snapshot directories in share subdirectories.",
                            "type": "boolean"
                        },
                        "dot_snap_visible_root": {
                            "description": "Show the .snapshot directory in the root of a share.",
                            "type": "boolean"
                        },
                        "enable_security_signatures": {
                            "description": "Indicates whether the server supports signed SMB packets.",
                            "type": "boolean"
                        },
                        "guest_user": {
                            "description": "Specifies the fully-qualified user to use for guest access.",
                            "type": "string"
                        },
                        "ignore_eas": {
                            "description": "Specify whether to ignore EAs on files.",
                            "type": "boolean"
                        },
                        "onefs_cpu_multiplier": {
                            "description": "Specify the number of OneFS driver worker threads per CPU.",
                            "maximum": 4,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "onefs_num_workers": {
                            "description": "Set the maximum number of OneFS driver worker threads.",
                            "maximum": 1024,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "require_security_signatures": {
                            "description": "Indicates whether the server requires signed SMB packets.",
                            "type": "boolean"
                        },
                        "server_side_copy": {
                            "description": "Enable Server Side Copy.",
                            "type": "boolean"
                        },
                        "server_string": {
                            "description": "Provides a description of the server.",
                            "type": "string"
                        },
                        "service": {
                            "description": "Specify whether service is enabled.",
                            "type": "boolean"
                        },
                        "srv_cpu_multiplier": {
                            "description": "Specify the number of SRV service worker threads per CPU.",
                            "maximum": 8,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "srv_num_workers": {
                            "description": "Set the maximum number of SRV service worker threads.",
                            "maximum": 1024,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "support_multichannel": {
                            "description": "Support multichannel.",
                            "type": "boolean"
                        },
                        "support_netbios": {
                            "description": "Support NetBIOS.",
                            "type": "boolean"
                        },
                        "support_smb2": {
                            "description": "Support the SMB2 protocol on the server.",
                            "type": "boolean"
                        }
                    },
                    "required": true,
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "access_based_share_enum": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        }
                    ]
                },
                "audit_fileshare": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify level of file share audit events to log.",
                            "enum": [
                                "all",
                                "success",
                                "failure",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "audit_global_sacl": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a list of permissions to audit.",
                            "items": {
                                "description": "Specifies properties for a SACL Access Control Entry.",
                                "properties": {
                                    "flags": {
                                        "description": "Determines if audit is performed on success or failure.",
                                        "enum": [
                                            "successful",
                                            "failed"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "permission": {
                                        "description": "Specifies the array of filesystem rights that are governed.",
                                        "items": {
                                            "description": "Specifies filesystem access permissions.",
                                            "enum": [
                                                "generic_all",
                                                "generic_read",
                                                "generic_write",
                                                "generic_exec",
                                                "std_delete",
                                                "std_read_dac",
                                                "std_write_dac",
                                                "std_write_owner",
                                                "std_synchronize",
                                                "std_required",
                                                "list",
                                                "add_file",
                                                "add_subdir",
                                                "delete_child",
                                                "traverse",
                                                "dir_read_attr",
                                                "dir_write_attr",
                                                "dir_read_ext_attr",
                                                "dir_write_ext_attr",
                                                "dir_gen_read",
                                                "dir_gen_write",
                                                "dir_gen_execute",
                                                "dir_gen_all",
                                                "file_read",
                                                "file_write",
                                                "append",
                                                "execute",
                                                "delete_child",
                                                "file_read_attr",
                                                "file_write_attr",
                                                "file_read_ext_attr",
                                                "file_write_ext_attr",
                                                "file_gen_read",
                                                "file_gen_write",
                                                "file_gen_execute",
                                                "file_gen_all",
                                                "modify",
                                                "object_inherit",
                                                "container_inherit",
                                                "no_prop_inherit",
                                                "inherit_only",
                                                "inherited_ace"
                                            ],
                                            "type": "string"
                                        },
                                        "required": true,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ]
                },
                "audit_logon": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the level of logon audit events to log.",
                            "enum": [
                                "all",
                                "success",
                                "failure",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "dot_snap_accessible_child": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow access to .snapshot directories in share subdirectories.",
                            "type": "boolean"
                        }
                    ]
                },
                "dot_snap_accessible_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow access to the .snapshot directory in the root of the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "dot_snap_visible_child": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Show .snapshot directories in share subdirectories.",
                            "type": "boolean"
                        }
                    ]
                },
                "dot_snap_visible_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Show the .snapshot directory in the root of a share.",
                            "type": "boolean"
                        }
                    ]
                },
                "enable_security_signatures": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Indicates whether the server supports signed SMB packets.",
                            "type": "boolean"
                        }
                    ]
                },
                "guest_user": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the fully-qualified user to use for guest access.",
                            "type": "string"
                        }
                    ]
                },
                "ignore_eas": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify whether to ignore EAs on files.",
                            "type": "boolean"
                        }
                    ]
                },
                "onefs_cpu_multiplier": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the number of OneFS driver worker threads per CPU.",
                            "maximum": 4,
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                },
                "onefs_num_workers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Set the maximum number of OneFS driver worker threads.",
                            "maximum": 1024,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "require_security_signatures": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Indicates whether the server requires signed SMB packets.",
                            "type": "boolean"
                        }
                    ]
                },
                "server_side_copy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enable Server Side Copy.",
                            "type": "boolean"
                        }
                    ]
                },
                "server_string": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Provides a description of the server.",
                            "type": "string"
                        }
                    ]
                },
                "service": {
                    "description": "Specify whether service is enabled.",
                    "type": "boolean"
                },
                "srv_cpu_multiplier": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the number of SRV service worker threads per CPU.",
                            "maximum": 8,
                            "minimum": 1,
                            "type": "integer"
                        }
                    ]
                },
                "srv_num_workers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Set the maximum number of SRV service worker threads.",
                            "maximum": 1024,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "support_multichannel": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support multichannel.",
                            "type": "boolean"
                        }
                    ]
                },
                "support_netbios": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support NetBIOS.",
                            "type": "boolean"
                        }
                    ]
                },
                "support_smb2": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support the SMB2 protocol on the server.",
                            "type": "boolean"
                        }
                    ]
                }
            },
            "required": true,
            "type": "object"
        }
    },
    "/3/protocols/smb/settings/share": {
        "GET_args": {
            "description": "List all settings.",
            "properties": {
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Zone which contains these share settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "properties": {
                        "access_based_enumeration": {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        },
                        "access_based_enumeration_root_only": {
                            "description": "Access-based enumeration on only the root directory of the share.",
                            "type": "boolean"
                        },
                        "allow_delete_readonly": {
                            "description": "Allow deletion of read-only files in the share.",
                            "type": "boolean"
                        },
                        "allow_execute_always": {
                            "description": "Allows users to execute files they have read rights for.",
                            "type": "boolean"
                        },
                        "ca_timeout": {
                            "description": "Persistent open timeout for the share.",
                            "minimum": 2,
                            "type": "integer"
                        },
                        "ca_write_integrity": {
                            "description": "Specify the level of write-integrity on continuously available shares.",
                            "enum": [
                                "none",
                                "write-read-coherent",
                                "full"
                            ],
                            "type": "string"
                        },
                        "change_notify": {
                            "description": "Specify level of change notification alerts on the share.",
                            "enum": [
                                "all",
                                "norecurse",
                                "none"
                            ],
                            "type": "string"
                        },
                        "create_permissions": {
                            "description": "Set the create permissions for new files and directories in share.",
                            "enum": [
                                "default acl",
                                "inherit mode bits",
                                "use create mask and mode"
                            ],
                            "type": "string"
                        },
                        "csc_policy": {
                            "description": "Client-side caching policy for the shares.",
                            "enum": [
                                "manual",
                                "documents",
                                "programs",
                                "none"
                            ],
                            "type": "string"
                        },
                        "directory_create_mask": {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "directory_create_mode": {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "file_create_mask": {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "file_create_mode": {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "file_filter_extensions": {
                            "description": "Specifies the list of file extensions.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "file_filter_type": {
                            "description": "Specifies if filter list is for deny or allow. Default is deny.",
                            "enum": [
                                "deny",
                                "allow"
                            ],
                            "type": "string"
                        },
                        "file_filtering_enabled": {
                            "description": "Enables file filtering on the share.",
                            "type": "boolean"
                        },
                        "hide_dot_files": {
                            "description": "Hide files and directories that begin with a period '.'.",
                            "type": "boolean"
                        },
                        "host_acl": {
                            "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                            "items": {
                                "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "impersonate_guest": {
                            "description": "Specify the condition in which user access is done as the guest account.",
                            "enum": [
                                "always",
                                "bad user",
                                "never"
                            ],
                            "type": "string"
                        },
                        "impersonate_user": {
                            "description": "User account to be used as guest account.",
                            "type": "string"
                        },
                        "mangle_byte_start": {
                            "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                            "maximum": 65535,
                            "minimum": 256,
                            "type": "integer"
                        },
                        "mangle_map": {
                            "description": "Character mangle map.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "ntfs_acl_support": {
                            "description": "Support NTFS ACLs on files and directories.",
                            "type": "boolean"
                        },
                        "oplocks": {
                            "description": "Allow oplock requests.",
                            "type": "boolean"
                        },
                        "strict_ca_lockout": {
                            "description": "Specifies if persistent opens would do strict lockout on the share.",
                            "type": "boolean"
                        },
                        "strict_flush": {
                            "description": "Handle SMB flush operations.",
                            "type": "boolean"
                        },
                        "strict_locking": {
                            "description": "Specifies whether byte range locks contend against SMB I/O.",
                            "type": "boolean"
                        },
                        "zone": {
                            "description": "Name of the access zone in which to update settings",
                            "type": "string"
                        }
                    },
                    "required": true,
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify one or more settings.",
            "properties": {
                "zone": {
                    "description": "Zone which contains these share settings.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "access_based_enumeration": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        }
                    ]
                },
                "access_based_enumeration_root_only": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Access-based enumeration on only the root directory of the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_delete_readonly": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow deletion of read-only files in the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_execute_always": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allows users to execute files they have read rights for.",
                            "type": "boolean"
                        }
                    ]
                },
                "ca_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Persistent open timeout for the share.",
                            "minimum": 2,
                            "type": "integer"
                        }
                    ]
                },
                "ca_write_integrity": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the level of write-integrity on continuously available shares.",
                            "enum": [
                                "none",
                                "write-read-coherent",
                                "full"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "change_notify": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify level of change notification alerts on the share.",
                            "enum": [
                                "all",
                                "norecurse",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "create_permissions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Set the create permissions for new files and directories in share.",
                            "enum": [
                                "default acl",
                                "inherit mode bits",
                                "use create mask and mode"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "csc_policy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Client-side caching policy for the shares.",
                            "enum": [
                                "manual",
                                "documents",
                                "programs",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "directory_create_mask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "directory_create_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "file_create_mask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "file_create_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Unix umask or mode bits.",
                            "maximum": 511,
                            "minimum": 0,
                            "type": "integer"
                        }
                    ]
                },
                "file_filter_extensions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of file extensions.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "file_filter_type": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if filter list is for deny or allow. Default is deny.",
                            "enum": [
                                "deny",
                                "allow"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "file_filtering_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables file filtering on the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "hide_dot_files": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Hide files and directories that begin with a period '.'.",
                            "type": "boolean"
                        }
                    ]
                },
                "host_acl": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                            "items": {
                                "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "impersonate_guest": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the condition in which user access is done as the guest account.",
                            "enum": [
                                "always",
                                "bad user",
                                "never"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "impersonate_user": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "User account to be used as guest account.",
                            "type": "string"
                        }
                    ]
                },
                "mangle_byte_start": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                            "maximum": 65535,
                            "minimum": 256,
                            "type": "integer"
                        }
                    ]
                },
                "mangle_map": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Character mangle map.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "ntfs_acl_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support NTFS ACLs on files and directories.",
                            "type": "boolean"
                        }
                    ]
                },
                "oplocks": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow oplock requests.",
                            "type": "boolean"
                        }
                    ]
                },
                "strict_ca_lockout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if persistent opens would do strict lockout on the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "strict_flush": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Handle SMB flush operations.",
                            "type": "boolean"
                        }
                    ]
                },
                "strict_locking": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies whether byte range locks contend against SMB I/O.",
                            "type": "boolean"
                        }
                    ]
                },
                "zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Name of the access zone in which to update settings",
                            "type": "string"
                        }
                    ]
                }
            },
            "required": true,
            "type": "object"
        }
    },
    "/3/protocols/smb/shares": {
        "DELETE_args": {
            "description": "Delete multiple smb shares.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all shares.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resolve_names": {
                    "description": "If true, resolve group and user names in personas.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "sort": {
                    "description": "Order results by this field. Default is id.",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "description"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Zone which contains this share.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "shares": {
                    "items": {
                        "properties": {
                            "access_based_enumeration": {
                                "description": "Only enumerate files and folders the requesting user has access to.",
                                "type": "boolean"
                            },
                            "access_based_enumeration_root_only": {
                                "description": "Access-based enumeration on only the root directory of the share.",
                                "type": "boolean"
                            },
                            "allow_delete_readonly": {
                                "description": "Allow deletion of read-only files in the share.",
                                "type": "boolean"
                            },
                            "allow_execute_always": {
                                "description": "Allows users to execute files they have read rights for.",
                                "type": "boolean"
                            },
                            "allow_variable_expansion": {
                                "description": "Allow automatic expansion of variables for home directories.",
                                "type": "boolean"
                            },
                            "auto_create_directory": {
                                "description": "Automatically create home directories.",
                                "type": "boolean"
                            },
                            "browsable": {
                                "description": "Share is visible in net view and the browse list.",
                                "type": "boolean"
                            },
                            "ca_timeout": {
                                "description": "Persistent open timeout for the share.",
                                "minimum": 2,
                                "type": "integer"
                            },
                            "ca_write_integrity": {
                                "description": "Specify the level of write-integrity on continuously available shares.",
                                "enum": [
                                    "none",
                                    "write-read-coherent",
                                    "full"
                                ],
                                "type": "string"
                            },
                            "change_notify": {
                                "description": "Level of change notification alerts on the share.",
                                "enum": [
                                    "all",
                                    "norecurse",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "continuously_available": {
                                "description": "Specify if persistent opens are allowed on the share.",
                                "type": "boolean"
                            },
                            "create_permissions": {
                                "description": "Create permissions for new files and directories in share.",
                                "enum": [
                                    "default acl",
                                    "inherit mode bits",
                                    "use create mask and mode"
                                ],
                                "type": "string"
                            },
                            "csc_policy": {
                                "description": "Client-side caching policy for the shares.",
                                "enum": [
                                    "manual",
                                    "documents",
                                    "programs",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "Description for this SMB share.",
                                "type": "string"
                            },
                            "directory_create_mask": {
                                "description": "Directory create mask bits.",
                                "type": "integer"
                            },
                            "directory_create_mode": {
                                "description": "Directory create mode bits.",
                                "type": "integer"
                            },
                            "file_create_mask": {
                                "description": "File create mask bits.",
                                "type": "integer"
                            },
                            "file_create_mode": {
                                "description": "File create mode bits.",
                                "type": "integer"
                            },
                            "file_filter_extensions": {
                                "description": "Specifies the list of file extensions.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "file_filter_type": {
                                "description": "Specifies if filter list is for deny or allow. Default is deny.",
                                "enum": [
                                    "deny",
                                    "allow"
                                ],
                                "type": "string"
                            },
                            "file_filtering_enabled": {
                                "description": "Enables file filtering on this zone.",
                                "type": "boolean"
                            },
                            "hide_dot_files": {
                                "description": "Hide files and directories that begin with a period '.'.",
                                "type": "boolean"
                            },
                            "host_acl": {
                                "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                                "items": {
                                    "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Share ID.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "impersonate_guest": {
                                "description": "Specify the condition in which user access is done as the guest account.",
                                "enum": [
                                    "always",
                                    "bad user",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "impersonate_user": {
                                "description": "User account to be used as guest account.",
                                "type": "string"
                            },
                            "inheritable_path_acl": {
                                "description": "Set the inheritable ACL on the share path.",
                                "type": "boolean"
                            },
                            "mangle_byte_start": {
                                "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                                "type": "integer"
                            },
                            "mangle_map": {
                                "description": "Character mangle map.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Share name.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "ntfs_acl_support": {
                                "description": "Support NTFS ACLs on files and directories.",
                                "type": "boolean"
                            },
                            "oplocks": {
                                "description": "Support oplocks.",
                                "type": "boolean"
                            },
                            "path": {
                                "description": "Path of share within /ifs.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "permissions": {
                                "description": "Specifies an ordered list of permission modifications.",
                                "items": {
                                    "description": "Specifies properties for an Access Control Entry.",
                                    "properties": {
                                        "permission": {
                                            "description": "Specifies the file system rights that are allowed or denied.",
                                            "enum": [
                                                "full",
                                                "change",
                                                "read"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "permission_type": {
                                            "description": "Determines whether the permission is allowed or denied.",
                                            "enum": [
                                                "allow",
                                                "deny"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "trustee": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "run_as_root": {
                                "description": "Allow account to run as root.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "strict_ca_lockout": {
                                "description": "Specifies if persistent opens would do strict lockout on the share.",
                                "type": "boolean"
                            },
                            "strict_flush": {
                                "description": "Handle SMB flush operations.",
                                "type": "boolean"
                            },
                            "strict_locking": {
                                "description": "Specifies whether byte range locks contend against SMB I/O.",
                                "type": "boolean"
                            },
                            "zid": {
                                "description": "Numeric ID of the access zone which contains this SMB share",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new share.",
            "properties": {
                "zone": {
                    "description": "Zone which contains this share.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "An array of ids to refer newly created SMB shares.",
            "type": [
                {
                    "properties": {
                        "access_based_enumeration": {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        },
                        "access_based_enumeration_root_only": {
                            "description": "Access-based enumeration on only the root directory of the share.",
                            "type": "boolean"
                        },
                        "allow_delete_readonly": {
                            "description": "Allow deletion of read-only files in the share.",
                            "type": "boolean"
                        },
                        "allow_execute_always": {
                            "description": "Allows users to execute files they have read rights for.",
                            "type": "boolean"
                        },
                        "allow_variable_expansion": {
                            "description": "Allow automatic expansion of variables for home directories.",
                            "type": "boolean"
                        },
                        "auto_create_directory": {
                            "description": "Automatically create home directories.",
                            "type": "boolean"
                        },
                        "browsable": {
                            "description": "Share is visible in net view and the browse list.",
                            "type": "boolean"
                        },
                        "ca_timeout": {
                            "description": "Persistent open timeout for the share.",
                            "minimum": 2,
                            "type": "integer"
                        },
                        "ca_write_integrity": {
                            "description": "Specify the level of write-integrity on continuously available shares.",
                            "enum": [
                                "none",
                                "write-read-coherent",
                                "full"
                            ],
                            "type": "string"
                        },
                        "change_notify": {
                            "description": "Level of change notification alerts on the share.",
                            "enum": [
                                "all",
                                "norecurse",
                                "none"
                            ],
                            "type": "string"
                        },
                        "continuously_available": {
                            "description": "Specify if persistent opens are allowed on the share.",
                            "type": "boolean"
                        },
                        "create_path": {
                            "description": "Create path if does not exist.",
                            "type": "boolean"
                        },
                        "create_permissions": {
                            "description": "Create permissions for new files and directories in share.",
                            "enum": [
                                "default acl",
                                "inherit mode bits",
                                "use create mask and mode"
                            ],
                            "type": "string"
                        },
                        "csc_policy": {
                            "description": "Client-side caching policy for the shares.",
                            "enum": [
                                "manual",
                                "documents",
                                "programs",
                                "none"
                            ],
                            "type": "string"
                        },
                        "description": {
                            "description": "Description for this SMB share.",
                            "type": "string"
                        },
                        "directory_create_mask": {
                            "description": "Directory create mask bits.",
                            "type": "integer"
                        },
                        "directory_create_mode": {
                            "description": "Directory create mode bits.",
                            "type": "integer"
                        },
                        "file_create_mask": {
                            "description": "File create mask bits.",
                            "type": "integer"
                        },
                        "file_create_mode": {
                            "description": "File create mode bits.",
                            "type": "integer"
                        },
                        "file_filter_extensions": {
                            "description": "Specifies the list of file extensions.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "file_filter_type": {
                            "description": "Specifies if filter list is for deny or allow. Default is deny.",
                            "enum": [
                                "deny",
                                "allow"
                            ],
                            "type": "string"
                        },
                        "file_filtering_enabled": {
                            "description": "Enables file filtering on this zone.",
                            "type": "boolean"
                        },
                        "hide_dot_files": {
                            "description": "Hide files and directories that begin with a period '.'.",
                            "type": "boolean"
                        },
                        "host_acl": {
                            "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                            "items": {
                                "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "impersonate_guest": {
                            "description": "Specify the condition in which user access is done as the guest account.",
                            "enum": [
                                "always",
                                "bad user",
                                "never"
                            ],
                            "type": "string"
                        },
                        "impersonate_user": {
                            "description": "User account to be used as guest account.",
                            "type": "string"
                        },
                        "inheritable_path_acl": {
                            "description": "Set the inheritable ACL on the share path.",
                            "type": "boolean"
                        },
                        "mangle_byte_start": {
                            "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                            "type": "integer"
                        },
                        "mangle_map": {
                            "description": "Character mangle map.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "name": {
                            "description": "Share name.",
                            "required": true,
                            "type": "string"
                        },
                        "ntfs_acl_support": {
                            "description": "Support NTFS ACLs on files and directories.",
                            "type": "boolean"
                        },
                        "oplocks": {
                            "description": "Support oplocks.",
                            "type": "boolean"
                        },
                        "path": {
                            "description": "Path of share within /ifs.",
                            "required": true,
                            "type": "string"
                        },
                        "permissions": {
                            "description": "Specifies an ordered list of permission modifications.",
                            "items": {
                                "description": "Specifies properties for an Access Control Entry.",
                                "properties": {
                                    "permission": {
                                        "description": "Specifies the file system rights that are allowed or denied.",
                                        "enum": [
                                            "full",
                                            "change",
                                            "read"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "permission_type": {
                                        "description": "Determines whether the permission is allowed or denied.",
                                        "enum": [
                                            "allow",
                                            "deny"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "trustee": {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": true,
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "run_as_root": {
                            "description": "Allow account to run as root.",
                            "items": {
                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "strict_ca_lockout": {
                            "description": "Specifies if persistent opens would do strict lockout on the share.",
                            "type": "boolean"
                        },
                        "strict_flush": {
                            "description": "Handle SMB flush operations.",
                            "type": "boolean"
                        },
                        "strict_locking": {
                            "description": "Specifies whether byte range locks contend against SMB I/O.",
                            "type": "boolean"
                        },
                        "zone": {
                            "description": "Name of the access zone to which to move this SMB share",
                            "type": "string"
                        }
                    },
                    "required": true,
                    "type": "object"
                },
                {
                    "items": {
                        "properties": {
                            "access_based_enumeration": {
                                "description": "Only enumerate files and folders the requesting user has access to.",
                                "type": "boolean"
                            },
                            "access_based_enumeration_root_only": {
                                "description": "Access-based enumeration on only the root directory of the share.",
                                "type": "boolean"
                            },
                            "allow_delete_readonly": {
                                "description": "Allow deletion of read-only files in the share.",
                                "type": "boolean"
                            },
                            "allow_execute_always": {
                                "description": "Allows users to execute files they have read rights for.",
                                "type": "boolean"
                            },
                            "allow_variable_expansion": {
                                "description": "Allow automatic expansion of variables for home directories.",
                                "type": "boolean"
                            },
                            "auto_create_directory": {
                                "description": "Automatically create home directories.",
                                "type": "boolean"
                            },
                            "browsable": {
                                "description": "Share is visible in net view and the browse list.",
                                "type": "boolean"
                            },
                            "ca_timeout": {
                                "description": "Persistent open timeout for the share.",
                                "minimum": 2,
                                "type": "integer"
                            },
                            "ca_write_integrity": {
                                "description": "Specify the level of write-integrity on continuously available shares.",
                                "enum": [
                                    "none",
                                    "write-read-coherent",
                                    "full"
                                ],
                                "type": "string"
                            },
                            "change_notify": {
                                "description": "Level of change notification alerts on the share.",
                                "enum": [
                                    "all",
                                    "norecurse",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "continuously_available": {
                                "description": "Specify if persistent opens are allowed on the share.",
                                "type": "boolean"
                            },
                            "create_path": {
                                "description": "Create path if does not exist.",
                                "type": "boolean"
                            },
                            "create_permissions": {
                                "description": "Create permissions for new files and directories in share.",
                                "enum": [
                                    "default acl",
                                    "inherit mode bits",
                                    "use create mask and mode"
                                ],
                                "type": "string"
                            },
                            "csc_policy": {
                                "description": "Client-side caching policy for the shares.",
                                "enum": [
                                    "manual",
                                    "documents",
                                    "programs",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "Description for this SMB share.",
                                "type": "string"
                            },
                            "directory_create_mask": {
                                "description": "Directory create mask bits.",
                                "type": "integer"
                            },
                            "directory_create_mode": {
                                "description": "Directory create mode bits.",
                                "type": "integer"
                            },
                            "file_create_mask": {
                                "description": "File create mask bits.",
                                "type": "integer"
                            },
                            "file_create_mode": {
                                "description": "File create mode bits.",
                                "type": "integer"
                            },
                            "file_filter_extensions": {
                                "description": "Specifies the list of file extensions.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "file_filter_type": {
                                "description": "Specifies if filter list is for deny or allow. Default is deny.",
                                "enum": [
                                    "deny",
                                    "allow"
                                ],
                                "type": "string"
                            },
                            "file_filtering_enabled": {
                                "description": "Enables file filtering on this zone.",
                                "type": "boolean"
                            },
                            "hide_dot_files": {
                                "description": "Hide files and directories that begin with a period '.'.",
                                "type": "boolean"
                            },
                            "host_acl": {
                                "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                                "items": {
                                    "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impersonate_guest": {
                                "description": "Specify the condition in which user access is done as the guest account.",
                                "enum": [
                                    "always",
                                    "bad user",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "impersonate_user": {
                                "description": "User account to be used as guest account.",
                                "type": "string"
                            },
                            "inheritable_path_acl": {
                                "description": "Set the inheritable ACL on the share path.",
                                "type": "boolean"
                            },
                            "mangle_byte_start": {
                                "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                                "type": "integer"
                            },
                            "mangle_map": {
                                "description": "Character mangle map.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Share name.",
                                "required": true,
                                "type": "string"
                            },
                            "ntfs_acl_support": {
                                "description": "Support NTFS ACLs on files and directories.",
                                "type": "boolean"
                            },
                            "oplocks": {
                                "description": "Support oplocks.",
                                "type": "boolean"
                            },
                            "path": {
                                "description": "Path of share within /ifs.",
                                "required": true,
                                "type": "string"
                            },
                            "permissions": {
                                "description": "Specifies an ordered list of permission modifications.",
                                "items": {
                                    "description": "Specifies properties for an Access Control Entry.",
                                    "properties": {
                                        "permission": {
                                            "description": "Specifies the file system rights that are allowed or denied.",
                                            "enum": [
                                                "full",
                                                "change",
                                                "read"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "permission_type": {
                                            "description": "Determines whether the permission is allowed or denied.",
                                            "enum": [
                                                "allow",
                                                "deny"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "trustee": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "run_as_root": {
                                "description": "Allow account to run as root.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "strict_ca_lockout": {
                                "description": "Specifies if persistent opens would do strict lockout on the share.",
                                "type": "boolean"
                            },
                            "strict_flush": {
                                "description": "Handle SMB flush operations.",
                                "type": "boolean"
                            },
                            "strict_locking": {
                                "description": "Specifies whether byte range locks contend against SMB I/O.",
                                "type": "boolean"
                            },
                            "zone": {
                                "description": "Name of the access zone to which to move this SMB share",
                                "type": "string"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        },
        "POST_output_schema": {
            "type": [
                {
                    "properties": {
                        "id": {
                            "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "items": {
                        "properties": {
                            "id": {
                                "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            ]
        }
    },
    "/3/protocols/smb/shares/<SHARE>": {
        "DELETE_args": {
            "description": "Delete the share.",
            "properties": {
                "zone": {
                    "description": "Zone which contains this share.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve share.",
            "properties": {
                "resolve_names": {
                    "description": "If true, resolve group and user names in personas.",
                    "type": "boolean"
                },
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "zone": {
                    "description": "Zone which contains this share.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "shares": {
                    "items": {
                        "properties": {
                            "access_based_enumeration": {
                                "description": "Only enumerate files and folders the requesting user has access to.",
                                "type": "boolean"
                            },
                            "access_based_enumeration_root_only": {
                                "description": "Access-based enumeration on only the root directory of the share.",
                                "type": "boolean"
                            },
                            "allow_delete_readonly": {
                                "description": "Allow deletion of read-only files in the share.",
                                "type": "boolean"
                            },
                            "allow_execute_always": {
                                "description": "Allows users to execute files they have read rights for.",
                                "type": "boolean"
                            },
                            "allow_variable_expansion": {
                                "description": "Allow automatic expansion of variables for home directories.",
                                "type": "boolean"
                            },
                            "auto_create_directory": {
                                "description": "Automatically create home directories.",
                                "type": "boolean"
                            },
                            "browsable": {
                                "description": "Share is visible in net view and the browse list.",
                                "type": "boolean"
                            },
                            "ca_timeout": {
                                "description": "Persistent open timeout for the share.",
                                "minimum": 2,
                                "type": "integer"
                            },
                            "ca_write_integrity": {
                                "description": "Specify the level of write-integrity on continuously available shares.",
                                "enum": [
                                    "none",
                                    "write-read-coherent",
                                    "full"
                                ],
                                "type": "string"
                            },
                            "change_notify": {
                                "description": "Level of change notification alerts on the share.",
                                "enum": [
                                    "all",
                                    "norecurse",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "continuously_available": {
                                "description": "Specify if persistent opens are allowed on the share.",
                                "type": "boolean"
                            },
                            "create_permissions": {
                                "description": "Create permissions for new files and directories in share.",
                                "enum": [
                                    "default acl",
                                    "inherit mode bits",
                                    "use create mask and mode"
                                ],
                                "type": "string"
                            },
                            "csc_policy": {
                                "description": "Client-side caching policy for the shares.",
                                "enum": [
                                    "manual",
                                    "documents",
                                    "programs",
                                    "none"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "Description for this SMB share.",
                                "type": "string"
                            },
                            "directory_create_mask": {
                                "description": "Directory create mask bits.",
                                "type": "integer"
                            },
                            "directory_create_mode": {
                                "description": "Directory create mode bits.",
                                "type": "integer"
                            },
                            "file_create_mask": {
                                "description": "File create mask bits.",
                                "type": "integer"
                            },
                            "file_create_mode": {
                                "description": "File create mode bits.",
                                "type": "integer"
                            },
                            "file_filter_extensions": {
                                "description": "Specifies the list of file extensions.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "file_filter_type": {
                                "description": "Specifies if filter list is for deny or allow. Default is deny.",
                                "enum": [
                                    "deny",
                                    "allow"
                                ],
                                "type": "string"
                            },
                            "file_filtering_enabled": {
                                "description": "Enables file filtering on this zone.",
                                "type": "boolean"
                            },
                            "hide_dot_files": {
                                "description": "Hide files and directories that begin with a period '.'.",
                                "type": "boolean"
                            },
                            "host_acl": {
                                "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                                "items": {
                                    "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "Share ID.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "impersonate_guest": {
                                "description": "Specify the condition in which user access is done as the guest account.",
                                "enum": [
                                    "always",
                                    "bad user",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "impersonate_user": {
                                "description": "User account to be used as guest account.",
                                "type": "string"
                            },
                            "inheritable_path_acl": {
                                "description": "Set the inheritable ACL on the share path.",
                                "type": "boolean"
                            },
                            "mangle_byte_start": {
                                "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                                "type": "integer"
                            },
                            "mangle_map": {
                                "description": "Character mangle map.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Share name.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "ntfs_acl_support": {
                                "description": "Support NTFS ACLs on files and directories.",
                                "type": "boolean"
                            },
                            "oplocks": {
                                "description": "Support oplocks.",
                                "type": "boolean"
                            },
                            "path": {
                                "description": "Path of share within /ifs.",
                                "required": true,
                                "type": [
                                    "null",
                                    "string"
                                ]
                            },
                            "permissions": {
                                "description": "Specifies an ordered list of permission modifications.",
                                "items": {
                                    "description": "Specifies properties for an Access Control Entry.",
                                    "properties": {
                                        "permission": {
                                            "description": "Specifies the file system rights that are allowed or denied.",
                                            "enum": [
                                                "full",
                                                "change",
                                                "read"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "permission_type": {
                                            "description": "Determines whether the permission is allowed or denied.",
                                            "enum": [
                                                "allow",
                                                "deny"
                                            ],
                                            "required": true,
                                            "type": "string"
                                        },
                                        "trustee": {
                                            "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                            "properties": {
                                                "id": {
                                                    "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Specifies the persona name, which must be combined with a type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Specifies the type of persona, which must be combined with a name.",
                                                    "enum": [
                                                        "user",
                                                        "group",
                                                        "wellknown"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": true,
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "run_as_root": {
                                "description": "Allow account to run as root.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "strict_ca_lockout": {
                                "description": "Specifies if persistent opens would do strict lockout on the share.",
                                "type": "boolean"
                            },
                            "strict_flush": {
                                "description": "Handle SMB flush operations.",
                                "type": "boolean"
                            },
                            "strict_locking": {
                                "description": "Specifies whether byte range locks contend against SMB I/O.",
                                "type": "boolean"
                            },
                            "zid": {
                                "description": "Numeric ID of the access zone which contains this SMB share",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "required": true,
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify share. All input fields are optional, but one or more must be supplied.",
            "properties": {
                "zone": {
                    "description": "Zone which contains this share.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "access_based_enumeration": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Only enumerate files and folders the requesting user has access to.",
                            "type": "boolean"
                        }
                    ]
                },
                "access_based_enumeration_root_only": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Access-based enumeration on only the root directory of the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_delete_readonly": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow deletion of read-only files in the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_execute_always": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allows users to execute files they have read rights for.",
                            "type": "boolean"
                        }
                    ]
                },
                "allow_variable_expansion": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow automatic expansion of variables for home directories.",
                            "type": "boolean"
                        }
                    ]
                },
                "auto_create_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Automatically create home directories.",
                            "type": "boolean"
                        }
                    ]
                },
                "browsable": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Share is visible in net view and the browse list.",
                            "type": "boolean"
                        }
                    ]
                },
                "ca_timeout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Persistent open timeout for the share.",
                            "minimum": 2,
                            "type": "integer"
                        }
                    ]
                },
                "ca_write_integrity": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the level of write-integrity on continuously available shares.",
                            "enum": [
                                "none",
                                "write-read-coherent",
                                "full"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "change_notify": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Level of change notification alerts on the share.",
                            "enum": [
                                "all",
                                "norecurse",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "create_permissions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Create permissions for new files and directories in share.",
                            "enum": [
                                "default acl",
                                "inherit mode bits",
                                "use create mask and mode"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "csc_policy": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Client-side caching policy for the shares.",
                            "enum": [
                                "manual",
                                "documents",
                                "programs",
                                "none"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "description": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Description for this SMB share.",
                            "type": "string"
                        }
                    ]
                },
                "directory_create_mask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Directory create mask bits.",
                            "type": "integer"
                        }
                    ]
                },
                "directory_create_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Directory create mode bits.",
                            "type": "integer"
                        }
                    ]
                },
                "file_create_mask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "File create mask bits.",
                            "type": "integer"
                        }
                    ]
                },
                "file_create_mode": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "File create mode bits.",
                            "type": "integer"
                        }
                    ]
                },
                "file_filter_extensions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of file extensions.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "file_filter_type": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if filter list is for deny or allow. Default is deny.",
                            "enum": [
                                "deny",
                                "allow"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "file_filtering_enabled": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Enables file filtering on this zone.",
                            "type": "boolean"
                        }
                    ]
                },
                "hide_dot_files": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Hide files and directories that begin with a period '.'.",
                            "type": "boolean"
                        }
                    ]
                },
                "host_acl": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.",
                            "items": {
                                "description": "<'allow:'|'deny:'><'ALL'|IP-range|subnet|fqdn>[' EXCEPT '<IP-range|subnet|fqdn>].",
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "impersonate_guest": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specify the condition in which user access is done as the guest account.",
                            "enum": [
                                "always",
                                "bad user",
                                "never"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "impersonate_user": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "User account to be used as guest account.",
                            "type": "string"
                        }
                    ]
                },
                "inheritable_path_acl": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Set the inheritable ACL on the share path.",
                            "type": "boolean"
                        }
                    ]
                },
                "mangle_byte_start": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the wchar_t starting point for automatic byte mangling.",
                            "type": "integer"
                        }
                    ]
                },
                "mangle_map": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Character mangle map.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "name": {
                    "description": "Share name.",
                    "type": "string"
                },
                "ntfs_acl_support": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support NTFS ACLs on files and directories.",
                            "type": "boolean"
                        }
                    ]
                },
                "oplocks": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Support oplocks.",
                            "type": "boolean"
                        }
                    ]
                },
                "path": {
                    "description": "Path of share within /ifs.",
                    "type": "string"
                },
                "permissions": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies an ordered list of permission modifications.",
                            "items": {
                                "description": "Specifies properties for an Access Control Entry.",
                                "properties": {
                                    "permission": {
                                        "description": "Specifies the file system rights that are allowed or denied.",
                                        "enum": [
                                            "full",
                                            "change",
                                            "read"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "permission_type": {
                                        "description": "Determines whether the permission is allowed or denied.",
                                        "enum": [
                                            "allow",
                                            "deny"
                                        ],
                                        "required": true,
                                        "type": "string"
                                    },
                                    "trustee": {
                                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                        "properties": {
                                            "id": {
                                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Specifies the persona name, which must be combined with a type.",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Specifies the type of persona, which must be combined with a name.",
                                                "enum": [
                                                    "user",
                                                    "group",
                                                    "wellknown"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": true,
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ]
                },
                "run_as_root": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow account to run as root.",
                            "items": {
                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ]
                },
                "strict_ca_lockout": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies if persistent opens would do strict lockout on the share.",
                            "type": "boolean"
                        }
                    ]
                },
                "strict_flush": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Handle SMB flush operations.",
                            "type": "boolean"
                        }
                    ]
                },
                "strict_locking": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies whether byte range locks contend against SMB I/O.",
                            "type": "boolean"
                        }
                    ]
                },
                "zone": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Name of the access zone to which to move this SMB share",
                            "type": "string"
                        }
                    ]
                }
            },
            "required": true,
            "type": "object"
        }
    },
    "/3/protocols/snmp/settings": {
        "GET_args": {
            "description": "Retrieve the SNMP settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "SNMP settings.",
                    "properties": {
                        "read_only_community": {
                            "description": "The read-only community name.  @DEFAULT reverts this field to its default value.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "service": {
                            "description": "Whether the SNMP service is enabled.",
                            "type": "boolean"
                        },
                        "snmp_v1_v2c_access": {
                            "description": "Whether SNMP v1 and v2c protocols are enabled.  @DEFAULT reverts this field to its default value.",
                            "type": "boolean"
                        },
                        "snmp_v3_access": {
                            "description": "Whether SNMP v3 is enabled.  @DEFAULT reverts this field to its default value.",
                            "type": "boolean"
                        },
                        "snmp_v3_read_only_user": {
                            "description": "The read-only user for SNMP v3 read requests.  @DEFAULT reverts this field to its default value.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "system_contact": {
                            "description": "Contact information for the system owner.  This must be a valid email address.  @DEFAULT reverts this field to its default value.",
                            "minLength": 1,
                            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$",
                            "type": "string"
                        },
                        "system_location": {
                            "description": "A location name for the SNMP system.  @DEFAULT reverts this field to its default value.",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the SNMO settings. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "SNMP settings.",
            "properties": {
                "read_only_community": {
                    "description": "The read-only community name.  @DEFAULT reverts this field to its default value.",
                    "minLength": 1,
                    "type": "string"
                },
                "service": {
                    "description": "Whether the SNMP service is enabled.",
                    "type": "boolean"
                },
                "snmp_v1_v2c_access": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Whether SNMP v1 and v2c protocols are enabled.  @DEFAULT reverts this field to its default value.",
                            "type": "boolean"
                        }
                    ]
                },
                "snmp_v3_access": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Whether SNMP v3 is enabled.  @DEFAULT reverts this field to its default value.",
                            "type": "boolean"
                        }
                    ]
                },
                "snmp_v3_password": {
                    "description": "This field allows a client to change the SNMP v3 password. There is always a password set.  @DEFAULT reverts this field to its default value.",
                    "maxLength": 39,
                    "minLength": 8,
                    "type": "string"
                },
                "snmp_v3_read_only_user": {
                    "description": "The read-only user for SNMP v3 read requests.  @DEFAULT reverts this field to its default value.",
                    "minLength": 1,
                    "type": "string"
                },
                "system_contact": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Contact information for the system owner.  This must be a valid email address.  @DEFAULT reverts this field to its default value.",
                            "minLength": 1,
                            "pattern": "^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$",
                            "type": "string"
                        }
                    ]
                },
                "system_location": {
                    "description": "A location name for the SNMP system.  @DEFAULT reverts this field to its default value.",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/swift/accounts": {
        "GET_args": {
            "description": "List all swift accounts.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains Swift accounts.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "accounts": {
                    "items": {
                        "description": "This is an account for the Swift protocol.",
                        "properties": {
                            "id": {
                                "description": "Unique id of swift account",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of Swift account",
                                "type": "string"
                            },
                            "path": {
                                "description": "Path to root of Swift account",
                                "type": "string"
                            },
                            "swiftgroup": {
                                "description": "Group with filesystem ownership of this account",
                                "type": "string"
                            },
                            "swiftuser": {
                                "description": "User with filesystem ownership of this account",
                                "type": "string"
                            },
                            "users": {
                                "description": "Users who are allowed to access Swift account",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "zone": {
                                "description": "Name of access zone for account",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new Swift account",
            "properties": {
                "zone": {
                    "description": "Access zone which contains Swift account.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "This is an account for the Swift protocol.",
            "properties": {
                "id": {
                    "description": "Unique id of swift account",
                    "type": "string"
                },
                "name": {
                    "description": "Name of Swift account",
                    "required": true,
                    "type": "string"
                },
                "swiftgroup": {
                    "description": "Group with filesystem ownership of this account",
                    "type": "string"
                },
                "swiftuser": {
                    "description": "User with filesystem ownership of this account",
                    "type": "string"
                },
                "users": {
                    "description": "Users who are allowed to access Swift account",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "zone": {
                    "description": "Name of access zone for account",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/protocols/swift/accounts/<ACCOUNT>": {
        "DELETE_args": {
            "description": "Delete a Swift account.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains Swift account.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List a swift account.",
            "properties": {
                "zone": {
                    "description": "Access zone which contains Swift account.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "accounts": {
                    "items": {
                        "description": "This is an account for the Swift protocol.",
                        "properties": {
                            "id": {
                                "description": "Unique id of swift account",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of Swift account",
                                "type": "string"
                            },
                            "path": {
                                "description": "Path to root of Swift account",
                                "type": "string"
                            },
                            "swiftgroup": {
                                "description": "Group with filesystem ownership of this account",
                                "type": "string"
                            },
                            "swiftuser": {
                                "description": "User with filesystem ownership of this account",
                                "type": "string"
                            },
                            "users": {
                                "description": "Users who are allowed to access Swift account",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "zone": {
                                "description": "Name of access zone for account",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a Swift account",
            "properties": {
                "zone": {
                    "description": "Access zone which contains Swift account.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "This is an account for the Swift protocol.",
            "properties": {
                "id": {
                    "description": "Unique id of swift account",
                    "type": "string"
                },
                "name": {
                    "description": "Name of Swift account",
                    "required": true,
                    "type": "string"
                },
                "swiftgroup": {
                    "description": "Group with filesystem ownership of this account",
                    "type": "string"
                },
                "swiftuser": {
                    "description": "User with filesystem ownership of this account",
                    "type": "string"
                },
                "users": {
                    "description": "Users who are allowed to access Swift account",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "zone": {
                    "description": "Name of access zone for account",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/snapshot/schedules": {
        "DELETE_args": {
            "description": "Delete all snapshot schedules.",
            "type": "object"
        },
        "GET_args": {
            "description": "List all or matching schedules.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Resume token value to use in subsequent calls for continuation.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "schedules": {
                    "items": {
                        "properties": {
                            "alias": {
                                "description": "Alias name to create for each snapshot.",
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "duration": {
                                "description": "Time in seconds added to creation time to construction expiration time.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "id": {
                                "description": "The system ID given to the schedule.",
                                "type": "integer"
                            },
                            "name": {
                                "description": "The schedule name.",
                                "type": "string"
                            },
                            "next_run": {
                                "description": "Unix Epoch time of next snapshot to be created.",
                                "type": "integer"
                            },
                            "next_snapshot": {
                                "description": "Formatted name (see pattern) of next snapshot to be created.",
                                "type": "string"
                            },
                            "path": {
                                "description": "The /ifs path snapshotted.",
                                "type": "string"
                            },
                            "pattern": {
                                "description": "Pattern expanded with strftime to create snapshot names.",
                                "type": "string"
                            },
                            "schedule": {
                                "description": "The isidate compatible natural language description of the schedule.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new schedule.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "alias": {
                    "description": "Alias name to create for each snapshot.",
                    "required": false,
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "duration": {
                    "description": "Time in seconds added to creation time to construction expiration time.",
                    "minimum": 0,
                    "required": false,
                    "type": [
                        "null",
                        "integer"
                    ]
                },
                "name": {
                    "description": "The schedule name.",
                    "required": true,
                    "type": "string"
                },
                "path": {
                    "description": "The /ifs path snapshotted.",
                    "required": true,
                    "type": "string"
                },
                "pattern": {
                    "description": "Pattern expanded with strftime to create snapshot names.",
                    "required": true,
                    "type": "string"
                },
                "schedule": {
                    "description": "The isidate compatible natural language description of the schedule.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The ID of the newly created snapshot schedule.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/operations": {
        "GET_args": {
            "description": "Retrieve operations list.",
            "properties": {
                "protocols": {
                    "description": "A comma separated list. Only report operations for specified protocol(s). Default is all.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "operations": {
                    "items": {
                        "properties": {
                            "operations": [
                                {
                                    "operation": {
                                        "description": "The name of the operation.",
                                        "required": true,
                                        "type": "string"
                                    }
                                }
                            ]
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/client": {
        "GET_args": {
            "description": "",
            "properties": {
                "classes": {
                    "description": "Specify class(es) for which statistics should be reported. Default is all supported classes.",
                    "type": "string"
                },
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "local_addresses": {
                    "description": "A comma seperated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.",
                    "type": "string"
                },
                "local_names": {
                    "description": "A comma seperated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.",
                    "type": "string"
                },
                "nodes": {
                    "description": "A comma seperated list. Specify node(s) for which statistics should be reported. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate local.",
                    "type": "string"
                },
                "numeric": {
                    "description": "Whether to convert hostnames or usernames to their human readable form. False by default.",
                    "type": "boolean"
                },
                "protocols": {
                    "description": "A comma seperated list of the protocol(s) you wish to return. Default is 'all' of the folowing: nfs3|smb1|nlm|ftp|http|siq|iscsi|smb2|nfs4|papi|jobd|irp|lsass_in|lsass_out|hdfs|internal|external",
                    "type": "string"
                },
                "remote_addresses": {
                    "description": "A comma seperated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.",
                    "type": "string"
                },
                "remote_names": {
                    "description": "A comma seperated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.",
                    "type": "string"
                },
                "sort": {
                    "description": "{ drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                },
                "totalby": {
                    "description": "A comma separated list specifying what should be unique. node|protocol|class|local_addr|local_name|remote_addr|remote_name|user_id|user_name|devid",
                    "type": "string"
                },
                "user_ids": {
                    "description": "A comma seperated list. Only report statistics for operations requested by users with numeric UIDs enumerated.",
                    "type": "string"
                },
                "user_names": {
                    "description": "A comma seperated list. Only report statistics for operations requested by users with resolved names enumerated.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "client": {
                    "items": {
                        "properties": {
                            "class": {
                                "description": "The class of the operation.",
                                "required": true,
                                "type": "string"
                            },
                            "in": {
                                "description": "Rate of input (in bytes/second) for an operation since the last time isi statistics collected the data.",
                                "required": true,
                                "type": "number"
                            },
                            "in_avg": {
                                "description": "Average input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "in_max": {
                                "description": "Maximum input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "in_min": {
                                "description": "Minimum input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "local_addr": {
                                "description": "The IP address (in dotted-quad form) of the host receiving the operation request.",
                                "required": true,
                                "type": "string"
                            },
                            "local_name": {
                                "description": "The resolved text name of the LocalAddr, if resolution can be performed.",
                                "required": true,
                                "type": "string"
                            },
                            "node": {
                                "description": "The node on which the operation was performed.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_operations": {
                                "description": "The number of times an operation has been performed.",
                                "required": true,
                                "type": "integer"
                            },
                            "operation_rate": {
                                "description": "The rate (in ops/second) at which an operation has been performed.",
                                "required": true,
                                "type": "number"
                            },
                            "out": {
                                "description": "Rate of output (in bytes/second) for an operation since the last time isi statistics collected the data.",
                                "required": true,
                                "type": "number"
                            },
                            "out_avg": {
                                "description": "Average output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "out_max": {
                                "description": "Maximum output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "out_min": {
                                "description": "Minimum output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "protocol": {
                                "description": "The protocol of the operation.",
                                "required": true,
                                "type": "string"
                            },
                            "remote_addr": {
                                "description": "The IP address (in dotted-quad form) of the host sending the operation request.",
                                "required": true,
                                "type": "string"
                            },
                            "remote_name": {
                                "description": "The resolved text name of the RemoteAddr, if resolution can be performed.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            },
                            "time_avg": {
                                "description": "The average elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "time_max": {
                                "description": "The maximum elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "time_min": {
                                "description": "The minimum elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "user": {
                                "description": "User issuing the operation.",
                                "required": false,
                                "type": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/drive": {
        "GET_args": {
            "description": "",
            "properties": {
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "nodes": {
                    "description": "Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.",
                    "type": "string"
                },
                "sort": {
                    "description": "{ drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                },
                "type": {
                    "description": "Specify drive type(s) for which statistics should be reported.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "drive": {
                    "items": {
                        "properties": {
                            "access_latency": {
                                "description": "The average operation latency.",
                                "required": true,
                                "type": "number"
                            },
                            "access_slow": {
                                "description": "The rate of slow (long-latency) operations.",
                                "required": true,
                                "type": "number"
                            },
                            "busy": {
                                "description": "The percentage of time the drive was busy.",
                                "required": true,
                                "type": "number"
                            },
                            "bytes_in": {
                                "description": "The rate of bytes written.",
                                "required": true,
                                "type": "number"
                            },
                            "bytes_out": {
                                "description": "The rate of bytes read.",
                                "required": true,
                                "type": "number"
                            },
                            "drive_id": {
                                "description": "Drive ID LNN:bay.",
                                "required": true,
                                "type": "string"
                            },
                            "iosched_latency": {
                                "description": "The average time spent in the I/O scheduler.",
                                "required": true,
                                "type": "number"
                            },
                            "iosched_queue": {
                                "description": "The average length of the I/O scheduler queue.",
                                "required": true,
                                "type": "number"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of the drive.",
                                "required": true,
                                "type": "string"
                            },
                            "used_bytes_percent": {
                                "description": "The percent of blocks used on the drive.",
                                "required": true,
                                "type": "number"
                            },
                            "used_inodes": {
                                "description": "The number of inodes allocated on the drive.",
                                "required": true,
                                "type": "number"
                            },
                            "xfer_size_in": {
                                "description": "The average size of write operations.",
                                "required": true,
                                "type": "number"
                            },
                            "xfer_size_out": {
                                "description": "The average size of read operations.",
                                "required": true,
                                "type": "number"
                            },
                            "xfers_in": {
                                "description": "The rate of write operations.",
                                "required": true,
                                "type": "number"
                            },
                            "xfers_out": {
                                "description": "The rate of read operations.",
                                "required": true,
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/heat": {
        "GET_args": {
            "description": "File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).",
            "properties": {
                "classes": {
                    "description": "Specify class(es) for which statistics should be reported. Default is all supported classes. See [...]/platform/3/statistics/summary/filters/classes for a complete list.",
                    "type": "string"
                },
                "convertlin": {
                    "description": "Convert lin to hex. Defaults to true.",
                    "type": "boolean"
                },
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Only report specified event types(s). A comma separated list of events. Defaults to all supported events. See [...]/platform/3/statistics/summary/filters/events for a complete list.",
                    "type": "string"
                },
                "maxpath": {
                    "description": "Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.)",
                    "type": "integer"
                },
                "nodes": {
                    "description": "Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.",
                    "type": "string"
                },
                "numeric": {
                    "description": "Whether to convert hostnames or usernames to their human readable form. False by default.",
                    "type": "boolean"
                },
                "pathdepth": {
                    "description": "Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.)",
                    "type": "integer"
                },
                "sort": {
                    "description": "{ drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                },
                "totalby": {
                    "description": "Aggregate per specified fields(s). Defaults to none.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "heat": {
                    "items": {
                        "properties": {
                            "class_name": {
                                "description": "The class of operation",
                                "required": true,
                                "type": "string"
                            },
                            "event_name": {
                                "description": "The type of event",
                                "required": true,
                                "type": "string"
                            },
                            "event_type": {
                                "description": "The event type id",
                                "required": true,
                                "type": "integer"
                            },
                            "lin": {
                                "description": "Logical inode (LIN)",
                                "required": true,
                                "type": [
                                    "string",
                                    "integer"
                                ]
                            },
                            "node": {
                                "description": "The node where this event occurred.",
                                "required": true,
                                "type": "integer"
                            },
                            "operation_rate": {
                                "description": "Approximate operations per second for this lin.",
                                "required": true,
                                "type": "number"
                            },
                            "path": {
                                "description": "Canonical LIN path if known",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/protocol": {
        "GET_args": {
            "description": "",
            "properties": {
                "classes": {
                    "description": "Specify class(es) for which statistics should be reported. Default is all supported classes. See [...]/platform/3/statistics/summary/filters/classes for a complete list.",
                    "type": "string"
                },
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "nodes": {
                    "description": "Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.",
                    "type": "string"
                },
                "operations": {
                    "description": "Specify operation(s) for which statistics should be reported. Default is all operations. See isi-statistics man page for complete listing of operations.",
                    "type": "string"
                },
                "protocols": {
                    "description": "Specify protocol(s) for which statistics should be reported. Default is all external protocols.",
                    "type": "string"
                },
                "sort": {
                    "description": "{ drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                },
                "totalby": {
                    "description": "Aggregate per specified fields(s). Defaults to none.",
                    "type": "string"
                },
                "zero": {
                    "description": "Show table entries with no values.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "protocol": {
                    "items": {
                        "properties": {
                            "class": {
                                "description": "The class of the operation.",
                                "required": true,
                                "type": "string"
                            },
                            "in": {
                                "description": "Rate of input (in bytes/second) for an operation since the last time isi statistics collected the data.",
                                "required": true,
                                "type": "number"
                            },
                            "in_avg": {
                                "description": "Average input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "in_max": {
                                "description": "Maximum input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "in_min": {
                                "description": "Minimum input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "in_standard_dev": {
                                "description": "Standard deviation for input (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "node": {
                                "description": "The node on which the operation was performed.",
                                "required": true,
                                "type": "integer"
                            },
                            "operation": {
                                "description": "The operation performed.",
                                "required": true,
                                "type": "string"
                            },
                            "operation_count": {
                                "description": "The number of times an operation has been performed.",
                                "required": true,
                                "type": "integer"
                            },
                            "operation_rate": {
                                "description": "The rate (in ops/second) at which an operation has been performed.",
                                "required": true,
                                "type": "number"
                            },
                            "out": {
                                "description": "Rate of output (in bytes/second) for an operation since the last time isi statistics collected the data.",
                                "required": true,
                                "type": "number"
                            },
                            "out_avg": {
                                "description": "Average output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "out_max": {
                                "description": "Maximum output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "out_min": {
                                "description": "Minimum output (sent) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "out_standard_dev": {
                                "description": "Standard deviation for output (received) bytes for an operation, in bytes.",
                                "required": true,
                                "type": "number"
                            },
                            "protocol": {
                                "description": "The protocol of the operation.",
                                "required": true,
                                "type": "string"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            },
                            "time_avg": {
                                "description": "The average elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "time_max": {
                                "description": "The maximum elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "time_min": {
                                "description": "The minimum elapsed time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            },
                            "time_standard_dev": {
                                "description": "The standard deviation time (in microseconds) taken to complete an operation.",
                                "required": true,
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/protocol-stats": {
        "GET_args": {
            "description": "",
            "properties": {
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "nodes": {
                    "description": "Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.",
                    "type": "string"
                },
                "protocol": {
                    "description": "Specify protocol(s) for which statistics should be reported. Default is all external protocols.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "protocol-stats": {
                    "items": {
                        "properties": {
                            "cpu": {
                                "idle": {
                                    "description": "Percentage of CPU idle time",
                                    "required": true,
                                    "type": "number"
                                },
                                "system": {
                                    "description": "Percentage of CPU consumed by the system",
                                    "required": true,
                                    "type": "number"
                                },
                                "user": {
                                    "description": "Percentage of CPU consumed by user activities",
                                    "required": true,
                                    "type": "number"
                                }
                            },
                            "disk": {
                                "iops": {
                                    "description": "Disk iops",
                                    "required": true,
                                    "type": "number"
                                },
                                "read": {
                                    "description": "Disk reads",
                                    "required": true,
                                    "type": "number"
                                },
                                "write": {
                                    "description": "Disk writes",
                                    "required": true,
                                    "type": "number"
                                }
                            },
                            "network": {
                                "in": {
                                    "errors_per_sec": {
                                        "description": "Network input errors per-second",
                                        "required": true,
                                        "type": "number"
                                    },
                                    "megabytes_per_sec": {
                                        "description": "Network input megabytes per-second",
                                        "required": true,
                                        "type": "number"
                                    },
                                    "packets_per_sec": {
                                        "description": "Network input packets per-second",
                                        "required": true,
                                        "type": "number"
                                    }
                                },
                                "out": {
                                    "errors_per_sec": {
                                        "description": "Network output errors per-second",
                                        "required": true,
                                        "type": "number"
                                    },
                                    "megabytes_per_sec": {
                                        "description": "Network output megabytes per-second",
                                        "required": true,
                                        "type": "number"
                                    },
                                    "packets_per_sec": {
                                        "description": "Network output packets per-second",
                                        "required": true,
                                        "type": "number"
                                    }
                                }
                            },
                            "onefs": {
                                "in": {
                                    "description": "OneFS throughput in MB/s in.",
                                    "required": true,
                                    "type": "number"
                                },
                                "out": {
                                    "description": "OneFS throughput in MB/s out.",
                                    "required": true,
                                    "type": "number"
                                },
                                "total": {
                                    "description": "OneFS throughput in MB/s total.",
                                    "required": true,
                                    "type": "number"
                                }
                            },
                            "protocol": {
                                "data": [
                                    {
                                        "name": {
                                            "description": "The name of the protocol operation.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "value": {
                                            "description": "Protocol specific operations per second. This is a variable number of output fields depending on the protocol being displayed.",
                                            "required": true,
                                            "type": "any"
                                        }
                                    }
                                ],
                                "description": "A single protocol for which statistics should be reported.",
                                "required": true,
                                "type": "array"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/statistics/summary/system": {
        "GET_args": {
            "description": "",
            "properties": {
                "degraded": {
                    "description": "Continue to report if some nodes do not respond.",
                    "type": "boolean"
                },
                "nodes": {
                    "description": "Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.",
                    "type": "string"
                },
                "oprates": {
                    "description": "Display protocol operation rate statistics rather than the default throughput statistics.",
                    "type": "boolean"
                },
                "sort": {
                    "description": "{ drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "system": {
                    "items": {
                        "properties": {
                            "cpu": {
                                "description": "The percentage CPU utilization.",
                                "required": true,
                                "type": "number"
                            },
                            "disk_in": {
                                "description": "Traffic to disk (in bytes/sec).",
                                "required": true,
                                "type": "number"
                            },
                            "disk_out": {
                                "description": "Traffic from disk (in bytes/sec).",
                                "required": true,
                                "type": "number"
                            },
                            "ftp": {
                                "description": "The total throughput (in bytes/sec) for FTP operations.",
                                "required": true,
                                "type": "number"
                            },
                            "hdfs": {
                                "description": "The total throughput (in bytes/second) for HDFS operations.",
                                "required": true,
                                "type": "number"
                            },
                            "http": {
                                "description": "The total throughput (in bytes/sec) for HTTP operations.",
                                "required": true,
                                "type": "number"
                            },
                            "iscsi": {
                                "description": "The total throughput (in bytes/sec) for ISCSI operations.",
                                "required": true,
                                "type": "number"
                            },
                            "net_in": {
                                "description": "Incoming network traffic (in bytes/sec) for all operations.",
                                "required": true,
                                "type": "number"
                            },
                            "net_out": {
                                "description": "Outgoing network traffic (in bytes/sec) for all operations.",
                                "required": true,
                                "type": "number"
                            },
                            "nfs": {
                                "description": "The total throughput (in bytes/sec) for NFS (NFS3 & NFS4) operations.",
                                "required": true,
                                "type": "number"
                            },
                            "node": {
                                "description": "Node ID/LNN, 'All' for cluster.",
                                "required": true,
                                "type": "string"
                            },
                            "smb": {
                                "description": "The total throughput (in bytes/sec) for SMB (SMB1 & SMB2) operations.",
                                "required": true,
                                "type": "number"
                            },
                            "time": {
                                "description": "Unix Epoch time in seconds of the request.",
                                "required": true,
                                "type": "integer"
                            },
                            "total": {
                                "description": "The total throughput (in bytes/sec) for all protocols listed.",
                                "required": true,
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/compatibilities/ssd/active": {
        "GET_args": {
            "description": "Get a list of active ssd compatibilities",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "active": {
                    "items": {
                        "properties": {
                            "class_1": {
                                "description": "The node class of an ssd compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "count": {
                                "description": "Is this SSD Compatibility Count Compatible.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The id of this ssd compatibility",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new ssd compatibility",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "assess": {
                    "description": "Do not create ssd compatibility, only assess if creation is possible.",
                    "type": "boolean"
                },
                "class_1": {
                    "description": "The node class of the desired ssd compatibility",
                    "required": true,
                    "type": "string"
                },
                "class_2": {
                    "description": "The optional second node class to turn on ssd compatibility",
                    "required": false,
                    "type": "string"
                },
                "count": {
                    "description": "Is this SSD Compatibility Count Compatible.",
                    "required": false,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "merges": {
                    "description": "A list of all merges that will occur given this compatibility operation",
                    "items": {
                        "properties": {
                            "ids": {
                                "description": "The nodepool ids that will be merged",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "names": {
                                "description": "The nodepool names that will be merged, in the sameorder as the ids",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "result_name": {
                                "description": "The name of the nodepool all others will merge into",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                },
                "message": {
                    "description": "A string describing the effects of the compatibility operation.",
                    "required": true,
                    "type": "string"
                },
                "splits": {
                    "description": "A list of all splits that will occur given this compatibility operation",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The nodepool id that will be split",
                                "required": true,
                                "type": "integer"
                            },
                            "name": {
                                "description": "The nodepool name that will be split",
                                "required": true,
                                "type": "string"
                            },
                            "tier_name": {
                                "description": "A message explaining how the nodepools tier membership will change.",
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": false,
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/compatibilities/ssd/active/<ID>": {
        "DELETE_args": {
            "description": "Delete an active ssd compatibility by id",
            "type": "object"
        },
        "GET_args": {
            "description": "Get a active ssd compatibilities by id",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "active": {
                    "items": {
                        "properties": {
                            "class_1": {
                                "description": "The node class of an ssd compatibility",
                                "required": true,
                                "type": "string"
                            },
                            "count": {
                                "description": "Is this SSD Compatibility Count Compatible.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The id of this ssd compatibility",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify an ssd compatibility by id",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "assess": {
                    "description": "Do not delete ssd compatibility, only assess if deletion is possible.",
                    "type": "boolean"
                },
                "count": {
                    "description": "Are we enabling or disabling count",
                    "required": true,
                    "type": "boolean"
                },
                "id_2": {
                    "description": "The optional id of the second ssd compatibility.",
                    "required": false,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/nodepools": {
        "GET_args": {
            "description": "List all node pools.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodepools": {
                    "items": {
                        "health_flags": {
                            "description": "An array of containing any health issues with this pool.  If the pool is healthy, the list is empty.",
                            "items": {
                                "enum": [
                                    "underprovisioned",
                                    "missing_drives",
                                    "devices_down",
                                    "devices_smartfailed",
                                    "waiting_repair"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "properties": {
                            "can_enable_l3": {
                                "description": "Indicates if enabling L3 is possible. L3 cannot be enabled if there are unprovisioned drives.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the node pool.",
                                "required": true,
                                "type": "integer"
                            },
                            "l3": {
                                "description": "Use SSDs in this node pool for L3 cache.",
                                "required": true,
                                "type": "boolean"
                            },
                            "l3_status": {
                                "description": "'storage' if the 'l3' option is disabled. If the l3 option is enabled, 'migrating' if any SSDs in this node pool have not yet been migrated to L3. If all SSDs have been migrated, 'l3'.",
                                "enum": [
                                    "l3",
                                    "storage",
                                    "migrating"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "lnns": {
                                "description": "The nodes that are part of this node pool.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "manual": {
                                "description": "Whether or not the node pool is manually managed.",
                                "required": true,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "The node pool name.",
                                "required": true,
                                "type": "string"
                            },
                            "protection_policy": {
                                "description": "The underlying protection policy.",
                                "type": "string"
                            },
                            "tier": {
                                "description": "The name (if named) or system ID of the node pool's tier, if it is in a tier. Otherwise null.",
                                "required": true,
                                "type": [
                                    "string",
                                    "integer",
                                    "null"
                                ]
                            },
                            "usage": {
                                "description": "Total pool usage.",
                                "properties": {
                                    "avail_bytes": {
                                        "description": "Available free bytes remaining in the pool when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "avail_ssd_bytes": {
                                        "description": "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "balanced": {
                                        "description": "Whether or not the pool usage is currently balanced.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "free_bytes": {
                                        "description": "Free bytes remaining in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "free_ssd_bytes": {
                                        "description": "Free bytes remaining in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_bytes": {
                                        "description": "Total bytes used in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_ssd_bytes": {
                                        "description": "Total bytes used in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "virtual_hot_spare_bytes": {
                                        "description": "Bytes reserved for virtual hot spare in the pool.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new node pool.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "l3": {
                    "description": "Use SSDs in this node pool for L3 cache.",
                    "required": false,
                    "type": "boolean"
                },
                "lnns": {
                    "description": "The nodes that are part of this node pool.",
                    "items": {
                        "type": "integer"
                    },
                    "required": true,
                    "type": "array"
                },
                "name": {
                    "description": "The node pool name.",
                    "required": true,
                    "type": "string"
                },
                "protection_policy": {
                    "description": "The node pool protection policy.",
                    "required": false,
                    "type": "string"
                },
                "tier": {
                    "description": "The name or ID of the node pool's tier, if it is in a tier.",
                    "required": false,
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "The system ID of the new object.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/nodepools/<NID>": {
        "DELETE_args": {
            "description": "Delete node pool.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve node pool information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "nodepools": {
                    "items": {
                        "health_flags": {
                            "description": "An array of containing any health issues with this pool.  If the pool is healthy, the list is empty.",
                            "items": {
                                "enum": [
                                    "underprovisioned",
                                    "missing_drives",
                                    "devices_down",
                                    "devices_smartfailed",
                                    "waiting_repair"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "properties": {
                            "can_enable_l3": {
                                "description": "Indicates if enabling L3 is possible. L3 cannot be enabled if there are unprovisioned drives.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to the node pool.",
                                "required": true,
                                "type": "integer"
                            },
                            "l3": {
                                "description": "Use SSDs in this node pool for L3 cache.",
                                "required": true,
                                "type": "boolean"
                            },
                            "l3_status": {
                                "description": "'storage' if the 'l3' option is disabled. If the l3 option is enabled, 'migrating' if any SSDs in this node pool have not yet been migrated to L3. If all SSDs have been migrated, 'l3'.",
                                "enum": [
                                    "l3",
                                    "storage",
                                    "migrating"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "lnns": {
                                "description": "The nodes that are part of this node pool.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "manual": {
                                "description": "Whether or not the node pool is manually managed.",
                                "required": true,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "The node pool name.",
                                "required": true,
                                "type": "string"
                            },
                            "protection_policy": {
                                "description": "The underlying protection policy.",
                                "type": "string"
                            },
                            "tier": {
                                "description": "The name (if named) or system ID of the node pool's tier, if it is in a tier. Otherwise null.",
                                "required": true,
                                "type": [
                                    "string",
                                    "integer",
                                    "null"
                                ]
                            },
                            "usage": {
                                "description": "Total pool usage.",
                                "properties": {
                                    "avail_bytes": {
                                        "description": "Available free bytes remaining in the pool when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "avail_ssd_bytes": {
                                        "description": "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "balanced": {
                                        "description": "Whether or not the pool usage is currently balanced.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "free_bytes": {
                                        "description": "Free bytes remaining in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "free_ssd_bytes": {
                                        "description": "Free bytes remaining in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_bytes": {
                                        "description": "Total bytes used in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_ssd_bytes": {
                                        "description": "Total bytes used in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "virtual_hot_spare_bytes": {
                                        "description": "Bytes reserved for virtual hot spare in the pool.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify node pool. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "l3": {
                    "description": "Use SSDs in this node pool for L3 cache.",
                    "type": "boolean"
                },
                "lnns": {
                    "description": "The nodes that are part of this node pool.",
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The node pool name.",
                    "type": "string"
                },
                "protection_policy": {
                    "description": "The node pool protection policy.",
                    "type": "string"
                },
                "tier": {
                    "description": "The name or ID of the node pool's tier, if it is in a tier.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/storagepools": {
        "GET_args": {
            "description": "List all storage pools.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "storagepools": {
                    "items": {
                        "health_flags": {
                            "description": "An array of containing any health issues with this pool.  If the pool is healthy, the list is empty.  Only appears on 'nodepool' type storagepools.",
                            "items": {
                                "enum": [
                                    "underprovisioned",
                                    "missing_drives",
                                    "devices_down",
                                    "devices_smartfailed",
                                    "waiting_repair"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "properties": {
                            "can_enable_l3": {
                                "description": "Indicates if enabling L3 is possible. L3 cannot be enabled if there are unprovisioned drives.",
                                "required": true,
                                "type": "boolean"
                            },
                            "children": {
                                "description": "The names or IDs of the pool's children.",
                                "items": {
                                    "type": [
                                        "string",
                                        "integer"
                                    ]
                                },
                                "required": false,
                                "type": "array"
                            },
                            "id": {
                                "description": "The system ID given to the pool.",
                                "required": true,
                                "type": "integer"
                            },
                            "l3": {
                                "description": "Use SSDs in this node pool for L3 cache.",
                                "required": true,
                                "type": "boolean"
                            },
                            "l3_status": {
                                "description": "'storage' if the 'l3' option is disabled. If the l3 option is enabled, 'migrating' if any SSDs in this node pool have not yet been migrated to L3. If all SSDs have been migrated, 'l3'.",
                                "enum": [
                                    "l3",
                                    "storage",
                                    "migrating"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "lnns": {
                                "description": "The nodes that are part of this pool.",
                                "items": {
                                    "type": "integer"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "manual": {
                                "description": "Whether or not the node pool is manually managed.",
                                "required": false,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "The pool name.",
                                "required": true,
                                "type": "string"
                            },
                            "protection_policy": {
                                "description": "The underlying protection policy.",
                                "type": "string"
                            },
                            "type": {
                                "description": "The pool type.",
                                "enum": [
                                    "tier",
                                    "nodepool"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "usage": {
                                "description": "Total pool usage.",
                                "properties": {
                                    "avail_bytes": {
                                        "description": "Available free bytes remaining in the pool when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "avail_ssd_bytes": {
                                        "description": "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "balanced": {
                                        "description": "Whether or not the pool usage is currently balanced.",
                                        "required": true,
                                        "type": "boolean"
                                    },
                                    "free_bytes": {
                                        "description": "Free bytes remaining in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "free_ssd_bytes": {
                                        "description": "Free bytes remaining in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_bytes": {
                                        "description": "Total bytes used in the pool.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "total_ssd_bytes": {
                                        "description": "Total bytes used in the pool on SSD drives.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "virtual_hot_spare_bytes": {
                                        "description": "Bytes reserved for virtual hot spare in the pool.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/storagepool/suggested-protection/<NID>": {
        "GET_args": {
            "description": "Retrieve the suggested protection policy.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "suggested_protection": {
                    "items": {
                        "properties": {
                            "suggested_protection": {
                                "description": "The suggested protection policy.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/history/cpu": {
        "GET_args": {
            "description": "List cpu performance data.",
            "properties": {
                "begin": {
                    "description": "Begin timestamp for time-series report.",
                    "type": "integer"
                },
                "end": {
                    "description": "End timestamp for time-series report.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "statistics": {
                    "items": {
                        "description": "A synciq performance report.",
                        "properties": {
                            "allocated": {
                                "description": "Nodes allocated for the sync action.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "An ID for a single performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Sync action limit.",
                                "required": true,
                                "type": "integer"
                            },
                            "timestamp": {
                                "description": "Timestamp for the performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "total": {
                                "description": "Total usage for the performance report.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/history/worker": {
        "GET_args": {
            "description": "List worker performance data.",
            "properties": {
                "begin": {
                    "description": "Begin timestamp for time-series report.",
                    "type": "integer"
                },
                "end": {
                    "description": "End timestamp for time-series report.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "statistics": {
                    "items": {
                        "description": "A synciq performance report.",
                        "properties": {
                            "allocated": {
                                "description": "Nodes allocated for the sync action.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "An ID for a single performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "limit": {
                                "description": "Sync action limit.",
                                "required": true,
                                "type": "integer"
                            },
                            "timestamp": {
                                "description": "Timestamp for the performance report.",
                                "required": true,
                                "type": "integer"
                            },
                            "total": {
                                "description": "Total usage for the performance report.",
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/jobs": {
        "GET_args": {
            "description": "Get a list of SyncIQ jobs.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "state": {
                    "description": "The state of the job.",
                    "enum": [
                        "scheduled",
                        "running",
                        "paused",
                        "finished",
                        "failed",
                        "canceled",
                        "needs_attention",
                        "skipped",
                        "pending",
                        "unknown"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "description": "The policy associated with this job, or null if there is currently no policy associated with this job (this can happen if the job is newly created and not yet fully populated in the underlying database).",
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "enum": [
                                            "copy",
                                            "sync"
                                        ],
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "workers": {
                                "description": "A list of workers for this job.",
                                "items": {
                                    "properties": {
                                        "connected": {
                                            "description": "Whether there is a connection between the source and target.",
                                            "type": "boolean"
                                        },
                                        "last_split": {
                                            "description": "The last time a network split occurred.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "last_work": {
                                            "description": "The last time the worker performed work.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "lin": {
                                            "description": "The LIN being worked on.",
                                            "type": "integer"
                                        },
                                        "lnn": {
                                            "description": "The lnn the worker is assigned to run on.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "process_id": {
                                            "description": "The process ID of the worker.",
                                            "type": "integer"
                                        },
                                        "source_host": {
                                            "description": "The source host for this worker.",
                                            "type": "string"
                                        },
                                        "target_host": {
                                            "description": "The target host for this worker.",
                                            "type": "string"
                                        },
                                        "worker_id": {
                                            "description": "The ID of the worker.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Start a SyncIQ job.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "action": {
                    "description": "The action to be taken by this job.",
                    "enum": [
                        "resync_prep",
                        "allow_write",
                        "allow_write_revert",
                        "test"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "The ID or Name of the policy",
                    "required": true,
                    "type": "string"
                },
                "log_level": {
                    "description": "Only valid for allow_write, and allow_write_revert; specify the desired logging level, will be stored in the logs for isi_migrate, defaults to 'info'.",
                    "enum": [
                        "fatal",
                        "error",
                        "notice",
                        "info",
                        "copy",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                },
                "source_snapshot": {
                    "description": "An optional snapshot to copy/sync from.",
                    "type": "string"
                },
                "workers_per_node": {
                    "description": "Only valid for allow_write, and allow_write_revert; specify the desired workers per node, defaults to 3.",
                    "type": [
                        "integer",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/jobs/<JOB>": {
        "GET_args": {
            "description": "View a single SyncIQ job.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "jobs": {
                    "items": {
                        "properties": {
                            "action": {
                                "description": "The action to be taken by this job.",
                                "enum": [
                                    "resync_prep",
                                    "allow_write",
                                    "allow_write_revert",
                                    "test",
                                    "run"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "ads_streams_replicated": {
                                "description": "The number of ads streams replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "block_specs_replicated": {
                                "description": "The number of block specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_recoverable": {
                                "description": "The number of bytes recoverable by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "bytes_transferred": {
                                "description": "The number of bytes that have been transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "char_specs_replicated": {
                                "description": "The number of char specs replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "corrected_lins": {
                                "description": "The number of LINs corrected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dead_node": {
                                "description": "This field is true if the node running this job is dead.",
                                "required": true,
                                "type": "boolean"
                            },
                            "directories_replicated": {
                                "description": "The number of directories replicated.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_changed": {
                                "description": "The number of directories changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_deleted": {
                                "description": "The number of directories deleted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_moved": {
                                "description": "The number of directories moved by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "dirs_new": {
                                "description": "The number of directories created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "duration": {
                                "description": "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "end_time": {
                                "description": "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "error": {
                                "description": "The primary error message for this job.",
                                "required": true,
                                "type": "string"
                            },
                            "error_checksum_files_skipped": {
                                "description": "The number of files with checksum errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_io_files_skipped": {
                                "description": "The number of files with io errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "error_net_files_skipped": {
                                "description": "The number of files with network errors skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "errors": {
                                "description": "A list of error messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "failed_chunks": {
                                "description": "Tyhe number of data chunks that failed transmission.",
                                "required": true,
                                "type": "integer"
                            },
                            "fifos_replicated": {
                                "description": "The number of fifos replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "file_data_bytes": {
                                "description": "The number of bytes transferred that belong to files.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_changed": {
                                "description": "The number of files changed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_linked": {
                                "description": "The number of files linked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_new": {
                                "description": "The number of files created by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_selected": {
                                "description": "The number of files selected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_transferred": {
                                "description": "The number of files transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_unlinked": {
                                "description": "The number of files unlinked by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "files_with_ads_replicated": {
                                "description": "The number of files with ads replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "flipped_lins": {
                                "description": "The number of LINs flipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hard_links_replicated": {
                                "description": "The number of hard links replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_fixed": {
                                "description": "The number of hash exceptions fixed by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "hash_exceptions_found": {
                                "description": "The number of hash exceptions found by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "id": {
                                "description": "A unique identifier for this object.",
                                "required": true,
                                "type": "string"
                            },
                            "job_id": {
                                "description": "The ID of the job.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "lins_total": {
                                "description": "The number of LINs transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_source": {
                                "description": "The total number of bytes sent to the source by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "network_bytes_to_target": {
                                "description": "The total number of bytes sent to the target by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "new_files_replicated": {
                                "description": "The number of new files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "num_retransmitted_files": {
                                "description": "The number of files that have been retransmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "phases": {
                                "description": "Data for each phase of this job.",
                                "items": {
                                    "properties": {
                                        "end_time": {
                                            "description": "The time the job ended this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "phase": {
                                            "description": "The phase that the job was in.",
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "description": "The time the job began this phase.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "policy": {
                                "description": "The policy associated with this job, or null if there is currently no policy associated with this job (this can happen if the job is newly created and not yet fully populated in the underlying database).",
                                "properties": {
                                    "action": {
                                        "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                        "enum": [
                                            "copy",
                                            "sync"
                                        ],
                                        "type": "string"
                                    },
                                    "file_matching_pattern": {
                                        "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                        "properties": {
                                            "or_criteria": {
                                                "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                                "items": {
                                                    "properties": {
                                                        "and_criteria": {
                                                            "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                            "items": {
                                                                "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                                "properties": {
                                                                    "attribute_exists": {
                                                                        "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "case_sensitive": {
                                                                        "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "field": {
                                                                        "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "How to compare the specified attribute of each file to the specified value.",
                                                                        "enum": [
                                                                            "==",
                                                                            "!=",
                                                                            ">",
                                                                            ">=",
                                                                            "<",
                                                                            "<=",
                                                                            "!"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                        "enum": [
                                                                            "name",
                                                                            "path",
                                                                            "accessed_time",
                                                                            "accessed_before",
                                                                            "accessed_after",
                                                                            "birth_time",
                                                                            "birth_before",
                                                                            "birth_after",
                                                                            "changed_time",
                                                                            "changed_before",
                                                                            "changed_after",
                                                                            "size",
                                                                            "file_type",
                                                                            "posix_regex_name",
                                                                            "user_name",
                                                                            "user_id",
                                                                            "group_name",
                                                                            "group_id",
                                                                            "no_user",
                                                                            "no_group"
                                                                        ],
                                                                        "required": true,
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "description": "The value to compare the specified attribute of each file to.",
                                                                        "type": [
                                                                            "string",
                                                                            "integer"
                                                                        ]
                                                                    },
                                                                    "whole_word": {
                                                                        "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": false,
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "User-assigned name of this sync policy.",
                                        "type": "string"
                                    },
                                    "source_exclude_directories": {
                                        "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_include_directories": {
                                        "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "source_root_path": {
                                        "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                        "type": "string"
                                    },
                                    "target_host": {
                                        "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                        "type": "string"
                                    },
                                    "target_path": {
                                        "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "policy_action": {
                                "description": "This is the action the policy is configured to perform.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "policy_id": {
                                "description": "The ID of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "policy_name": {
                                "description": "The name of the policy.",
                                "required": true,
                                "type": "string"
                            },
                            "regular_files_replicated": {
                                "description": "The number of regular files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "resynced_lins": {
                                "description": "The number of LINs resynched by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "retransmitted_files": {
                                "description": "The files that have been retransmitted by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "retry": {
                                "description": "The number of times the job has been retried.",
                                "required": true,
                                "type": "integer"
                            },
                            "running_chunks": {
                                "description": "The number of data chunks currently being transmitted.",
                                "required": true,
                                "type": "integer"
                            },
                            "sockets_replicated": {
                                "description": "The number of sockets replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_bytes_recovered": {
                                "description": "The number of bytes recovered on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_created": {
                                "description": "The number of directories created on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_deleted": {
                                "description": "The number of directories deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_linked": {
                                "description": "The number of directories linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_unlinked": {
                                "description": "The number of directories unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_directories_visited": {
                                "description": "The number of directories visited on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_deleted": {
                                "description": "The number of files deleted on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_linked": {
                                "description": "The number of files linked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "source_files_unlinked": {
                                "description": "The number of files unlinked on the source.",
                                "required": true,
                                "type": "integer"
                            },
                            "sparse_data_bytes": {
                                "description": "The number of sparse data bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "start_time": {
                                "description": "The time the job started in unix epoch seconds. The field is null if the job hasn't started.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "state": {
                                "description": "The state of the job.",
                                "enum": [
                                    "scheduled",
                                    "running",
                                    "paused",
                                    "finished",
                                    "failed",
                                    "canceled",
                                    "needs_attention",
                                    "skipped",
                                    "pending",
                                    "unknown"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "succeeded_chunks": {
                                "description": "The number of data chunks that have been transmitted successfully.",
                                "required": true,
                                "type": "integer"
                            },
                            "symlinks_replicated": {
                                "description": "The number of symlinks replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "sync_type": {
                                "description": "The type of sync being performed by this job.",
                                "enum": [
                                    "invalid",
                                    "legacy",
                                    "initial",
                                    "incremental",
                                    "upgrade",
                                    "fofb",
                                    "domainmark"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "target_bytes_recovered": {
                                "description": "The number of bytes recovered on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_created": {
                                "description": "The number of directories created on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_deleted": {
                                "description": "The number of directories deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_linked": {
                                "description": "The number of directories linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_directories_unlinked": {
                                "description": "The number of directories unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_deleted": {
                                "description": "The number of files deleted on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_linked": {
                                "description": "The number of files linked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_files_unlinked": {
                                "description": "The number of files unlinked on the target.",
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshots": {
                                "description": "The target snapshots created by this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "total_chunks": {
                                "description": "The total number of data chunks transmitted by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_data_bytes": {
                                "description": "The total number of bytes transferred by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_files": {
                                "description": "The number of files affected by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_network_bytes": {
                                "description": "The total number of bytes sent over the network by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "total_phases": {
                                "description": "The total number of phases for this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "unchanged_data_bytes": {
                                "description": "The number of bytes unchanged by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "up_to_date_files_skipped": {
                                "description": "The number of up-to-date files skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "updated_files_replicated": {
                                "description": "The number of updated files replicated by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "user_conflict_files_skipped": {
                                "description": "The number of files with user conflicts skipped by this job.",
                                "required": true,
                                "type": "integer"
                            },
                            "warnings": {
                                "description": "A list of warning messages for this job.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "workers": {
                                "description": "A list of workers for this job.",
                                "items": {
                                    "properties": {
                                        "connected": {
                                            "description": "Whether there is a connection between the source and target.",
                                            "type": "boolean"
                                        },
                                        "last_split": {
                                            "description": "The last time a network split occurred.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "last_work": {
                                            "description": "The last time the worker performed work.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "lin": {
                                            "description": "The LIN being worked on.",
                                            "type": "integer"
                                        },
                                        "lnn": {
                                            "description": "The lnn the worker is assigned to run on.",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        },
                                        "process_id": {
                                            "description": "The process ID of the worker.",
                                            "type": "integer"
                                        },
                                        "source_host": {
                                            "description": "The source host for this worker.",
                                            "type": "string"
                                        },
                                        "target_host": {
                                            "description": "The target host for this worker.",
                                            "type": "string"
                                        },
                                        "worker_id": {
                                            "description": "The ID of the worker.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "required": true,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Perform an action (pause, cancel, etc...) on a single job.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "state": {
                    "description": "The state of the job.",
                    "enum": [
                        "canceled",
                        "running",
                        "paused"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/policies": {
        "DELETE_args": {
            "description": "Delete all SyncIQ policies.",
            "properties": {
                "force": {
                    "description": "Ignore any running jobs when preparing to delete a policy.",
                    "type": "boolean"
                },
                "local_only": {
                    "description": "Skip deleting the policy association on the target.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all SyncIQ policies.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "scope": {
                    "description": "If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.",
                    "enum": [
                        "user",
                        "default",
                        "effective"
                    ],
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "summary": {
                    "description": "Show only summary properties",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "properties": {
                            "accelerated_failback": {
                                "description": "If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.",
                                "type": "boolean"
                            },
                            "action": {
                                "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": false,
                                "type": "string"
                            },
                            "burst_mode": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.",
                                "type": "boolean"
                            },
                            "changelist": {
                                "description": "If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.",
                                "type": "boolean"
                            },
                            "check_integrity": {
                                "description": "If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.",
                                "type": "boolean"
                            },
                            "cloud_deep_copy": {
                                "description": "If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.",
                                "enum": [
                                    "deny",
                                    "allow",
                                    "force"
                                ],
                                "type": "string"
                            },
                            "conflicted": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the most recent run of this policy encountered an error and this policy will not start any more scheduled jobs until this field is manually set back to 'false'.",
                                "type": "boolean"
                            },
                            "description": {
                                "description": "User-assigned description of this sync policy.",
                                "type": "string"
                            },
                            "disable_file_split": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.",
                                "type": "boolean"
                            },
                            "disable_fofb": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.",
                                "type": "boolean"
                            },
                            "disable_stf": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.",
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "If true, jobs will be automatically run based on this policy, according to its schedule.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expected_dataloss": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.",
                                "type": "boolean"
                            },
                            "file_matching_pattern": {
                                "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                "properties": {
                                    "or_criteria": {
                                        "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                    "items": {
                                                        "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "How to compare the specified attribute of each file to the specified value.",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "accessed_time",
                                                                    "accessed_before",
                                                                    "accessed_after",
                                                                    "birth_time",
                                                                    "birth_before",
                                                                    "birth_after",
                                                                    "changed_time",
                                                                    "changed_before",
                                                                    "changed_after",
                                                                    "size",
                                                                    "file_type",
                                                                    "posix_regex_name",
                                                                    "user_name",
                                                                    "user_id",
                                                                    "group_name",
                                                                    "group_id",
                                                                    "no_user",
                                                                    "no_group"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value to compare the specified attribute of each file to.",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            },
                                                            "whole_word": {
                                                                "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": false,
                                "type": "object"
                            },
                            "force_interface": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.",
                                "type": "boolean"
                            },
                            "has_sync_state": {
                                "description": "This field is false if the policy is in its initial sync state and true otherwise.  Setting this field to false will reset the policy's sync state.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "job_delay": {
                                "description": "If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).",
                                "minimum": 0,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "last_job_state": {
                                "description": "This is the state of the most recent job for this policy.",
                                "type": "string"
                            },
                            "last_started": {
                                "description": "The most recent time a job was started for this policy.  Value is null if the policy has never been run.",
                                "minimum": 0,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "last_success": {
                                "description": "Timestamp of last known successfully completed synchronization.  Value is null if the policy has never completed successfully.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "log_level": {
                                "description": "Severity an event must reach before it is logged.",
                                "enum": [
                                    "fatal",
                                    "error",
                                    "notice",
                                    "info",
                                    "copy",
                                    "debug",
                                    "trace"
                                ],
                                "type": "string"
                            },
                            "log_removed_files": {
                                "description": "If true, the system will log any files or directories that are deleted due to a sync.",
                                "type": "boolean"
                            },
                            "name": {
                                "description": "User-assigned name of this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "next_run": {
                                "description": "This is the next time a job is scheduled to run for this policy in Unix epoch seconds.  This field is null if the job is not scheduled.",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "password_set": {
                                "description": "Indicates if a password is set for accessing the target cluster. Password value is not shown with GET.",
                                "type": "boolean"
                            },
                            "priority": {
                                "description": "Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.",
                                "type": "integer"
                            },
                            "report_max_age": {
                                "description": "Length of time (in seconds) a policy report will be stored.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "report_max_count": {
                                "description": "Maximum number of policy reports that will be stored on the system.",
                                "maximum": 2000,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "restrict_target_network": {
                                "description": "If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                                "type": "boolean"
                            },
                            "rpo_alert": {
                                "description": "If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.",
                                "minimum": 0,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "schedule": {
                                "description": "The schedule on which new jobs will be run for this policy.",
                                "required": true,
                                "type": "string"
                            },
                            "skip_lookup": {
                                "description": "Skip DNS lookup of target IPs.",
                                "type": "boolean"
                            },
                            "skip_when_source_unmodified": {
                                "description": "If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.",
                                "type": "boolean"
                            },
                            "snapshot_sync_existing": {
                                "description": "If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).",
                                "type": "boolean"
                            },
                            "snapshot_sync_pattern": {
                                "description": "The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is \"*\").",
                                "type": "string"
                            },
                            "source_exclude_directories": {
                                "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "source_include_directories": {
                                "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "source_network": {
                                "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                                "properties": {
                                    "pool": {
                                        "description": "The pool to restrict replication policies to.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "subnet": {
                                        "description": "The subnet to restrict replication policies to.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "source_root_path": {
                                "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                "required": true,
                                "type": "string"
                            },
                            "source_snapshot_archive": {
                                "description": "If true, archival snapshots of the source data will be taken on the source cluster before a sync.",
                                "type": "boolean"
                            },
                            "source_snapshot_expiration": {
                                "description": "The length of time in seconds to keep snapshots on the source cluster.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "source_snapshot_pattern": {
                                "description": "The name pattern for snapshots taken on the source cluster before a sync.",
                                "type": "string"
                            },
                            "target_compare_initial_sync": {
                                "description": "If true, the target creates diffs against the original sync.",
                                "type": "boolean"
                            },
                            "target_detect_modifications": {
                                "description": "If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.",
                                "type": "boolean"
                            },
                            "target_host": {
                                "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                "required": true,
                                "type": "string"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshot_alias": {
                                "description": "The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.",
                                "type": "string"
                            },
                            "target_snapshot_archive": {
                                "description": "If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.",
                                "type": "boolean"
                            },
                            "target_snapshot_expiration": {
                                "description": "The length of time in seconds to keep snapshots on the target cluster.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "target_snapshot_pattern": {
                                "description": "The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.",
                                "type": "string"
                            },
                            "workers_per_node": {
                                "description": "The number of worker threads on a node performing a sync.",
                                "maximum": 20,
                                "minimum": 1,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a SyncIQ policy.",
            "type": "object"
        },
        "POST_input_schema": {
            "properties": {
                "accelerated_failback": {
                    "description": "If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.",
                    "type": "boolean"
                },
                "action": {
                    "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                    "enum": [
                        "copy",
                        "sync"
                    ],
                    "required": true,
                    "type": "string"
                },
                "burst_mode": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.",
                    "type": "boolean"
                },
                "changelist": {
                    "description": "If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.",
                    "type": "boolean"
                },
                "check_integrity": {
                    "description": "If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.",
                    "type": "boolean"
                },
                "cloud_deep_copy": {
                    "description": "If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.",
                    "enum": [
                        "deny",
                        "allow",
                        "force"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "User-assigned description of this sync policy.",
                    "type": "string"
                },
                "disable_file_split": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.",
                    "type": "boolean"
                },
                "disable_fofb": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.",
                    "type": "boolean"
                },
                "disable_stf": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "If true, jobs will be automatically run based on this policy, according to its schedule.",
                    "type": "boolean"
                },
                "expected_dataloss": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.",
                    "type": "boolean"
                },
                "file_matching_pattern": {
                    "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                    "properties": {
                        "or_criteria": {
                            "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                            "items": {
                                "properties": {
                                    "and_criteria": {
                                        "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                        "items": {
                                            "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                            "properties": {
                                                "attribute_exists": {
                                                    "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                    "type": "boolean"
                                                },
                                                "case_sensitive": {
                                                    "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                    "type": "boolean"
                                                },
                                                "field": {
                                                    "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "How to compare the specified attribute of each file to the specified value.",
                                                    "enum": [
                                                        "==",
                                                        "!=",
                                                        ">",
                                                        ">=",
                                                        "<",
                                                        "<=",
                                                        "!"
                                                    ],
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "The type of this criterion, that is, which file attribute to match on.",
                                                    "enum": [
                                                        "name",
                                                        "path",
                                                        "accessed_time",
                                                        "accessed_before",
                                                        "accessed_after",
                                                        "birth_time",
                                                        "birth_before",
                                                        "birth_after",
                                                        "changed_time",
                                                        "changed_before",
                                                        "changed_after",
                                                        "size",
                                                        "file_type",
                                                        "posix_regex_name",
                                                        "user_name",
                                                        "user_id",
                                                        "group_name",
                                                        "group_id",
                                                        "no_user",
                                                        "no_group"
                                                    ],
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The value to compare the specified attribute of each file to.",
                                                    "type": [
                                                        "string",
                                                        "integer"
                                                    ]
                                                },
                                                "whole_word": {
                                                    "description": "If true, the attribute must match the entire word.  Default is true.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": false,
                    "type": "object"
                },
                "force_interface": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.",
                    "type": "boolean"
                },
                "job_delay": {
                    "description": "If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "log_level": {
                    "description": "Severity an event must reach before it is logged.",
                    "enum": [
                        "fatal",
                        "error",
                        "notice",
                        "info",
                        "copy",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                },
                "log_removed_files": {
                    "description": "If true, the system will log any files or directories that are deleted due to a sync.",
                    "type": "boolean"
                },
                "name": {
                    "description": "User-assigned name of this sync policy.",
                    "required": true,
                    "type": "string"
                },
                "password": {
                    "description": "The password for the target cluster.  This field is not readable.",
                    "type": "string"
                },
                "priority": {
                    "description": "Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.",
                    "type": "integer"
                },
                "report_max_age": {
                    "description": "Length of time (in seconds) a policy report will be stored.",
                    "minimum": 0,
                    "type": "integer"
                },
                "report_max_count": {
                    "description": "Maximum number of policy reports that will be stored on the system.",
                    "maximum": 2000,
                    "minimum": 1,
                    "type": "integer"
                },
                "restrict_target_network": {
                    "description": "If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                    "type": "boolean"
                },
                "rpo_alert": {
                    "description": "If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "The schedule on which new jobs will be run for this policy.",
                    "type": "string"
                },
                "skip_lookup": {
                    "description": "Skip DNS lookup of target IPs.",
                    "type": "boolean"
                },
                "skip_when_source_unmodified": {
                    "description": "If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.",
                    "type": "boolean"
                },
                "snapshot_sync_existing": {
                    "description": "If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).",
                    "type": "boolean"
                },
                "snapshot_sync_pattern": {
                    "description": "The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is \"*\").",
                    "type": "string"
                },
                "source_exclude_directories": {
                    "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_include_directories": {
                    "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_network": {
                    "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                    "properties": {
                        "pool": {
                            "description": "The pool to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        },
                        "subnet": {
                            "description": "The subnet to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "source_root_path": {
                    "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                    "required": true,
                    "type": "string"
                },
                "source_snapshot_archive": {
                    "description": "If true, archival snapshots of the source data will be taken on the source cluster before a sync.",
                    "type": "boolean"
                },
                "source_snapshot_expiration": {
                    "description": "The length of time in seconds to keep snapshots on the source cluster.",
                    "minimum": 0,
                    "type": "integer"
                },
                "source_snapshot_pattern": {
                    "description": "The name pattern for snapshots taken on the source cluster before a sync.",
                    "type": "string"
                },
                "target_compare_initial_sync": {
                    "description": "If true, the target creates diffs against the original sync.",
                    "type": "boolean"
                },
                "target_detect_modifications": {
                    "description": "If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.",
                    "type": "boolean"
                },
                "target_host": {
                    "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                    "required": true,
                    "type": "string"
                },
                "target_path": {
                    "description": "Absolute filesystem path on the target cluster for the sync destination.",
                    "required": true,
                    "type": "string"
                },
                "target_snapshot_alias": {
                    "description": "The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.",
                    "type": "string"
                },
                "target_snapshot_archive": {
                    "description": "If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.",
                    "type": "boolean"
                },
                "target_snapshot_expiration": {
                    "description": "The length of time in seconds to keep snapshots on the target cluster.",
                    "minimum": 0,
                    "type": "integer"
                },
                "target_snapshot_pattern": {
                    "description": "The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.",
                    "type": "string"
                },
                "workers_per_node": {
                    "description": "The number of worker threads on a node performing a sync.",
                    "maximum": 20,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/policies/<POLICY>": {
        "DELETE_args": {
            "description": "Delete a single SyncIQ policy.",
            "properties": {
                "force": {
                    "description": "Ignore any running jobs when preparing to delete a policy.",
                    "type": "boolean"
                },
                "local_only": {
                    "description": "Skip deleting the policy association on the target.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "View a single SyncIQ policy.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "policies": {
                    "items": {
                        "properties": {
                            "accelerated_failback": {
                                "description": "If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.",
                                "required": true,
                                "type": "boolean"
                            },
                            "action": {
                                "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                                "enum": [
                                    "copy",
                                    "sync"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "burst_mode": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.",
                                "required": true,
                                "type": "boolean"
                            },
                            "changelist": {
                                "description": "If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.",
                                "required": true,
                                "type": "boolean"
                            },
                            "check_integrity": {
                                "description": "If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.",
                                "required": true,
                                "type": "boolean"
                            },
                            "cloud_deep_copy": {
                                "description": "If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.",
                                "enum": [
                                    "deny",
                                    "allow",
                                    "force"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "conflicted": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the most recent run of this policy encountered an error and this policy will not start any more scheduled jobs until this field is manually set back to 'false'.",
                                "required": true,
                                "type": "boolean"
                            },
                            "description": {
                                "description": "User-assigned description of this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "disable_file_split": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.",
                                "required": true,
                                "type": "boolean"
                            },
                            "disable_fofb": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.",
                                "required": true,
                                "type": "boolean"
                            },
                            "disable_stf": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.",
                                "required": true,
                                "type": "boolean"
                            },
                            "enabled": {
                                "description": "If true, jobs will be automatically run based on this policy, according to its schedule.",
                                "required": true,
                                "type": "boolean"
                            },
                            "expected_dataloss": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.",
                                "required": true,
                                "type": "boolean"
                            },
                            "file_matching_pattern": {
                                "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                                "properties": {
                                    "or_criteria": {
                                        "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                                        "items": {
                                            "properties": {
                                                "and_criteria": {
                                                    "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                                    "items": {
                                                        "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                                        "properties": {
                                                            "attribute_exists": {
                                                                "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                                "type": "boolean"
                                                            },
                                                            "case_sensitive": {
                                                                "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                                "type": "boolean"
                                                            },
                                                            "field": {
                                                                "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "How to compare the specified attribute of each file to the specified value.",
                                                                "enum": [
                                                                    "==",
                                                                    "!=",
                                                                    ">",
                                                                    ">=",
                                                                    "<",
                                                                    "<=",
                                                                    "!"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of this criterion, that is, which file attribute to match on.",
                                                                "enum": [
                                                                    "name",
                                                                    "path",
                                                                    "accessed_time",
                                                                    "accessed_before",
                                                                    "accessed_after",
                                                                    "birth_time",
                                                                    "birth_before",
                                                                    "birth_after",
                                                                    "changed_time",
                                                                    "changed_before",
                                                                    "changed_after",
                                                                    "size",
                                                                    "file_type",
                                                                    "posix_regex_name",
                                                                    "user_name",
                                                                    "user_id",
                                                                    "group_name",
                                                                    "group_id",
                                                                    "no_user",
                                                                    "no_group"
                                                                ],
                                                                "required": true,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value to compare the specified attribute of each file to.",
                                                                "type": [
                                                                    "string",
                                                                    "integer"
                                                                ]
                                                            },
                                                            "whole_word": {
                                                                "description": "If true, the attribute must match the entire word.  Default is true.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": true,
                                "type": "object"
                            },
                            "force_interface": {
                                "description": "NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.",
                                "required": true,
                                "type": "boolean"
                            },
                            "has_sync_state": {
                                "description": "This field is false if the policy is in its initial sync state and true otherwise.  Setting this field to false will reset the policy's sync state.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "job_delay": {
                                "description": "If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "last_job_state": {
                                "description": "This is the state of the most recent job for this policy.",
                                "required": true,
                                "type": "string"
                            },
                            "last_started": {
                                "description": "The most recent time a job was started for this policy.  Value is null if the policy has never been run.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "last_success": {
                                "description": "Timestamp of last known successfully completed synchronization.  Value is null if the policy has never completed successfully.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "log_level": {
                                "description": "Severity an event must reach before it is logged.",
                                "enum": [
                                    "fatal",
                                    "error",
                                    "notice",
                                    "info",
                                    "copy",
                                    "debug",
                                    "trace"
                                ],
                                "required": true,
                                "type": "string"
                            },
                            "log_removed_files": {
                                "description": "If true, the system will log any files or directories that are deleted due to a sync.",
                                "required": true,
                                "type": "boolean"
                            },
                            "name": {
                                "description": "User-assigned name of this sync policy.",
                                "required": true,
                                "type": "string"
                            },
                            "next_run": {
                                "description": "This is the next time a job is scheduled to run for this policy in Unix epoch seconds.  This field is null if the job is not scheduled.",
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "password_set": {
                                "description": "Indicates if a password is set for accessing the target cluster. Password value is not shown with GET.",
                                "required": true,
                                "type": "boolean"
                            },
                            "priority": {
                                "description": "Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.",
                                "required": true,
                                "type": "integer"
                            },
                            "report_max_age": {
                                "description": "Length of time (in seconds) a policy report will be stored.",
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "report_max_count": {
                                "description": "Maximum number of policy reports that will be stored on the system.",
                                "maximum": 2000,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            },
                            "restrict_target_network": {
                                "description": "If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                                "required": true,
                                "type": "boolean"
                            },
                            "rpo_alert": {
                                "description": "If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.",
                                "minimum": 0,
                                "required": true,
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "schedule": {
                                "description": "The schedule on which new jobs will be run for this policy.",
                                "required": true,
                                "type": "string"
                            },
                            "skip_lookup": {
                                "description": "Skip DNS lookup of target IPs.",
                                "required": true,
                                "type": "boolean"
                            },
                            "skip_when_source_unmodified": {
                                "description": "If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.",
                                "required": true,
                                "type": "boolean"
                            },
                            "snapshot_sync_existing": {
                                "description": "If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).",
                                "required": true,
                                "type": "boolean"
                            },
                            "snapshot_sync_pattern": {
                                "description": "The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is \"*\").",
                                "required": true,
                                "type": "string"
                            },
                            "source_exclude_directories": {
                                "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "source_include_directories": {
                                "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                                "items": {
                                    "type": "string"
                                },
                                "required": true,
                                "type": "array"
                            },
                            "source_network": {
                                "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                                "properties": {
                                    "pool": {
                                        "description": "The pool to restrict replication policies to.",
                                        "required": true,
                                        "type": "string"
                                    },
                                    "subnet": {
                                        "description": "The subnet to restrict replication policies to.",
                                        "required": true,
                                        "type": "string"
                                    }
                                },
                                "required": true,
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "source_root_path": {
                                "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                                "required": true,
                                "type": "string"
                            },
                            "source_snapshot_archive": {
                                "description": "If true, archival snapshots of the source data will be taken on the source cluster before a sync.",
                                "required": true,
                                "type": "boolean"
                            },
                            "source_snapshot_expiration": {
                                "description": "The length of time in seconds to keep snapshots on the source cluster.",
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "source_snapshot_pattern": {
                                "description": "The name pattern for snapshots taken on the source cluster before a sync.",
                                "required": true,
                                "type": "string"
                            },
                            "target_compare_initial_sync": {
                                "description": "If true, the target creates diffs against the original sync.",
                                "required": true,
                                "type": "boolean"
                            },
                            "target_detect_modifications": {
                                "description": "If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.",
                                "required": true,
                                "type": "boolean"
                            },
                            "target_host": {
                                "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                                "required": true,
                                "type": "string"
                            },
                            "target_path": {
                                "description": "Absolute filesystem path on the target cluster for the sync destination.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshot_alias": {
                                "description": "The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.",
                                "required": true,
                                "type": "string"
                            },
                            "target_snapshot_archive": {
                                "description": "If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.",
                                "required": true,
                                "type": "boolean"
                            },
                            "target_snapshot_expiration": {
                                "description": "The length of time in seconds to keep snapshots on the target cluster.",
                                "minimum": 0,
                                "required": true,
                                "type": "integer"
                            },
                            "target_snapshot_pattern": {
                                "description": "The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.",
                                "required": true,
                                "type": "string"
                            },
                            "workers_per_node": {
                                "description": "The number of worker threads on a node performing a sync.",
                                "maximum": 20,
                                "minimum": 1,
                                "required": true,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a single SyncIQ policy.",
            "type": "object"
        },
        "PUT_input_schema": {
            "properties": {
                "accelerated_failback": {
                    "description": "If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.",
                    "type": "boolean"
                },
                "action": {
                    "description": "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.",
                    "enum": [
                        "copy",
                        "sync"
                    ],
                    "type": "string"
                },
                "burst_mode": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.",
                    "type": "boolean"
                },
                "changelist": {
                    "description": "If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.",
                    "type": "boolean"
                },
                "check_integrity": {
                    "description": "If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.",
                    "type": "boolean"
                },
                "cloud_deep_copy": {
                    "description": "If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.",
                    "enum": [
                        "deny",
                        "allow",
                        "force"
                    ],
                    "type": "string"
                },
                "conflicted": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the most recent run of this policy encountered an error and this policy will not start any more scheduled jobs until this field is manually set back to 'false'.",
                    "enum": [
                        false
                    ],
                    "type": "boolean"
                },
                "description": {
                    "description": "User-assigned description of this sync policy.",
                    "type": "string"
                },
                "disable_file_split": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.",
                    "type": "boolean"
                },
                "disable_fofb": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.",
                    "type": "boolean"
                },
                "disable_stf": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "If true, jobs will be automatically run based on this policy, according to its schedule.",
                    "type": "boolean"
                },
                "expected_dataloss": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.",
                    "type": "boolean"
                },
                "file_matching_pattern": {
                    "description": "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.",
                    "properties": {
                        "or_criteria": {
                            "description": "An array containing objects with \"and_criteria\" properties, each set of and_criteria will be logically OR'ed together to create the full file matching pattern.",
                            "items": {
                                "properties": {
                                    "and_criteria": {
                                        "description": "An array containing individual file criterion objects each describing one criterion.  These are logically AND'ed together to form a set of criteria.",
                                        "items": {
                                            "description": "An object describing one criterion for finding a matching file, for example \"size is greater than or equal to 10KB\". Note: For time types (accessed_*, birth_*, and changed_*), operator is not required (it is implicitly ==).  For the value, you can use a relative date and time, such as \"two weeks ago\", or specific date and time, such as \"January 1, 2012.\"  Time settings are based on a 24-hour clock.",
                                            "properties": {
                                                "attribute_exists": {
                                                    "description": "For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.",
                                                    "type": "boolean"
                                                },
                                                "case_sensitive": {
                                                    "description": "If true, the value comparison will be case sensitive.  Default is true.",
                                                    "type": "boolean"
                                                },
                                                "field": {
                                                    "description": "The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "How to compare the specified attribute of each file to the specified value.",
                                                    "enum": [
                                                        "==",
                                                        "!=",
                                                        ">",
                                                        ">=",
                                                        "<",
                                                        "<=",
                                                        "!"
                                                    ],
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "The type of this criterion, that is, which file attribute to match on.",
                                                    "enum": [
                                                        "name",
                                                        "path",
                                                        "accessed_time",
                                                        "accessed_before",
                                                        "accessed_after",
                                                        "birth_time",
                                                        "birth_before",
                                                        "birth_after",
                                                        "changed_time",
                                                        "changed_before",
                                                        "changed_after",
                                                        "size",
                                                        "file_type",
                                                        "posix_regex_name",
                                                        "user_name",
                                                        "user_id",
                                                        "group_name",
                                                        "group_id",
                                                        "no_user",
                                                        "no_group"
                                                    ],
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The value to compare the specified attribute of each file to.",
                                                    "type": [
                                                        "string",
                                                        "integer"
                                                    ]
                                                },
                                                "whole_word": {
                                                    "description": "If true, the attribute must match the entire word.  Default is true.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": false,
                    "type": "object"
                },
                "force_interface": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.",
                    "type": "boolean"
                },
                "job_delay": {
                    "description": "If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "log_level": {
                    "description": "Severity an event must reach before it is logged.",
                    "enum": [
                        "fatal",
                        "error",
                        "notice",
                        "info",
                        "copy",
                        "debug",
                        "trace"
                    ],
                    "type": "string"
                },
                "log_removed_files": {
                    "description": "If true, the system will log any files or directories that are deleted due to a sync.",
                    "type": "boolean"
                },
                "name": {
                    "description": "User-assigned name of this sync policy.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the target cluster.  This field is not readable.",
                    "type": "string"
                },
                "priority": {
                    "description": "Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.",
                    "type": "integer"
                },
                "report_max_age": {
                    "description": "Length of time (in seconds) a policy report will be stored.",
                    "minimum": 0,
                    "type": "integer"
                },
                "report_max_count": {
                    "description": "Maximum number of policy reports that will be stored on the system.",
                    "maximum": 2000,
                    "minimum": 1,
                    "type": "integer"
                },
                "restrict_target_network": {
                    "description": "If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                    "type": "boolean"
                },
                "rpo_alert": {
                    "description": "If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.",
                    "minimum": 0,
                    "type": [
                        "integer",
                        "null"
                    ]
                },
                "schedule": {
                    "description": "The schedule on which new jobs will be run for this policy.",
                    "type": "string"
                },
                "skip_lookup": {
                    "description": "Skip DNS lookup of target IPs.",
                    "type": "boolean"
                },
                "skip_when_source_unmodified": {
                    "description": "If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.",
                    "type": "boolean"
                },
                "snapshot_sync_existing": {
                    "description": "If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).",
                    "type": "boolean"
                },
                "snapshot_sync_pattern": {
                    "description": "The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is \"*\").",
                    "type": "string"
                },
                "source_exclude_directories": {
                    "description": "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_include_directories": {
                    "description": "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_network": {
                    "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                    "properties": {
                        "pool": {
                            "description": "The pool to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        },
                        "subnet": {
                            "description": "The subnet to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "source_root_path": {
                    "description": "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.",
                    "type": "string"
                },
                "source_snapshot_archive": {
                    "description": "If true, archival snapshots of the source data will be taken on the source cluster before a sync.",
                    "type": "boolean"
                },
                "source_snapshot_expiration": {
                    "description": "The length of time in seconds to keep snapshots on the source cluster.",
                    "minimum": 0,
                    "type": "integer"
                },
                "source_snapshot_pattern": {
                    "description": "The name pattern for snapshots taken on the source cluster before a sync.",
                    "type": "string"
                },
                "target_compare_initial_sync": {
                    "description": "If true, the target creates diffs against the original sync.",
                    "type": "boolean"
                },
                "target_detect_modifications": {
                    "description": "If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.",
                    "type": "boolean"
                },
                "target_host": {
                    "description": "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.",
                    "type": "string"
                },
                "target_path": {
                    "description": "Absolute filesystem path on the target cluster for the sync destination.",
                    "type": "string"
                },
                "target_snapshot_alias": {
                    "description": "The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.",
                    "type": "string"
                },
                "target_snapshot_archive": {
                    "description": "If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.",
                    "type": "boolean"
                },
                "target_snapshot_expiration": {
                    "description": "The length of time in seconds to keep snapshots on the target cluster.",
                    "minimum": 0,
                    "type": "integer"
                },
                "target_snapshot_pattern": {
                    "description": "The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.",
                    "type": "string"
                },
                "workers_per_node": {
                    "description": "The number of worker threads on a node performing a sync.",
                    "maximum": 20,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/rules": {
        "DELETE_args": {
            "description": "Delete all SyncIQ performance rules or all rules of a specified type.",
            "properties": {
                "type": {
                    "description": "Delete all rules of the specified rule type only.",
                    "enum": [
                        "bandwidth",
                        "file_count",
                        "cpu",
                        "worker"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "List all SyncIQ performance rules.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                },
                "type": {
                    "description": "Filter the returned rules to include only those with this rule type.",
                    "enum": [
                        "bandwidth",
                        "file_count",
                        "cpu",
                        "worker"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "required": true,
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "rules": {
                    "items": {
                        "description": "A rule limiting the bandwidth, file operations, cpu usage, or worker count for all sync jobs on this cluster.",
                        "properties": {
                            "description": {
                                "description": "User-entered description of this performance rule.",
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether this performance rule is currently in effect during its specified intervals.",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to this performance rule.",
                                "type": "string"
                            },
                            "limit": {
                                "description": "Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.",
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "A schedule defining when during a week this performance rule is in effect.  If unspecified or null, the schedule will always be in effect.",
                                "properties": {
                                    "begin": {
                                        "description": "Start time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (24h format hour, and minute).  A null value indicates the beginning of the day (\"00:00\").",
                                        "required": false,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "end": {
                                        "description": "End time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (three-letter weekday name abbreviation, 24h format hour, and minute).  A null value indicates the end of the day (\"23:59\").",
                                        "required": false,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "friday": {
                                        "description": "If true, this rule is in effect on Friday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "monday": {
                                        "description": "If true, this rule is in effect on Monday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "saturday": {
                                        "description": "If true, this rule is in effect on Saturday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "sunday": {
                                        "description": "If true, this rule is in effect on Sunday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "thursday": {
                                        "description": "If true, this rule is in effect on Thursday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "tuesday": {
                                        "description": "If true, this rule is in effect on Tuesday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "wednesday": {
                                        "description": "If true, this rule is in effect on Wednesday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    }
                                },
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "type": {
                                "description": "The type of system resource this rule limits.",
                                "enum": [
                                    "bandwidth",
                                    "file_count",
                                    "cpu",
                                    "worker"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": true,
                    "type": "array"
                },
                "total": {
                    "description": "Total number of items available.",
                    "required": true,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new SyncIQ performance rule.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A rule limiting the bandwidth, file operations, cpu usage, or worker count for all sync jobs on this cluster.",
            "properties": {
                "description": {
                    "description": "User-entered description of this performance rule.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether this performance rule is currently in effect during its specified intervals.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.",
                    "required": true,
                    "type": "integer"
                },
                "schedule": {
                    "description": "A schedule defining when during a week this performance rule is in effect.  If unspecified or null, the schedule will always be in effect.",
                    "properties": {
                        "begin": {
                            "description": "Start time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (24h format hour, and minute).  A null value indicates the beginning of the day (\"00:00\").",
                            "required": false,
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "end": {
                            "description": "End time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (three-letter weekday name abbreviation, 24h format hour, and minute).  A null value indicates the end of the day (\"23:59\").",
                            "required": false,
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "friday": {
                            "description": "If true, this rule is in effect on Friday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "monday": {
                            "description": "If true, this rule is in effect on Monday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "saturday": {
                            "description": "If true, this rule is in effect on Saturday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "sunday": {
                            "description": "If true, this rule is in effect on Sunday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "thursday": {
                            "description": "If true, this rule is in effect on Thursday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "tuesday": {
                            "description": "If true, this rule is in effect on Tuesday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "wednesday": {
                            "description": "If true, this rule is in effect on Wednesday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "type": {
                    "description": "The type of system resource this rule limits.",
                    "enum": [
                        "bandwidth",
                        "file_count",
                        "cpu",
                        "worker"
                    ],
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/sync/rules/<RULE>": {
        "DELETE_args": {
            "description": "Delete a single SyncIQ performance rule.",
            "type": "object"
        },
        "GET_args": {
            "description": "View a single SyncIQ performance rule.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "rules": {
                    "items": {
                        "description": "A rule limiting the bandwidth, file operations, cpu usage, or worker count for all sync jobs on this cluster.",
                        "properties": {
                            "description": {
                                "description": "User-entered description of this performance rule.",
                                "required": true,
                                "type": "string"
                            },
                            "enabled": {
                                "description": "Whether this performance rule is currently in effect during its specified intervals.",
                                "required": true,
                                "type": "boolean"
                            },
                            "id": {
                                "description": "The system ID given to this performance rule.",
                                "required": true,
                                "type": "string"
                            },
                            "limit": {
                                "description": "Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.",
                                "required": true,
                                "type": "integer"
                            },
                            "schedule": {
                                "description": "A schedule defining when during a week this performance rule is in effect.  If unspecified or null, the schedule will always be in effect.",
                                "properties": {
                                    "begin": {
                                        "description": "Start time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (24h format hour, and minute).  A null value indicates the beginning of the day (\"00:00\").",
                                        "required": false,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "end": {
                                        "description": "End time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (three-letter weekday name abbreviation, 24h format hour, and minute).  A null value indicates the end of the day (\"23:59\").",
                                        "required": false,
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "friday": {
                                        "description": "If true, this rule is in effect on Friday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "monday": {
                                        "description": "If true, this rule is in effect on Monday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "saturday": {
                                        "description": "If true, this rule is in effect on Saturday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "sunday": {
                                        "description": "If true, this rule is in effect on Sunday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "thursday": {
                                        "description": "If true, this rule is in effect on Thursday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "tuesday": {
                                        "description": "If true, this rule is in effect on Tuesday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    },
                                    "wednesday": {
                                        "description": "If true, this rule is in effect on Wednesday.  If false, or unspecified, it is not.",
                                        "required": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": true,
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "type": {
                                "description": "The type of system resource this rule limits.",
                                "enum": [
                                    "bandwidth",
                                    "file_count",
                                    "cpu",
                                    "worker"
                                ],
                                "required": true,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify a single SyncIQ performance rule.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "A rule limiting the bandwidth, file operations, cpu usage, or worker count for all sync jobs on this cluster.",
            "properties": {
                "description": {
                    "description": "User-entered description of this performance rule.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether this performance rule is currently in effect during its specified intervals.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.",
                    "type": "integer"
                },
                "schedule": {
                    "description": "A schedule defining when during a week this performance rule is in effect.  If unspecified or null, the schedule will always be in effect.",
                    "properties": {
                        "begin": {
                            "description": "Start time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (24h format hour, and minute).  A null value indicates the beginning of the day (\"00:00\").",
                            "required": false,
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "end": {
                            "description": "End time (inclusive) for this schedule, during its specified days.  Format is \"hh:mm\" (three-letter weekday name abbreviation, 24h format hour, and minute).  A null value indicates the end of the day (\"23:59\").",
                            "required": false,
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "friday": {
                            "description": "If true, this rule is in effect on Friday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "monday": {
                            "description": "If true, this rule is in effect on Monday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "saturday": {
                            "description": "If true, this rule is in effect on Saturday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "sunday": {
                            "description": "If true, this rule is in effect on Sunday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "thursday": {
                            "description": "If true, this rule is in effect on Thursday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "tuesday": {
                            "description": "If true, this rule is in effect on Tuesday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        },
                        "wednesday": {
                            "description": "If true, this rule is in effect on Wednesday.  If false, or unspecified, it is not.",
                            "required": false,
                            "type": "boolean"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/sync/settings": {
        "GET_args": {
            "description": "Retrieve the global SyncIQ settings.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "settings": {
                    "description": "Global SyncIQ settings.",
                    "properties": {
                        "burst_memory_constraint": {
                            "description": "The per-worker burst socket memory constraint, in bytes.",
                            "type": "integer"
                        },
                        "burst_socket_buffer_size": {
                            "description": "The per-worker burst socket buffer coalesced data, in bytes.",
                            "type": "integer"
                        },
                        "force_interface": {
                            "description": "NOTE: This field should not be changed without the help of Isilon support.  Default for the \"force_interface\" property that will be applied to each new sync policy unless otherwise specified at the time of policy creation.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.",
                            "type": "boolean"
                        },
                        "max_concurrent_jobs": {
                            "description": "The max concurrent jobs that SyncIQ can support. This number is based on the size of the current cluster and the current SyncIQ worker throttle rule.",
                            "type": "integer"
                        },
                        "report_email": {
                            "description": "Email sync reports to these addresses.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "report_max_age": {
                            "description": "The default length of time (in seconds) a policy report will be stored.",
                            "type": "integer"
                        },
                        "report_max_count": {
                            "description": "The default maximum number of reports to retain for a policy.",
                            "maximum": 2000,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "restrict_target_network": {
                            "description": "Default for the \"restrict_target_network\" property that will be applied to each new sync policy unless otherwise specified at the time of policy creation.  If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                            "type": "boolean"
                        },
                        "rpo_alerts": {
                            "description": "If disabled, no RPO alerts will be generated.",
                            "type": "boolean"
                        },
                        "service": {
                            "description": "Specifies if the SyncIQ service currently on, paused, or off.  If paused, all sync jobs will be paused.  If turned off, all jobs will be canceled.",
                            "enum": [
                                "on",
                                "off",
                                "paused"
                            ],
                            "type": "string"
                        },
                        "source_network": {
                            "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                            "properties": {
                                "pool": {
                                    "description": "The pool to restrict replication policies to.",
                                    "required": true,
                                    "type": "string"
                                },
                                "subnet": {
                                    "description": "The subnet to restrict replication policies to.",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "type": [
                                "object",
                                "null"
                            ]
                        },
                        "tw_chkpt_interval": {
                            "description": "The interval (in seconds) in which treewalk syncs are forced to checkpoint.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Global SyncIQ settings.",
            "properties": {
                "burst_memory_constraint": {
                    "description": "The per-worker burst socket memory constraint, in bytes.",
                    "type": "integer"
                },
                "burst_socket_buffer_size": {
                    "description": "The per-worker burst socket buffer coalesced data, in bytes.",
                    "type": "integer"
                },
                "force_interface": {
                    "description": "NOTE: This field should not be changed without the help of Isilon support.  Default for the \"force_interface\" property that will be applied to each new sync policy unless otherwise specified at the time of policy creation.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.",
                    "type": "boolean"
                },
                "report_email": {
                    "description": "Email sync reports to these addresses.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "report_max_age": {
                    "description": "The default length of time (in seconds) a policy report will be stored.",
                    "type": "integer"
                },
                "report_max_count": {
                    "description": "The default maximum number of reports to retain for a policy.",
                    "maximum": 2000,
                    "minimum": 1,
                    "type": "integer"
                },
                "restrict_target_network": {
                    "description": "Default for the \"restrict_target_network\" property that will be applied to each new sync policy unless otherwise specified at the time of policy creation.  If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.",
                    "type": "boolean"
                },
                "rpo_alerts": {
                    "description": "If disabled, no RPO alerts will be generated.",
                    "type": "boolean"
                },
                "service": {
                    "description": "Specifies if the SyncIQ service currently on, paused, or off.  If paused, all sync jobs will be paused.  If turned off, all jobs will be canceled.",
                    "enum": [
                        "on",
                        "off",
                        "paused"
                    ],
                    "type": "string"
                },
                "source_network": {
                    "description": "Restricts replication policies on the local cluster to running on the specified subnet and pool.",
                    "properties": {
                        "pool": {
                            "description": "The pool to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        },
                        "subnet": {
                            "description": "The subnet to restrict replication policies to.",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "tw_chkpt_interval": {
                    "description": "The interval (in seconds) in which treewalk syncs are forced to checkpoint.",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster": {
        "GET_args": {
            "description": "Cluster wide upgrade status info.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Cluster wide upgrade status info.",
            "properties": {
                "cluster_overview": {
                    "description": "The cluster overview of an upgrade process.",
                    "properties": {
                        "nodes_current": {
                            "description": "Number of nodes running the current OneFS version.",
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "nodes_total": {
                            "description": "Total number of nodes on the cluster.",
                            "type": "integer"
                        },
                        "nodes_transitioning": {
                            "description": "Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'",
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "nodes_upgraded": {
                            "description": "Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'",
                            "type": [
                                "integer",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                },
                "cluster_state": {
                    "description": "The different states of an upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'partially upgraded', 'upgrading', 'rolling back', 'assessing', 'error'",
                    "type": "string"
                },
                "finish_time": {
                    "description": "The time when a rollback, assessment or upgrade has finished completely. Use ISO 8601 standard. Null if the cluster_state is not 'upgraded'.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "install_image_path": {
                    "description": "The location (path) of the upgrade image which must be within /ifs.\nNull if the cluster_state is 'committed' or 'upgraded.'",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "onefs_version_current": {
                    "description": "The current OneFS version before upgrade.",
                    "properties": {
                        "bugfix": {
                            "type": "integer"
                        },
                        "maintenance": {
                            "type": "integer"
                        },
                        "major": {
                            "type": "integer"
                        },
                        "minor": {
                            "type": "integer"
                        },
                        "version": {
                            "description": "hex representation of the OneFS version integer.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "onefs_version_upgrade": {
                    "description": "The OneFS version the user is attempting to upgrade to. Null if the cluster_state is 'committed' or 'assessing.'",
                    "properties": {
                        "bugfix": {
                            "type": "integer"
                        },
                        "maintenance": {
                            "type": "integer"
                        },
                        "major": {
                            "type": "integer"
                        },
                        "minor": {
                            "type": "integer"
                        },
                        "version": {
                            "description": "hex representation of the OneFS version integer.",
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "patch_action": {
                    "description": "The most recent patch action performed.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "patch_name": {
                    "description": "The patch with the most recent patch action.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "start_time": {
                    "description": "The time when an upgrade, rollback, or assessment was started. Use ISO 8601 standard. Null if the cluster_state is 'committed' or 'partially upgraded.'",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "upgrade_settings": {
                    "description": "The settings neccessary when starting an upgrade. Null if the cluster_state is not 'upgrading' or 'partially upgraded.' or 'error'.",
                    "properties": {
                        "nodes_to_rolling_upgrade": {
                            "description": "The nodes (to be) scheduled for upgrade ordered by queue position number. Null if the cluster_state is 'partially upgraded' or upgrade_type is 'simultaneous'. One of the following values: [<lnn-1>, <lnn-2>, ... ], 'All', null",
                            "items": {
                                "description": "The lnn of the node.",
                                "type": "integer"
                            },
                            "type": [
                                "array",
                                "string",
                                "null"
                            ]
                        },
                        "upgrade_type": {
                            "description": "The type of upgrade to perform. One of the following values: 'rolling', 'simultaneous'",
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/add_remaining_nodes": {
        "POST_args": {
            "description": "Let system absorb any remaining or new nodes inside the existing upgrade.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Let system absorb any remaining or new nodes inside the existing upgrade.",
            "properties": {},
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/archive": {
        "POST_args": {
            "description": "Start an archive of an upgrade.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Start an archive of an upgrade.",
            "properties": {
                "clear": {
                    "description": "If set to true the currently running upgrade will be cleared",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/assess": {
        "POST_args": {
            "description": "Start upgrade assessment on cluster.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "The settings necessary to start a pre-upgrade assessment.",
            "properties": {
                "install_image_path": {
                    "description": "The location (path) of the upgrade image which must be within /ifs.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/commit": {
        "POST_args": {
            "description": "Commit the upgrade of a cluster.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Commit the upgrade of a cluster.",
            "properties": {},
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/firmware/assess": {
        "POST_args": {
            "description": "Start firmware upgrade assessment on cluster.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Start firmware upgrade assessment on cluster.",
            "properties": {},
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/firmware/progress": {
        "GET_args": {
            "description": "Cluster wide firmware upgrade status info.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "Cluster wide firmware upgrade progress info.",
            "properties": {
                "cluster_state": {
                    "description": "The different states of a  firmware upgrade. One of the following values: 'committed', 'upgrading', 'error'",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/firmware/status": {
        "GET_args": {
            "description": "The firmware status for the cluster.",
            "properties": {
                "devices": {
                    "description": "Show devices. If false, this returns an empty list. Default is false.",
                    "type": "boolean"
                },
                "package": {
                    "description": "Show package. If false, this returns an empty list.Default is false.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The firmware status for the cluster.",
            "properties": {
                "nodes": {
                    "description": "List of the firmware status information for all the nodes in the cluster.",
                    "items": {
                        "description": "The firmware status for the node.",
                        "properties": {
                            "devices": {
                                "description": "List of the firmware status for hardware components on the node.",
                                "items": {
                                    "description": "The firmware status for a hardware component on the node.",
                                    "properties": {
                                        "device": {
                                            "description": "The name of the device.",
                                            "type": "string"
                                        },
                                        "mismatch": {
                                            "description": "Is the firmware up-to-date for this component.",
                                            "type": "boolean"
                                        },
                                        "target_version": {
                                            "description": "The target firmware version.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "The device type.",
                                            "type": "string"
                                        },
                                        "upgrade_status": {
                                            "description": "The current state of the firmware upgrade for this component. One of the following values: 'queued', 'upgrading', 'upgraded', 'error'. or 'null'.'null' indicates that the upgrade status is unknown.",
                                            "type": "string"
                                        },
                                        "version": {
                                            "description": "The current firmware version.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "lnn": {
                                "description": "The lnn of the node.",
                                "type": "integer"
                            },
                            "package": {
                                "description": "List of the firmware binary information for the installed firmware package.",
                                "items": {
                                    "description": "The firmware binary information.",
                                    "properties": {
                                        "checksum": {
                                            "description": "Valid checksum string for binary. One of the following: 'ok', 'bad', 'file_missing', or 'na'",
                                            "type": "string"
                                        },
                                        "firmware": {
                                            "description": "The name of the firmware binary.",
                                            "type": "string"
                                        },
                                        "version": {
                                            "description": "The version string for the binary.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/firmware/upgrade": {
        "POST_args": {
            "description": "The settings necessary to start a firmware upgrade.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "The settings necessary to start a firmware upgrade.",
            "properties": {
                "exclude_device": {
                    "description": "Exclude the specified devices in the firmware upgrade.",
                    "type": "string"
                },
                "exclude_type": {
                    "description": "Include the specified device type in the firmware upgrade.",
                    "type": "string"
                },
                "include_device": {
                    "description": "Include the specified devices in the firmware upgrade.",
                    "type": "string"
                },
                "include_type": {
                    "description": "Include the specified device type in the firmware upgrade.",
                    "type": "string"
                },
                "no_burn": {
                    "description": "Do not burn the firmware.",
                    "type": "boolean"
                },
                "no_reboot": {
                    "description": "Do not reboot the node after an upgrade",
                    "type": "boolean"
                },
                "no_verify": {
                    "description": "Do not verify the firmware upgrade after an upgrade.",
                    "type": "boolean"
                },
                "nodes_to_upgrade": {
                    "description": "The nodes scheduled for upgrade. Order in array determines queue position number. 'All' and null option will upgrade all nodes in <lnn> order.",
                    "items": {
                        "description": "The lnn of the node.",
                        "type": "integer"
                    },
                    "type": [
                        "array",
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/nodes": {
        "GET_args": {
            "description": "View information about nodes during an upgrade, rollback, or pre-upgrade assessment.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "View information about nodes during an upgrade, rollback, or pre-upgrade assessment.",
            "properties": {
                "nodes": {
                    "description": "List of detailed info of nodes which are part of the current upgrade",
                    "items": {
                        "description": "The node details useful during an upgrade or assessment.",
                        "properties": {
                            "error": {
                                "description": "The current OneFS version before upgrade.",
                                "properties": {
                                    "failed_upgrade_action": {
                                        "description": "Last upgrade step which failed on node.",
                                        "type": "string"
                                    },
                                    "log": {
                                        "description": "Upgrade error log.",
                                        "type": "string"
                                    }
                                },
                                "type": [
                                    "object",
                                    "null"
                                ]
                            },
                            "last_action": {
                                "description": "The last action performed to completion/failure on this node.  Null if the node_state is 'committed' or 'assessing.' One of the following values: 'upgrade', 'rollback'.",
                                "type": "string"
                            },
                            "last_action_result": {
                                "description": "Did the node pass upgrade or rollback without failing? Null if the node_state is 'committed.' One of the following values: 'pass', 'fail', null",
                                "type": "string"
                            },
                            "lnn": {
                                "description": "The lnn of the node.",
                                "type": "integer"
                            },
                            "node_state": {
                                "description": "The state of the node during the upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'upgrading', 'rolling back', 'assessing', 'error'",
                                "type": "string"
                            },
                            "onefs_version": {
                                "description": "The current OneFS version before upgrade.",
                                "properties": {
                                    "bugfix": {
                                        "type": "integer"
                                    },
                                    "maintenance": {
                                        "type": "integer"
                                    },
                                    "major": {
                                        "type": "integer"
                                    },
                                    "minor": {
                                        "type": "integer"
                                    },
                                    "version": {
                                        "description": "hex representation of the OneFS version integer.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "progress": {
                                "description": "What step is the upgrade, assessment, or rollback in? To show via progress indicator. NOTE: the value is an integer between 0 and 100 (percent)",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "total": {
                    "description": "Total number of nodes the upgrade framework is aware of and was able to collect info for at this point.",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/nodes/<LNN>": {
        "GET_args": {
            "description": "The node details useful during an upgrade or assessment.",
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The node details useful during an upgrade or assessment.",
            "properties": {
                "error": {
                    "description": "The current OneFS version before upgrade.",
                    "properties": {
                        "failed_upgrade_action": {
                            "description": "Last upgrade step which failed on node.",
                            "type": "string"
                        },
                        "log": {
                            "description": "Upgrade error log.",
                            "type": "string"
                        }
                    },
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "last_action": {
                    "description": "The last action performed to completion/failure on this node.  Null if the node_state is 'committed' or 'assessing.' One of the following values: 'upgrade', 'rollback'.",
                    "type": "string"
                },
                "last_action_result": {
                    "description": "Did the node pass upgrade or rollback without failing? Null if the node_state is 'committed.' One of the following values: 'pass', 'fail', null",
                    "type": "string"
                },
                "lnn": {
                    "description": "The lnn of the node.",
                    "type": "integer"
                },
                "node_state": {
                    "description": "The state of the node during the upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'upgrading', 'rolling back', 'assessing', 'error'",
                    "type": "string"
                },
                "onefs_version": {
                    "description": "The current OneFS version before upgrade.",
                    "properties": {
                        "bugfix": {
                            "type": "integer"
                        },
                        "maintenance": {
                            "type": "integer"
                        },
                        "major": {
                            "type": "integer"
                        },
                        "minor": {
                            "type": "integer"
                        },
                        "version": {
                            "description": "hex representation of the OneFS version integer.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "progress": {
                    "description": "What step is the upgrade, assessment, or rollback in? To show via progress indicator. NOTE: the value is an integer between 0 and 100 (percent)",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/nodes/<LNN>/firmware/status": {
        "GET_args": {
            "description": "The firmware status for the node.",
            "properties": {
                "devices": {
                    "description": "Show devices. If false, this returns an empty list. Default is false.",
                    "type": "boolean"
                },
                "package": {
                    "description": "Show package. If false, this returns an empty list.Default is false.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "description": "The firmware status for the node.",
            "properties": {
                "devices": {
                    "description": "List of the firmware status for hardware components on the node.",
                    "items": {
                        "description": "The firmware status for a hardware component on the node.",
                        "properties": {
                            "device": {
                                "description": "The name of the device.",
                                "type": "string"
                            },
                            "mismatch": {
                                "description": "Is the firmware up-to-date for this component.",
                                "type": "boolean"
                            },
                            "target_version": {
                                "description": "The target firmware version.",
                                "type": "string"
                            },
                            "type": {
                                "description": "The device type.",
                                "type": "string"
                            },
                            "upgrade_status": {
                                "description": "The current state of the firmware upgrade for this component. One of the following values: 'queued', 'upgrading', 'upgraded', 'error'. or 'null'.'null' indicates that the upgrade status is unknown.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The current firmware version.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "node_unavailable": {
                    "description": "Node is unavailable.",
                    "type": "boolean"
                },
                "package": {
                    "description": "List of the firmware binary information for the installed firmware package.",
                    "items": {
                        "description": "The firmware binary information.",
                        "properties": {
                            "checksum": {
                                "description": "Valid checksum string for binary. One of the following: 'ok', 'bad', 'file_missing', or 'na'",
                                "type": "string"
                            },
                            "firmware": {
                                "description": "The name of the firmware binary.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version string for the binary.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/patch/abort": {
        "POST_args": {
            "description": "Abort the previous action performed by the patch system.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "An empty object.",
            "type": "object"
        },
        "POST_output_schema": {
            "description": "An empty object.",
            "type": "object"
        }
    },
    "/3/upgrade/cluster/patch/patches": {
        "GET_args": {
            "description": "List all patches.",
            "properties": {
                "dir": {
                    "description": "The direction of the sort.",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "type": "string"
                },
                "limit": {
                    "description": "Return no more than this many results at once (see resume).",
                    "minimum": 1,
                    "type": "integer"
                },
                "local": {
                    "description": "Whether to view patches on the local node only.",
                    "type": "boolean"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": "string"
                },
                "sort": {
                    "description": "The field that will be used for sorting.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "patches": {
                    "items": {
                        "description": "A software patch that can be applied to OneFS.",
                        "properties": {
                            "comment": {
                                "description": "A long comment about the patch.",
                                "type": "string"
                            },
                            "conflicts": {
                                "description": "Other patches that this patch conflicts with.",
                                "items": "string",
                                "type": "array"
                            },
                            "dependencies": {
                                "description": "Other patches that this patch depends on.",
                                "items": "string",
                                "type": "array"
                            },
                            "description": {
                                "description": "A short description of the patch.",
                                "type": "string"
                            },
                            "files": {
                                "description": "The files contained in this patch.",
                                "items": {
                                    "md5": {
                                        "description": "The md5 checksum of the file.",
                                        "type": "string"
                                    },
                                    "path": {
                                        "description": "The path of the file.",
                                        "type": "string"
                                    }
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "A unique identifier for the patch.",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the patch.",
                                "type": "string"
                            },
                            "nodes": {
                                "description": "The nodes that this patch is installed on.",
                                "items": "integer",
                                "type": "array"
                            },
                            "status": {
                                "description": "The intallation status of this patch on the cluster.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "resume": {
                    "description": "Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "total": {
                    "description": "Total number of items available.",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Install a patch.",
            "properties": {
                "override": {
                    "description": "Whether to ignore patch system validation and force the installation.",
                    "type": "boolean"
                },
                "rolling": {
                    "description": "Whether to install the patch on one node at a time. Defaults to true.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "POST_input_schema": {
            "description": "A software patch that can be applied to OneFS.",
            "properties": {
                "location": {
                    "description": "The path location of the patch file.",
                    "type": "string"
                },
                "patch": {
                    "description": "The name or path of the patch to install.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/patch/patches/<ID>": {
        "DELETE_args": {
            "description": "Uninstall a patch.",
            "properties": {
                "override": {
                    "description": "Whether to ignore patch system validation and force the uninstallation.",
                    "type": "boolean"
                },
                "rolling": {
                    "description": "Whether to uninstall the patch on one node at a time. Defaults to true.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GET_args": {
            "description": "View a single patch.",
            "properties": {
                "local": {
                    "description": "Only view patch information on the local node.",
                    "type": "boolean"
                },
                "location": {
                    "description": "Path location of patch file.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "patches": {
                    "items": {
                        "description": "A software patch that can be applied to OneFS.",
                        "properties": {
                            "comment": {
                                "description": "A long comment about the patch.",
                                "type": "string"
                            },
                            "conflicts": {
                                "description": "Other patches that this patch conflicts with.",
                                "items": "string",
                                "type": "array"
                            },
                            "dependencies": {
                                "description": "Other patches that this patch depends on.",
                                "items": "string",
                                "type": "array"
                            },
                            "description": {
                                "description": "A short description of the patch.",
                                "type": "string"
                            },
                            "files": {
                                "description": "The files contained in this patch.",
                                "items": {
                                    "md5": {
                                        "description": "The md5 checksum of the file.",
                                        "type": "string"
                                    },
                                    "path": {
                                        "description": "The path of the file.",
                                        "type": "string"
                                    }
                                },
                                "type": "array"
                            },
                            "id": {
                                "description": "A unique identifier for the patch.",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the patch.",
                                "type": "string"
                            },
                            "nodes": {
                                "description": "The nodes that this patch is installed on.",
                                "items": "integer",
                                "type": "array"
                            },
                            "status": {
                                "description": "The intallation status of this patch on the cluster.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/upgrade/cluster/retry_last_action": {
        "POST_args": {
            "description": "Retry the last upgrade action, in-case the previous attempt failed.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Retry the last upgrade action, in-case the previous attempt failed.",
            "properties": {
                "nodes": {
                    "description": "List of the nodes or \"all\" where the last upgrade action can be retried.",
                    "items": {
                        "description": "The lnn of the node.",
                        "type": "integer"
                    },
                    "type": [
                        "array",
                        "string"
                    ]
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/rollback": {
        "POST_args": {
            "description": "Rollback the upgrade of a cluster.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Start upgrade assessment on cluster.",
            "properties": {},
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        }
    },
    "/3/upgrade/cluster/upgrade": {
        "POST_args": {
            "description": "The settings necessary to start an upgrade.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "The settings necessary to start an upgrade.",
            "properties": {
                "install_image_path": {
                    "description": "The location (path) of the upgrade image which must be within /ifs.",
                    "type": "string"
                },
                "nodes_to_rolling_upgrade": {
                    "description": "The nodes (to be) scheduled for upgrade ordered by queue position number. Null if the cluster_state is 'partially upgraded' or upgrade_type is 'simultaneous'. One of the following values: [<lnn-1>, <lnn-2>, ... ], 'All', null",
                    "items": {
                        "description": "The lnn of the node.",
                        "type": "integer"
                    },
                    "type": [
                        "array",
                        "string",
                        "null"
                    ]
                },
                "skip_optional": {
                    "description": "Used to indicate that the pre-upgrade check should be skipped",
                    "type": "boolean"
                },
                "upgrade_type": {
                    "description": "The type of upgrade to perform. One of the following values: 'rolling', 'simultaneous'",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "description": "Any empty JSON object is required.",
            "properties": {},
            "type": "object"
        },
        "PUT_args": {
            "description": "Add nodes to a running upgrade.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Add nodes to a running upgrade.",
            "properties": {
                "nodes_to_rolling_upgrade": {
                    "description": "The nodes (to be) scheduled for an existing upgrade ordered by queue position number. [<lnn-1>, <lnn-2>, ... ], 'All', null",
                    "items": {
                        "description": "The lnn of the node.",
                        "type": "integer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "/3/zones": {
        "GET_args": {
            "description": "List all access zones.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "zones": {
                    "items": {
                        "description": "Specifies properties for access zones.",
                        "properties": {
                            "alternate_system_provider": {
                                "description": "Specifies an alternate system provider.",
                                "type": "string"
                            },
                            "auth_providers": {
                                "description": "Specifies the list of authentication providers available on this access zone.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "cache_entry_expiry": {
                                "description": "Specifies amount of time in seconds to cache a user/group.",
                                "type": "integer"
                            },
                            "create_path": {
                                "description": "Determines if a path is created when a path does not exist.",
                                "type": "boolean"
                            },
                            "groupnet": {
                                "description": "Groupnet identitier",
                                "type": "string"
                            },
                            "home_directory_umask": {
                                "description": "Specifies the permissions set on automatically created user home directories.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the access zone. This value is returned when an access zone is created through the POST method",
                                "type": "string"
                            },
                            "ifs_restricted": {
                                "description": "Specifies a list of users and groups that have read and write access to /ifs.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "map_untrusted": {
                                "description": "Maps untrusted domains to this NetBIOS domain during authentication.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the access zone name.",
                                "type": "string"
                            },
                            "netbios_name": {
                                "description": "Specifies the NetBIOS name.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the access zone base directory path.",
                                "type": "string"
                            },
                            "skeleton_directory": {
                                "description": "Specifies the skeleton directory that is used for user home directories.",
                                "type": "string"
                            },
                            "system": {
                                "description": "True if the access zone is built-in.",
                                "type": "boolean"
                            },
                            "system_provider": {
                                "description": "Specifies the system provider for the access zone.",
                                "type": "string"
                            },
                            "user_mapping_rules": {
                                "description": "Specifies the current ID mapping rules.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "zone_id": {
                                "description": "Specifies the access zone ID on the system.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_args": {
            "description": "Create a new access zone.",
            "type": "object"
        },
        "POST_input_schema": {
            "description": "Specifies properties for access zones.",
            "properties": {
                "alternate_system_provider": {
                    "description": "Specifies an alternate system provider.",
                    "type": "string"
                },
                "auth_providers": {
                    "description": "Specifies the list of authentication providers available on this access zone.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cache_entry_expiry": {
                    "description": "Specifies amount of time in seconds to cache a user/group.",
                    "type": "integer"
                },
                "create_path": {
                    "description": "Determines if a path is created when a path does not exist.",
                    "type": "boolean"
                },
                "force_overlap": {
                    "description": "Allow for overlapping base path.",
                    "type": "boolean"
                },
                "groupnet": {
                    "description": "Groupnet identitier",
                    "type": "string"
                },
                "home_directory_umask": {
                    "description": "Specifies the permissions set on automatically created user home directories.",
                    "type": "integer"
                },
                "ifs_restricted": {
                    "description": "Specifies a list of users and groups that have read and write access to /ifs.",
                    "items": {
                        "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                        "properties": {
                            "id": {
                                "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the persona name, which must be combined with a type.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Specifies the type of persona, which must be combined with a name.",
                                "enum": [
                                    "user",
                                    "group",
                                    "wellknown"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "map_untrusted": {
                    "description": "Maps untrusted domains to this NetBIOS domain during authentication.",
                    "type": "string"
                },
                "name": {
                    "description": "Specifies the access zone name.",
                    "required": true,
                    "type": "string"
                },
                "netbios_name": {
                    "description": "Specifies the NetBIOS name.",
                    "type": "string"
                },
                "path": {
                    "description": "Specifies the access zone base directory path.",
                    "type": "string"
                },
                "skeleton_directory": {
                    "description": "Specifies the skeleton directory that is used for user home directories.",
                    "type": "string"
                },
                "system_provider": {
                    "description": "Specifies the system provider for the access zone.",
                    "type": "string"
                },
                "user_mapping_rules": {
                    "description": "Specifies the current ID mapping rules.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "POST_output_schema": {
            "properties": {
                "id": {
                    "description": "ID of created item that can be used to refer to item in the collection-item resource path.",
                    "required": true,
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "/3/zones/<ZONE>": {
        "DELETE_args": {
            "description": "Delete the access zone.",
            "type": "object"
        },
        "GET_args": {
            "description": "Retrieve the access zone information.",
            "type": "object"
        },
        "GET_output_schema": {
            "properties": {
                "zones": {
                    "items": {
                        "description": "Specifies properties for access zones.",
                        "properties": {
                            "alternate_system_provider": {
                                "description": "Specifies an alternate system provider.",
                                "type": "string"
                            },
                            "auth_providers": {
                                "description": "Specifies the list of authentication providers available on this access zone.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "cache_entry_expiry": {
                                "description": "Specifies amount of time in seconds to cache a user/group.",
                                "type": "integer"
                            },
                            "create_path": {
                                "description": "Determines if a path is created when a path does not exist.",
                                "type": "boolean"
                            },
                            "force_overlap": {
                                "description": "Allow for overlapping base path.",
                                "type": "boolean"
                            },
                            "groupnet": {
                                "description": "Groupnet identitier",
                                "type": "string"
                            },
                            "home_directory_umask": {
                                "description": "Specifies the permissions set on automatically created user home directories.",
                                "type": "integer"
                            },
                            "id": {
                                "description": "Specifies the system-assigned ID for the access zone. This value is returned when an access zone is created through the POST method",
                                "type": "string"
                            },
                            "ifs_restricted": {
                                "description": "Specifies a list of users and groups that have read and write access to /ifs.",
                                "items": {
                                    "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                    "properties": {
                                        "id": {
                                            "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Specifies the persona name, which must be combined with a type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Specifies the type of persona, which must be combined with a name.",
                                            "enum": [
                                                "user",
                                                "group",
                                                "wellknown"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "map_untrusted": {
                                "description": "Maps untrusted domains to this NetBIOS domain during authentication.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Specifies the access zone name.",
                                "type": "string"
                            },
                            "netbios_name": {
                                "description": "Specifies the NetBIOS name.",
                                "type": "string"
                            },
                            "path": {
                                "description": "Specifies the access zone base directory path.",
                                "type": "string"
                            },
                            "skeleton_directory": {
                                "description": "Specifies the skeleton directory that is used for user home directories.",
                                "type": "string"
                            },
                            "system": {
                                "description": "True if the access zone is built-in.",
                                "type": "boolean"
                            },
                            "system_provider": {
                                "description": "Specifies the system provider for the access zone.",
                                "type": "string"
                            },
                            "user_mapping_rules": {
                                "description": "Specifies the current ID mapping rules.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "zone_id": {
                                "description": "Specifies the access zone ID on the system.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PUT_args": {
            "description": "Modify the access zone. All input fields are optional, but one or more must be supplied.",
            "type": "object"
        },
        "PUT_input_schema": {
            "description": "Specifies properties for access zones.",
            "properties": {
                "alternate_system_provider": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies an alternate system provider.",
                            "type": "string"
                        }
                    ]
                },
                "auth_providers": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the list of authentication providers available on this access zone.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "cache_entry_expiry": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies amount of time in seconds to cache a user/group.",
                            "type": "integer"
                        }
                    ]
                },
                "create_path": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Determines if a path is created when a path does not exist.",
                            "type": "boolean"
                        }
                    ]
                },
                "force_overlap": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Allow for overlapping base path.",
                            "type": "boolean"
                        }
                    ]
                },
                "home_directory_umask": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the permissions set on automatically created user home directories.",
                            "type": "integer"
                        }
                    ]
                },
                "ifs_restricted": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies a list of users and groups that have read and write access to /ifs.",
                            "items": {
                                "description": "Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.",
                                "properties": {
                                    "id": {
                                        "description": "Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Specifies the persona name, which must be combined with a type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Specifies the type of persona, which must be combined with a name.",
                                        "enum": [
                                            "user",
                                            "group",
                                            "wellknown"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ]
                },
                "map_untrusted": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Maps untrusted domains to this NetBIOS domain during authentication.",
                            "type": "string"
                        }
                    ]
                },
                "name": {
                    "description": "Specifies the access zone name.",
                    "type": "string"
                },
                "netbios_name": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the NetBIOS name.",
                            "type": "string"
                        }
                    ]
                },
                "path": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the access zone base directory path.",
                            "type": "string"
                        }
                    ]
                },
                "skeleton_directory": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the skeleton directory that is used for user home directories.",
                            "type": "string"
                        }
                    ]
                },
                "system_provider": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the system provider for the access zone.",
                            "type": "string"
                        }
                    ]
                },
                "user_mapping_rules": {
                    "type": [
                        {
                            "enum": [
                                "@DEFAULT"
                            ],
                            "type": "string"
                        },
                        {
                            "description": "Specifies the current ID mapping rules.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        }
    },
    "directory": [
        "/3/antivirus/policies",
        "/3/antivirus/policies/<NAME>",
        "/3/antivirus/quarantine/<PATH+>",
        "/3/antivirus/reports/scans",
        "/3/antivirus/reports/scans/<ID>",
        "/3/antivirus/reports/threats",
        "/3/antivirus/reports/threats/<ID>",
        "/3/antivirus/scan",
        "/3/antivirus/servers",
        "/3/antivirus/servers/<ID+>",
        "/3/antivirus/settings",
        "/1/audit/settings",
        "/3/audit/settings",
        "/3/audit/settings/global",
        "/1/audit/topics",
        "/1/audit/topics/<NAME>",
        "/1/auth/access/<USER>",
        "/1/auth/groups",
        "/1/auth/groups/<GROUP>",
        "/1/auth/groups/<GROUP>/members",
        "/1/auth/groups/<GROUP>/members/<MEMBER>",
        "/1/auth/id",
        "/3/auth/log-level",
        "/3/auth/mapping/dump",
        "/1/auth/mapping/identities",
        "/1/auth/mapping/identities/<SOURCE>",
        "/3/auth/mapping/import",
        "/1/auth/mapping/users/lookup",
        "/1/auth/mapping/users/rules",
        "/1/auth/netgroups/<NETGROUP>",
        "/1/auth/privileges",
        "/1/auth/providers/ads",
        "/3/auth/providers/ads",
        "/1/auth/providers/ads/<ID>",
        "/3/auth/providers/ads/<ID>",
        "/1/auth/providers/ads/<ID>/controllers",
        "/1/auth/providers/ads/<ID>/domains",
        "/3/auth/providers/ads/<ID>/domains",
        "/1/auth/providers/ads/<ID>/domains/<ADS-DOMAIN>",
        "/3/auth/providers/ads/<ID>/domains/<ADS-DOMAIN>",
        "/1/auth/providers/ads/<ID>/search",
        "/1/auth/providers/file",
        "/1/auth/providers/file/<ID>",
        "/1/auth/providers/krb5",
        "/3/auth/providers/krb5",
        "/1/auth/providers/krb5/<ID>",
        "/3/auth/providers/krb5/<ID>",
        "/1/auth/providers/ldap",
        "/3/auth/providers/ldap",
        "/1/auth/providers/ldap/<ID>",
        "/3/auth/providers/ldap/<ID>",
        "/1/auth/providers/local",
        "/1/auth/providers/local/<ID>",
        "/1/auth/providers/nis",
        "/3/auth/providers/nis",
        "/1/auth/providers/nis/<ID>",
        "/3/auth/providers/nis/<ID>",
        "/1/auth/providers/summary",
        "/3/auth/providers/summary",
        "/3/auth/refresh",
        "/1/auth/roles",
        "/1/auth/roles/<ROLE>",
        "/1/auth/roles/<ROLE>/members",
        "/1/auth/roles/<ROLE>/members/<MEMBER>",
        "/1/auth/roles/<ROLE>/privileges",
        "/1/auth/roles/<ROLE>/privileges/<PRIVILEGE>",
        "/3/auth/settings/acls",
        "/1/auth/settings/global",
        "/1/auth/settings/krb5/defaults",
        "/1/auth/settings/krb5/domains",
        "/1/auth/settings/krb5/domains/<DOMAIN>",
        "/1/auth/settings/krb5/realms",
        "/1/auth/settings/krb5/realms/<REALM>",
        "/1/auth/settings/mapping",
        "/1/auth/shells",
        "/1/auth/users",
        "/1/auth/users/<USER>",
        "/3/auth/users/<USER>/change-password",
        "/1/auth/users/<USER>/change_password",
        "/3/auth/users/<USER>/member-of",
        "/3/auth/users/<USER>/member-of/<MEMBER_OF>",
        "/1/auth/users/<USER>/member_of",
        "/1/auth/users/<USER>/member_of/<MEMBER_OF>",
        "/1/auth/wellknowns",
        "/1/auth/wellknowns/<WELLKNOWN>",
        "/3/cloud/access",
        "/3/cloud/access/<GUID>",
        "/3/cloud/accounts",
        "/3/cloud/accounts/<ACCOUNT>",
        "/3/cloud/jobs",
        "/3/cloud/jobs-files/<JOB>",
        "/3/cloud/jobs/<JOB>",
        "/3/cloud/pools",
        "/3/cloud/pools/<POOL>",
        "/3/cloud/settings",
        "/3/cloud/settings/encryption-key",
        "/3/cloud/settings/reporting-eula",
        "/3/cluster/add-node",
        "/1/cluster/config",
        "/3/cluster/config",
        "/1/cluster/email",
        "/3/cluster/email/default-template",
        "/1/cluster/external-ips",
        "/2/cluster/external-ips",
        "/1/cluster/identity",
        "/3/cluster/identity",
        "/3/cluster/nodes",
        "/3/cluster/nodes-available",
        "/3/cluster/nodes/<LNN>",
        "/3/cluster/nodes/<LNN>/drives",
        "/3/cluster/nodes/<LNN>/drives-purposelist",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/add",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/firmware",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/firmware/update",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/format",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/purpose",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/smartfail",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/stopfail",
        "/3/cluster/nodes/<LNN>/drives/<DRIVEID>/suspend",
        "/3/cluster/nodes/<LNN>/hardware",
        "/3/cluster/nodes/<LNN>/hardware-fast",
        "/3/cluster/nodes/<LNN>/partitions",
        "/3/cluster/nodes/<LNN>/reboot",
        "/3/cluster/nodes/<LNN>/sensors",
        "/3/cluster/nodes/<LNN>/shutdown",
        "/3/cluster/nodes/<LNN>/state",
        "/3/cluster/nodes/<LNN>/state/readonly",
        "/3/cluster/nodes/<LNN>/state/servicelight",
        "/3/cluster/nodes/<LNN>/state/smartfail",
        "/3/cluster/nodes/<LNN>/status",
        "/3/cluster/nodes/<LNN>/status/batterystatus",
        "/1/cluster/owner",
        "/1/cluster/statfs",
        "/1/cluster/time",
        "/3/cluster/time",
        "/3/cluster/timezone",
        "/3/cluster/timezone/regions/<REGION*>",
        "/3/cluster/timezone/settings",
        "/3/cluster/version",
        "/1/debug/echo/<LNN>/<TOKEN>",
        "/1/debug/echo/<TOKEN>",
        "/1/debug/stats",
        "/1/dedupe/dedupe-summary",
        "/1/dedupe/reports",
        "/1/dedupe/reports/<ID>",
        "/1/dedupe/settings",
        "/3/event/alert-conditions",
        "/3/event/alert-conditions/<ID>",
        "/3/event/categories",
        "/3/event/categories/<ID>",
        "/3/event/channels",
        "/3/event/channels/<ID>",
        "/3/event/eventgroup-definitions",
        "/3/event/eventgroup-definitions/<ID>",
        "/3/event/eventgroup-occurrences",
        "/3/event/eventgroup-occurrences/<ID>",
        "/3/event/eventlists",
        "/3/event/eventlists/<ID>",
        "/3/event/events",
        "/3/event/settings",
        "/3/file-filter/settings",
        "/1/filepool/default-policy",
        "/1/filepool/policies",
        "/1/filepool/policies/<POLNAME>",
        "/1/filepool/templates",
        "/1/filepool/templates/<NAME>",
        "/1/filesystem/settings/access-time",
        "/1/filesystem/settings/character-encodings",
        "/1/fsa/path",
        "/1/fsa/results",
        "/3/fsa/results",
        "/1/fsa/results/<ID>",
        "/3/fsa/results/<ID>",
        "/3/fsa/results/<ID>/directories",
        "/3/fsa/results/<ID>/directories/<LIN>",
        "/3/fsa/results/<ID>/histogram",
        "/3/fsa/results/<ID>/histogram/<STAT>",
        "/3/fsa/results/<ID>/histogram/<STAT>/by",
        "/3/fsa/results/<ID>/histogram/<STAT>/by/<BREAKOUT>",
        "/3/fsa/results/<ID>/top-dirs",
        "/3/fsa/results/<ID>/top-dirs/<STAT>",
        "/3/fsa/results/<ID>/top-files",
        "/3/fsa/results/<ID>/top-files/<STAT>",
        "/1/fsa/settings",
        "/3/hardening/apply",
        "/3/hardening/resolve",
        "/3/hardening/revert",
        "/3/hardening/state",
        "/3/hardening/status",
        "/3/hardware/fcports",
        "/3/hardware/fcports/<port>",
        "/3/hardware/tape/<name*>",
        "/3/hardware/tapes",
        "/1/job/events",
        "/3/job/events",
        "/1/job/job-summary",
        "/1/job/jobs",
        "/3/job/jobs",
        "/1/job/jobs/<JID>",
        "/1/job/policies",
        "/1/job/policies/<NAME>",
        "/3/job/recent",
        "/1/job/reports",
        "/3/job/reports",
        "/1/job/statistics",
        "/1/job/types",
        "/1/job/types/<NAME>",
        "/1/license/eula",
        "/1/license/licenses",
        "/1/license/licenses/<NAME>",
        "/3/local/cluster/time",
        "/3/local/cluster/version",
        "/1/local/debug/echo/<LNN>/<TOKEN>",
        "/3/network/dnscache",
        "/3/network/dnscache/flush",
        "/3/network/external",
        "/3/network/groupnets",
        "/3/network/groupnets/<GROUPNET>",
        "/3/network/groupnets/<GROUPNET>/subnets",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/interfaces",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rebalance-ips",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rules",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/rules/<NAME>",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/sc-resume-nodes",
        "/3/network/groupnets/<GROUPNET>/subnets/<SUBNET>/pools/<POOL>/sc-suspend-nodes",
        "/3/network/interfaces",
        "/3/network/pools",
        "/3/network/rules",
        "/3/network/sc-rebalance-all",
        "/3/network/subnets",
        "/3/protocols/ftp/settings",
        "/3/protocols/hdfs/log-level",
        "/1/protocols/hdfs/proxyusers",
        "/1/protocols/hdfs/proxyusers/<NAME>",
        "/1/protocols/hdfs/proxyusers/<NAME>/members",
        "/1/protocols/hdfs/proxyusers/<NAME>/members/<MEMBER>",
        "/1/protocols/hdfs/racks",
        "/1/protocols/hdfs/racks/<ID>",
        "/3/protocols/hdfs/settings",
        "/3/protocols/http/settings",
        "/3/protocols/ndmp/contexts/backup",
        "/3/protocols/ndmp/contexts/backup/<id>",
        "/3/protocols/ndmp/contexts/bre",
        "/3/protocols/ndmp/contexts/bre/<id>",
        "/3/protocols/ndmp/contexts/restore",
        "/3/protocols/ndmp/contexts/restore/<id>",
        "/3/protocols/ndmp/diagnostics",
        "/3/protocols/ndmp/dumpdates/<path*>",
        "/3/protocols/ndmp/logs",
        "/3/protocols/ndmp/sessions",
        "/3/protocols/ndmp/sessions/<session>",
        "/3/protocols/ndmp/settings/dmas",
        "/3/protocols/ndmp/settings/global",
        "/3/protocols/ndmp/settings/variables/<path*>",
        "/3/protocols/ndmp/users",
        "/3/protocols/ndmp/users/<name>",
        "/2/protocols/nfs/aliases",
        "/2/protocols/nfs/aliases/<AID>",
        "/1/protocols/nfs/check",
        "/2/protocols/nfs/check",
        "/1/protocols/nfs/exports",
        "/2/protocols/nfs/exports",
        "/1/protocols/nfs/exports-summary",
        "/2/protocols/nfs/exports-summary",
        "/1/protocols/nfs/exports/<EID>",
        "/2/protocols/nfs/exports/<EID>",
        "/3/protocols/nfs/log-level",
        "/3/protocols/nfs/netgroup",
        "/3/protocols/nfs/netgroup/check",
        "/3/protocols/nfs/netgroup/flush",
        "/1/protocols/nfs/nlm/locks",
        "/2/protocols/nfs/nlm/locks",
        "/1/protocols/nfs/nlm/sessions",
        "/2/protocols/nfs/nlm/sessions",
        "/3/protocols/nfs/nlm/sessions",
        "/3/protocols/nfs/nlm/sessions-check",
        "/1/protocols/nfs/nlm/sessions/<ID>",
        "/2/protocols/nfs/nlm/sessions/<ID>",
        "/3/protocols/nfs/nlm/sessions/<ID>",
        "/1/protocols/nfs/nlm/waiters",
        "/2/protocols/nfs/nlm/waiters",
        "/1/protocols/nfs/reload",
        "/2/protocols/nfs/reload",
        "/3/protocols/nfs/reload",
        "/1/protocols/nfs/settings/export",
        "/2/protocols/nfs/settings/export",
        "/3/protocols/nfs/settings/global",
        "/2/protocols/nfs/settings/zone",
        "/3/protocols/ntp/servers",
        "/3/protocols/ntp/servers/<SERVER>",
        "/3/protocols/ntp/settings",
        "/3/protocols/smb/log-level",
        "/3/protocols/smb/log-level/filters",
        "/3/protocols/smb/log-level/filters/<ID>",
        "/1/protocols/smb/openfiles",
        "/1/protocols/smb/openfiles/<ID>",
        "/1/protocols/smb/sessions",
        "/1/protocols/smb/sessions/<COMPUTER>",
        "/1/protocols/smb/sessions/<COMPUTER>/<USER>",
        "/1/protocols/smb/settings/global",
        "/3/protocols/smb/settings/global",
        "/1/protocols/smb/settings/share",
        "/3/protocols/smb/settings/share",
        "/1/protocols/smb/shares",
        "/3/protocols/smb/shares",
        "/1/protocols/smb/shares-summary",
        "/1/protocols/smb/shares/<SHARE>",
        "/3/protocols/smb/shares/<SHARE>",
        "/3/protocols/snmp/settings",
        "/3/protocols/swift/accounts",
        "/3/protocols/swift/accounts/<ACCOUNT>",
        "/1/quota/license",
        "/1/quota/quotas",
        "/1/quota/quotas-summary",
        "/1/quota/quotas/<QID>",
        "/1/quota/quotas/<QID>/notifications",
        "/1/quota/quotas/<QID>/notifications/<NID>",
        "/1/quota/reports",
        "/1/quota/reports/<RID>",
        "/1/quota/reports/<RID>/about",
        "/1/quota/settings/mappings",
        "/1/quota/settings/mappings/<ID>",
        "/1/quota/settings/notifications",
        "/1/quota/settings/notifications/<NID>",
        "/1/quota/settings/reports",
        "/1/remotesupport/connectemc",
        "/1/snapshot/aliases",
        "/1/snapshot/aliases/<SID>",
        "/1/snapshot/changelists",
        "/1/snapshot/changelists/<CHANGELIST>",
        "/1/snapshot/changelists/<CHANGELIST>/lins",
        "/1/snapshot/changelists/<CHANGELIST>/lins/<LIN>",
        "/1/snapshot/license",
        "/1/snapshot/pending",
        "/1/snapshot/repstates",
        "/1/snapshot/repstates/<REPSTATE>",
        "/1/snapshot/schedules",
        "/3/snapshot/schedules",
        "/1/snapshot/schedules/<SID>",
        "/1/snapshot/settings",
        "/1/snapshot/snapshots",
        "/1/snapshot/snapshots-summary",
        "/1/snapshot/snapshots/<SID>",
        "/1/snapshot/snapshots/<SID>/locks",
        "/1/snapshot/snapshots/<SID>/locks/<LID>",
        "/1/statistics/current",
        "/1/statistics/history",
        "/1/statistics/keys",
        "/1/statistics/keys/<KEY>",
        "/3/statistics/operations",
        "/1/statistics/protocols",
        "/3/statistics/summary/client",
        "/3/statistics/summary/drive",
        "/3/statistics/summary/heat",
        "/3/statistics/summary/protocol",
        "/3/statistics/summary/protocol-stats",
        "/3/statistics/summary/system",
        "/1/storagepool/compatibilities/class/active",
        "/1/storagepool/compatibilities/class/active/<ID>",
        "/1/storagepool/compatibilities/class/available",
        "/1/storagepool/compatibilities/ssd/active",
        "/3/storagepool/compatibilities/ssd/active",
        "/1/storagepool/compatibilities/ssd/active/<ID>",
        "/3/storagepool/compatibilities/ssd/active/<ID>",
        "/1/storagepool/compatibilities/ssd/available",
        "/1/storagepool/nodepools",
        "/3/storagepool/nodepools",
        "/1/storagepool/nodepools/<NID>",
        "/3/storagepool/nodepools/<NID>",
        "/1/storagepool/settings",
        "/1/storagepool/status",
        "/1/storagepool/storagepools",
        "/3/storagepool/storagepools",
        "/3/storagepool/suggested-protection/<NID>",
        "/1/storagepool/suggested_protection/<NID>",
        "/1/storagepool/tiers",
        "/1/storagepool/tiers/<TID>",
        "/1/storagepool/unprovisioned",
        "/3/sync/history/cpu",
        "/1/sync/history/file",
        "/1/sync/history/network",
        "/3/sync/history/worker",
        "/1/sync/jobs",
        "/3/sync/jobs",
        "/1/sync/jobs/<JOB>",
        "/3/sync/jobs/<JOB>",
        "/1/sync/license",
        "/1/sync/policies",
        "/3/sync/policies",
        "/1/sync/policies/<POLICY>",
        "/3/sync/policies/<POLICY>",
        "/1/sync/policies/<POLICY>/reset",
        "/1/sync/reports",
        "/1/sync/reports-rotate",
        "/1/sync/reports/<RID>",
        "/1/sync/reports/<RID>/subreports",
        "/1/sync/reports/<RID>/subreports/<SID>",
        "/1/sync/rules",
        "/3/sync/rules",
        "/1/sync/rules/<RULE>",
        "/3/sync/rules/<RULE>",
        "/1/sync/settings",
        "/3/sync/settings",
        "/1/sync/target/policies",
        "/1/sync/target/policies/<POLICY>",
        "/1/sync/target/policies/<POLICY>/cancel",
        "/1/sync/target/reports",
        "/1/sync/target/reports/<RID>",
        "/1/sync/target/reports/<RID>/subreports",
        "/1/sync/target/reports/<RID>/subreports/<SID>",
        "/3/upgrade/cluster",
        "/3/upgrade/cluster/add_remaining_nodes",
        "/3/upgrade/cluster/archive",
        "/3/upgrade/cluster/assess",
        "/3/upgrade/cluster/commit",
        "/3/upgrade/cluster/firmware/assess",
        "/3/upgrade/cluster/firmware/progress",
        "/3/upgrade/cluster/firmware/status",
        "/3/upgrade/cluster/firmware/upgrade",
        "/3/upgrade/cluster/nodes",
        "/3/upgrade/cluster/nodes/<LNN>",
        "/3/upgrade/cluster/nodes/<LNN>/firmware/status",
        "/3/upgrade/cluster/patch/abort",
        "/3/upgrade/cluster/patch/patches",
        "/3/upgrade/cluster/patch/patches/<ID>",
        "/3/upgrade/cluster/retry_last_action",
        "/3/upgrade/cluster/rollback",
        "/3/upgrade/cluster/upgrade",
        "/1/worm/domains",
        "/1/worm/domains/<DOMAIN+>",
        "/1/worm/settings",
        "/1/zones",
        "/3/zones",
        "/1/zones-summary",
        "/1/zones-summary/<ZONE>",
        "/1/zones/<ZONE>",
        "/3/zones/<ZONE>"
    ],
    "version": "3"
}